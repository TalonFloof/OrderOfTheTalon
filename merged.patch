--- net/minecraft/game/world/block/RedstoneOreBlock.java
+++ net/minecraft/game/world/block/RedstoneOreBlock.java
@@ -7,6 +7,8 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class RedstoneOreBlock extends Block {
 	private boolean glowing;
 
@@ -23,6 +25,10 @@
 		return 30;
 	}
 
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.textureIndex + (var2 & 3);
+	}
+
 	public void onBlockClicked(World var1, int var2, int var3, int var4, PlayerEntity var5) {
 		this.glow(var1, var2, var3, var4);
 		super.onBlockClicked(var1, var2, var3, var4, var5);
@@ -41,14 +47,14 @@
 	private void glow(World var1, int var2, int var3, int var4) {
 		this.activateGlow(var1, var2, var3, var4);
 		if(this.blockID == Block.redstoneOre.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.glowingRedstoneOre.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.glowingRedstoneOre.blockID, var1.getBlockMetadata(var2,var3,var4));
 		}
 
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
 		if(this.blockID == Block.glowingRedstoneOre.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.redstoneOre.blockID);
+			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.redstoneOre.blockID, var1.getBlockMetadata(var2,var3,var4));
 		}
 
 	}
--- /dev/null
+++ net/minecraft/game/world/biome/categories/tropical/SwamplandBiome.java
@@ -1,0 +1,19 @@
+package net.minecraft.game.world.biome.categories.tropical;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.TreeFeature;
+
+import java.util.Random;
+
+public class SwamplandBiome extends Biome {
+    @Override
+    public Feature getRandomTreeFeature(Random rand) {
+        return new TreeFeature();
+    }
+
+    @Override
+    public int getTreeCount(int treeNoise, int treeBonus) {
+        return treeNoise + treeBonus + 5;
+    }
+}
--- net/minecraft/game/world/terrain/generate/TerrainGenNetherCaves.java
+++ net/minecraft/game/world/terrain/generate/TerrainGenNetherCaves.java
@@ -4,13 +4,14 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 
 public class TerrainGenNetherCaves extends TerrainGenerator {
-	protected void generateLargeCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8) {
+	protected void generateLargeCaveNode(int var1, int var2, short[] var3, double var4, double var6, double var8) {
 		this.generateCaveNode(var1, var2, var3, var4, var6, var8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void generateCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
+	protected void generateCaveNode(int var1, int var2, short[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
 		double var17 = (double)(var1 * 16 + 8);
 		double var19 = (double)(var2 * 16 + 8);
 		float var21 = 0.0F;
@@ -102,7 +103,7 @@
 					for(var40 = var52; !var55 && var40 < var34; ++var40) {
 						for(int var41 = var54; !var55 && var41 < var38; ++var41) {
 							for(int var42 = var36 + 1; !var55 && var42 >= var53 - 1; --var42) {
-								var43 = (var40 * 16 + var41) * 128 + var42;
+								var43 = (var40 * 16 + var41) * SharedConstants.CHUNK_HEIGHT + var42;
 								if(var42 >= 0 && var42 < 128) {
 									if(var3[var43] == Block.flowingLava.blockID || var3[var43] == Block.stillLava.blockID) {
 										var55 = true;
@@ -122,12 +123,12 @@
 
 							for(var43 = var54; var43 < var38; ++var43) {
 								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								int var46 = (var40 * 16 + var43) * 128 + var36;
+								int var46 = (var40 * 16 + var43) * SharedConstants.CHUNK_HEIGHT + var36;
 
 								for(int var47 = var36 - 1; var47 >= var53; --var47) {
 									double var48 = ((double)var47 + 0.5D - var6) / var29;
 									if(var48 > -0.7D && var56 * var56 + var48 * var48 + var44 * var44 < 1.0D) {
-										byte var50 = var3[var46];
+										short var50 = var3[var46];
 										if(var50 == Block.netherrack.blockID || var50 == Block.dirt.blockID || var50 == Block.grass.blockID) {
 											var3[var46] = 0;
 										}
@@ -148,7 +149,7 @@
 
 	}
 
-	protected void generateRecursive(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void generateRecursive(World var1, int var2, int var3, int var4, int var5, short[] var6) {
 		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(10) + 1) + 1);
 		if(this.rand.nextInt(5) != 0) {
 			var7 = 0;
--- /dev/null
+++ net/minecraft/game/world/biome/categories/temperate_forest/SeasonalWoods.java
@@ -1,0 +1,26 @@
+package net.minecraft.game.world.biome.categories.temperate_forest;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.BigTreeFeature;
+import net.minecraft.game.world.terrain.feature.BirchTreeFeature;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.TreeFeature;
+
+import java.util.Random;
+
+public class SeasonalWoods extends Biome {
+    @Override
+    public int getTreeCount(int treeNoise, int treeBonus) {
+        return treeNoise + treeBonus + 5;
+    }
+
+    @Override
+    public Feature getRandomTreeFeature(Random var1) {
+        return (Feature)(var1.nextInt(5) == 0 ? new BirchTreeFeature() : new BigTreeFeature());
+    }
+
+    @Override
+    public int getFlowerCount() {
+        return 4;
+    }
+}
--- net/minecraft/game/world/biome/SwamplandBiome.java
+++ /dev/null
@@ -1,4 +1,0 @@
-package net.minecraft.game.world.biome;
-
-public class SwamplandBiome extends Biome {
-}
--- net/minecraft/game/world/chunk/ChunkBlockMap.java
+++ net/minecraft/game/world/chunk/ChunkBlockMap.java
@@ -3,20 +3,20 @@
 import net.minecraft.game.world.block.Block;
 
 public class ChunkBlockMap {
-	private static byte[] blocks = new byte[256];
+	private static short[] blocks = new short[16*16*256];
 
-	public static void setBlockData(byte[] var0) {
+	public static void setBlockData(short[] var0) {
 		for(int var1 = 0; var1 < var0.length; ++var1) {
-			var0[var1] = blocks[var0[var1] & 255];
+			var0[var1] = blocks[var0[var1]];
 		}
 
 	}
 
 	static {
 		try {
-			for(int var0 = 0; var0 < 256; ++var0) {
-				byte var1 = (byte)var0;
-				if(var1 != 0 && Block.blocksList[var1 & 255] == null) {
+			for(int var0 = 0; var0 < 16384; ++var0) {
+				short var1 = (short)var0;
+				if(var1 != 0 && Block.blocksList[var1] == null) {
 					var1 = 0;
 				}
 
--- net/minecraft/game/world/save/SaveConverterMcRegion.java
+++ net/minecraft/game/world/save/SaveConverterMcRegion.java
@@ -10,6 +10,8 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.zip.GZIPInputStream;
+
+import com.mojang.nbt.CompoundTag;
 import net.minecraft.game.world.WorldInfo;
 import net.minecraft.game.world.chunk.loader.region.RegionFile;
 import net.minecraft.game.world.chunk.loader.region.RegionFileCache;
@@ -43,7 +45,7 @@
 						var10 = var7;
 					}
 
-					var1.add(new SaveFormatComparator(var7, var10, var8.getLastTimePlayed(), var8.getSizeOnDisk(), var9));
+					var1.add(new SaveFormatComparator(var7, var10, var8.getLastTimePlayed(), var8.getSizeOnDisk(), var9,var8.isCreative()));
 				}
 			}
 		}
--- net/minecraft/client/render/entity/RenderPlayer.java
+++ net/minecraft/client/render/entity/RenderPlayer.java
@@ -3,6 +3,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.model.BipedModel;
+import net.minecraft.client.model.PlayerModel;
 import net.minecraft.client.player.ClientPlayerEntity;
 import net.minecraft.client.render.RenderBlocks;
 import net.minecraft.client.render.Tessellator;
@@ -17,13 +18,15 @@
 import org.lwjgl.opengl.GL11;
 
 public class RenderPlayer extends RenderLiving {
-	private BipedModel modelBipedMain = (BipedModel)this.mainModel;
+	private PlayerModel modelBipedMain = (PlayerModel)this.mainModel;
+	private PlayerModel modelClassic = new PlayerModel(0.0F,false);
+	private PlayerModel modelSlim = new PlayerModel(0.0F,true);
 	private BipedModel modelArmorChestplate = new BipedModel(1.0F);
 	private BipedModel modelArmor = new BipedModel(0.5F);
 	private static final String[] armorFilenamePrefix = new String[]{"cloth", "chain", "iron", "diamond", "gold"};
 
 	public RenderPlayer() {
-		super(new BipedModel(0.0F), 0.5F);
+		super(new PlayerModel(0.0F,false), 0.5F);
 	}
 
 	protected boolean setArmorModel(PlayerEntity var1, int var2, float var3) {
@@ -50,6 +53,8 @@
 	}
 
 	public void renderPlayer(PlayerEntity var1, double var2, double var4, double var6, float var8, float var9) {
+		this.mainModel = var1.isSlim ? this.modelSlim : this.modelClassic;
+		this.modelBipedMain = var1.isSlim ? this.modelSlim : this.modelClassic;
 		ItemStack var10 = var1.inventory.getCurrentItem();
 		this.modelArmorChestplate.field_1278_i = this.modelArmor.field_1278_i = this.modelBipedMain.field_1278_i = var10 != null;
 		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = var1.isSneaking();
@@ -58,9 +63,12 @@
 			var11 -= 0.125D;
 		}
 
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		super.doRenderLiving(var1, var2, var11, var6, var8, var9);
 		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = false;
 		this.modelArmorChestplate.field_1278_i = this.modelArmor.field_1278_i = this.modelBipedMain.field_1278_i = false;
+		GL11.glDisable(GL11.GL_BLEND);
 	}
 
 	protected void renderName(PlayerEntity var1, double var2, double var4, double var6) {
@@ -148,7 +156,7 @@
 			}
 		}
 
-		if(this.loadDownloadableImageTexture(var1.playerCloakUrl, (String)null)) {
+		if(this.loadDownloadableImageTexture(var1.cloakUrl, (String)null)) {
 			GL11.glPushMatrix();
 			GL11.glTranslatef(0.0F, 0.0F, 2.0F / 16.0F);
 			double var20 = var1.posX2 + (var1.posX1 - var1.posX2) * (double)var2 - (var1.prevPosX + (var1.posX - var1.prevPosX) * (double)var2);
@@ -233,10 +241,18 @@
 		GL11.glScalef(var3, var3, var3);
 	}
 
-	public void drawFirstPersonHand() {
+	public void drawFirstPersonHand(PlayerEntity player) {
+		this.mainModel = player.isSlim ? this.modelSlim : this.modelClassic;
+		this.modelBipedMain = player.isSlim ? this.modelSlim : this.modelClassic;
 		this.modelBipedMain.onGround = 0.0F;
 		this.modelBipedMain.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F / 16.0F);
 		this.modelBipedMain.bipedRightArm.render(1.0F / 16.0F);
+		GL11.glDisable(GL11.GL_CULL_FACE);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		this.modelBipedMain.rightSleeve.render(0.0625F);
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_CULL_FACE);
 	}
 
 	protected void func_22016_b(PlayerEntity var1, double var2, double var4, double var6) {
--- net/minecraft/util/MathHelper.java
+++ net/minecraft/util/MathHelper.java
@@ -2,6 +2,7 @@
 
 public class MathHelper {
 	private static float[] SIN_TABLE = new float[65536];
+	private static final int[] MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[]{0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
 
 	public static final float sin(float var0) {
 		return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
@@ -51,6 +52,37 @@
 
 	public static boolean isStringEmpty(String var0) {
 		return var0 == null || var0.length() == 0;
+	}
+
+	public static int smallestEncompassingPowerOfTwo(int value) {
+		int i = value - 1;
+		i |= i >> 1;
+		i |= i >> 2;
+		i |= i >> 4;
+		i |= i >> 8;
+		i |= i >> 16;
+		return i + 1;
+	}
+
+	public static boolean isPowerOfTwo(int i) {
+		return i != 0 && (i & i - 1) == 0;
+	}
+
+	public static int ceilLog2(int value) {
+		value = MathHelper.isPowerOfTwo(value) ? value : MathHelper.smallestEncompassingPowerOfTwo(value);
+		return MULTIPLY_DE_BRUIJN_BIT_POSITION[(int)((long)value * 125613361L >> 27) & 0x1F];
+	}
+
+	public static int lerp(double delta, int start, int end) {
+		return (int) Math.round(start + (end - start) * delta);
+	}
+
+	public static float lerp(double delta, float start, float end) {
+		return (float)(((end - start) * delta) + start);
+	}
+
+	public static double lerp(double delta, double start, double end) {
+		return start + delta * (end - start);
 	}
 
 	static {
--- net/minecraft/game/world/biome/ForestBiome.java
+++ /dev/null
@@ -1,19 +1,0 @@
-package net.minecraft.game.world.biome;
-
-import java.util.Random;
-import net.minecraft.game.entity.animal.WolfEntity;
-import net.minecraft.game.world.SpawnListEntry;
-import net.minecraft.game.world.terrain.feature.BigTreeFeature;
-import net.minecraft.game.world.terrain.feature.BirchTreeFeature;
-import net.minecraft.game.world.terrain.feature.Feature;
-import net.minecraft.game.world.terrain.feature.TreeFeature;
-
-public class ForestBiome extends Biome {
-	public ForestBiome() {
-		this.spawnableCreatureList.add(new SpawnListEntry(WolfEntity.class, 2));
-	}
-
-	public Feature getRandomTreeFeature(Random var1) {
-		return (Feature)(var1.nextInt(5) == 0 ? new BirchTreeFeature() : (var1.nextInt(3) == 0 ? new BigTreeFeature() : new TreeFeature()));
-	}
-}
--- net/minecraft/game/item/recipe/RecipesTools.java
+++ net/minecraft/game/item/recipe/RecipesTools.java
@@ -9,7 +9,7 @@
 	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ironIngot, Item.diamond, Item.goldIngot}, {Item.woodPickaxe, Item.stonePickaxe, Item.ironPickaxe, Item.diamondPickaxe, Item.goldPickaxe}, {Item.woodShovel, Item.stoneShovel, Item.ironShovel, Item.diamondShovel, Item.goldShovel}, {Item.woodAxe, Item.stoneAxe, Item.ironAxe, Item.diamondAxe, Item.goldAxe}, {Item.woodHoe, Item.stoneHoe, Item.ironHoe, Item.diamondHoe, Item.goldHoe}};
 
 	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
+		/*for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
@@ -18,6 +18,6 @@
 			}
 		}
 
-		var1.addRecipe(new ItemStack(Item.shears), new Object[]{" #", "# ", Character.valueOf('#'), Item.ironIngot});
+		var1.addRecipe(new ItemStack(Item.shears), new Object[]{" #", "# ", Character.valueOf('#'), Item.ironIngot});*/
 	}
 }
--- /dev/null
+++ net/minecraft/game/world/block/mechanical/GearboxBlock.java
@@ -1,0 +1,121 @@
+package net.minecraft.game.world.block.mechanical;
+
+import net.minecraft.game.item.Item;
+import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.world.BlockPos;
+import net.minecraft.game.world.World;
+import net.minecraft.game.world.block.Block;
+import net.minecraft.game.world.block.Direction;
+import net.minecraft.game.world.material.Material;
+
+import java.util.Random;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
+public class GearboxBlock extends Block {
+    public GearboxBlock(int var1) {
+        super(var1, Material.wood);
+        this.setTickOnLoad(true);
+    }
+
+    @Override
+    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+        if(var1 == var2) {
+            return getAtlasTexture(26,7);
+        }
+        return getAtlasTexture(16,0);
+    }
+
+    public static BlockPos addFacingAsOffset(BlockPos pos, int iFacing)
+    {
+        switch (iFacing) {
+            case 0: {
+                return new BlockPos(pos.x, pos.y - 1, pos.z);
+            }
+            case 1: {
+                return new BlockPos(pos.x,pos.y+1,pos.z);
+            }
+            case 2: {
+                return new BlockPos(pos.x,pos.y,pos.z-1);
+            }
+            case 3: {
+                return new BlockPos(pos.x,pos.y,pos.z+1);
+            }
+            case 4: {
+                return new BlockPos(pos.x-1,pos.y,pos.z);
+            }
+            default: {
+                return new BlockPos(pos.x+1,pos.y,pos.z);
+            }
+        }
+    }
+
+    public void onNeighborBlockChange(World world, int i, int j, int k, int iid) {
+        world.scheduleUpdateTick(i, j, k, Block.gearbox.blockID, tickRate());
+    }
+
+    @Override
+    public void updateTick(World world, int i, int j, int k, Random random) {
+        super.updateTick(world, i, j, k, random);
+        boolean powered = isGettingMechanicalPower(world,i,j,k);
+        if(powered) {
+            world.playSoundEffect((double) i + 0.5D, (double) j + 0.5D, (double) k + 0.5D, "random.explode", 0.05F, 1.0F);
+        }
+        int iFacing = world.getBlockMetadata(i, j, k) & 7;
+        for(int f=0; f < 6; f++) {
+            if(f == iFacing)
+                continue;
+            BlockPos target = addFacingAsOffset(new BlockPos(i, j, k),f);
+            if(world.getBlockId(target.x, target.y, target.z) != Block.axle.blockID)
+                continue;
+            AxleBlock axleBlock = (AxleBlock)Block.axle;
+            if(!axleBlock.isAxleTowardsFacing(world, target.x, target.y, target.z, f))
+                continue;
+            int power = axleBlock.getPowerLevel(world, target.x, target.y, target.z);
+            if(powered) {
+                if (power != 4)
+                    axleBlock.setPowerLevel(world, target.x, target.y, target.z, 4);
+                continue;
+            }
+            if(power != 0)
+                axleBlock.setPowerLevel(world, target.x, target.y, target.z, 0);
+        }
+    }
+
+    public boolean isGettingMechanicalPower(World world, int i, int j, int k)
+    {
+        int iFacing = world.getBlockMetadata(i, j, k) & 7;
+        BlockPos targetBlockPos = addFacingAsOffset(new BlockPos(i, j, k),iFacing);
+        int iTargetid = world.getBlockId(targetBlockPos.x, targetBlockPos.y, targetBlockPos.z);
+        return iTargetid == Block.axle.blockID && ((AxleBlock)Block.axle).isAxleTowardsFacing(world, targetBlockPos.x, targetBlockPos.y, targetBlockPos.z, iFacing) && ((AxleBlock)Block.axle).getPowerLevel(world, targetBlockPos.x, targetBlockPos.y, targetBlockPos.z) > 0;
+    }
+
+    public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
+        var1.setBlockMetadata(var2,var3,var4,var5);
+    }
+
+    public void onBlockAdded(World var1, int var2, int var3, int var4) {
+        var1.scheduleUpdateTick(var2, var3, var4, blockID, tickRate());
+    }
+
+    public void overpower(World w, int x, int y, int z) {
+        for(int iTemp = 0; iTemp < 8; iTemp++)
+        {
+            AxleBlock.ejectStackWithRandomOffset(w,x,y,z, new ItemStack(Block.planks,1,0));
+        }
+
+        for(int iTemp = 0; iTemp < 6; iTemp++)
+        {
+            AxleBlock.ejectStackWithRandomOffset(w,x,y,z, new ItemStack(Item.gear,1,0));
+        }
+
+        AxleBlock.ejectStackWithRandomOffset(w,x,y,z, new ItemStack(Item.redstone,1,0));
+        w.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.explode", 0.2F, 1.25F);
+        w.setBlock(x, y, z, 0);
+    }
+
+    public int tickRate()
+    {
+        return 10;
+    }
+}
--- net/minecraft/game/world/MetadataChunkBlock.java
+++ net/minecraft/game/world/MetadataChunkBlock.java
@@ -2,6 +2,7 @@
 
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.chunk.Chunk;
+import net.minecraft.util.SharedConstants;
 
 public class MetadataChunkBlock {
 	public final LightType lightType;
@@ -61,8 +62,8 @@
 							this.minY = 0;
 						}
 
-						if(this.maxY >= 128) {
-							this.maxY = 127;
+						if(this.maxY >= SharedConstants.CHUNK_HEIGHT) {
+							this.maxY = SharedConstants.CHUNK_HEIGHT - 1;
 						}
 
 						for(int var27 = this.minY; var27 <= this.maxY; ++var27) {
--- /dev/null
+++ net/minecraft/game/item/CobblestoneItem.java
@@ -1,0 +1,13 @@
+package net.minecraft.game.item;
+
+public class CobblestoneItem extends BlockItem {
+    public CobblestoneItem(int var1) {
+        super(var1);
+        this.setMaxDamage(0);
+        this.setHasSubtypes(true);
+    }
+
+    public int getPlacedBlockMetadata(int var1) {
+        return var1;
+    }
+}
--- net/minecraft/game/entity/monster/CreeperEntity.java
+++ net/minecraft/game/entity/monster/CreeperEntity.java
@@ -13,6 +13,7 @@
 	public CreeperEntity(World var1) {
 		super(var1);
 		this.texture = "/mob/creeper.png";
+		this.scoreValue = 30;
 	}
 
 	protected void entityInit() {
--- net/minecraft/client/gui/stats/GeneralStatsSlot.java
+++ net/minecraft/client/gui/stats/GeneralStatsSlot.java
@@ -29,8 +29,8 @@
 		return this.getSize() * 10;
 	}
 
-	protected void drawBackground() {
-		this.field_27276_a.drawDefaultBackground();
+	protected void drawBackground(float delta) {
+		this.field_27276_a.drawDefaultBackground(delta);
 	}
 
 	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
--- net/minecraft/game/item/SignItem.java
+++ net/minecraft/game/item/SignItem.java
@@ -47,7 +47,8 @@
 					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.wallSign.blockID, var7);
 				}
 
-				--var1.count;
+				if(!var3.isCreativeWorld())
+					--var1.count;
 				SignTileEntity var8 = (SignTileEntity)var3.getBlockTileEntity(var4, var5, var6);
 				if(var8 != null) {
 					var2.displayGUIEditSign(var8);
--- net/minecraft/game/item/BowItem.java
+++ net/minecraft/game/item/BowItem.java
@@ -11,7 +11,7 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, PlayerEntity var3) {
-		if(var3.inventory.consumeInventoryItem(Item.arrow.itemID)) {
+		if(var2.isCreativeWorld() || var3.inventory.consumeInventoryItem(Item.arrow.itemID)) {
 			var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (random.nextFloat() * 0.4F + 0.8F));
 			if(!var2.remoteWorld) {
 				var2.entityJoinedWorld(new ArrowEntity(var2, var3));
--- /dev/null
+++ net/minecraft/game/world/block/PlanksBlock.java
@@ -1,0 +1,49 @@
+package net.minecraft.game.world.block;
+
+import net.minecraft.game.item.DyeItem;
+import net.minecraft.game.world.BlockAccess;
+import net.minecraft.game.world.material.Material;
+
+import java.awt.*;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
+public class PlanksBlock extends Block {
+    protected PlanksBlock(int var1, Material var2) {
+        super(var1, var2);
+        this.textureIndex = getAtlasTexture(16,0);
+    }
+
+    public static int getPlankColor(int color) {
+        float[] hsb = Color.RGBtoHSB((color >> 16) & 0xFF,(color >> 8) & 0xFF,color & 0xFF,null);
+        hsb[1] *= 0.5F;
+        return Color.HSBtoRGB(hsb[0],hsb[1],hsb[2]);
+    }
+
+    protected int damageDropped(int var1) {
+        return var1;
+    }
+
+    public int getColorMultiplier(BlockAccess var1, int var2, int var3, int var4) {
+        int metadata = var1.getBlockMetadata(var2,var3,var4);
+        if(metadata == 0)
+            return 16777215;
+        return getPlankColor(DyeItem.dyeColors[metadata-1]);
+    }
+
+    public int getInventoryColor(int metadata) {
+        if(metadata == 0)
+            return 16777215;
+        return getPlankColor(DyeItem.dyeColors[metadata-1]);
+    }
+
+    @Override
+    public int getBlockTextureFromSide(int var1) {
+        return getAtlasTexture(16,0);
+    }
+
+    @Override
+    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+        return getAtlasTexture(16,var2 > 0 ? 1 : 0);
+    }
+}
--- /dev/null
+++ net/minecraft/client/model/PlayerModel.java
@@ -1,0 +1,89 @@
+package net.minecraft.client.model;
+
+import org.lwjgl.opengl.GL11;
+
+public class PlayerModel extends BipedModel {
+    public final ModelRenderer leftSleeve;
+    public final ModelRenderer rightSleeve;
+    public final ModelRenderer leftPantLeg;
+    public final ModelRenderer rightPantLeg;
+    public final ModelRenderer jacket;
+
+    public PlayerModel(float scale, boolean thinArms) {
+        super(scale);
+        if (thinArms) {
+            this.bipedLeftArm = this.createModelPart(32, 48);
+            this.bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 3, 12, 4, scale);
+            this.bipedLeftArm.setRotationPoint(5.0F, 2.5F, 0.0F);
+            this.bipedRightArm = this.createModelPart(40, 16);
+            this.bipedRightArm.addBox(-2.0F, -2.0F, -2.0F, 3, 12, 4, scale);
+            this.bipedRightArm.setRotationPoint(-5.0F, 2.5F, 0.0F);
+            this.leftSleeve = this.createModelPart(48, 48);
+            this.leftSleeve.addBox(-1.0F, -2.0F, -2.0F, 3, 12, 4, scale + 0.25F);
+            this.leftSleeve.setRotationPoint(5.0F, 2.5F, 0.0F);
+            this.rightSleeve = this.createModelPart(40, 32);
+            this.rightSleeve.addBox(-2.0F, -2.0F, -2.0F, 3, 12, 4, scale + 0.25F);
+            this.rightSleeve.setRotationPoint(-5.0F, 2.5F, 10.0F);
+        } else {
+            //this.bipedLeftArm = this.createModelPart(32, 48);
+            //this.bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, scale);
+            //this.bipedLeftArm.setRotationPoint(5.0F, 2.0F, 0.0F);
+            this.leftSleeve = this.createModelPart(48, 48);
+            this.leftSleeve.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, scale + 0.25F);
+            this.leftSleeve.setRotationPoint(5.0F, 2.0F, 0.0F);
+            this.rightSleeve = this.createModelPart(40, 32);
+            this.rightSleeve.addBox(-3.0F, -2.0F, -2.0F, 4, 12, 4, scale + 0.25F);
+            this.rightSleeve.setRotationPoint(-5.0F, 2.0F, 10.0F);
+        }
+
+        //this.bipedLeftLeg = this.createModelPart(16, 48);
+        //this.bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, scale);
+        //this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F, 0.0F);
+        this.leftPantLeg = this.createModelPart(0, 48);
+        this.leftPantLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, scale + 0.25F);
+        this.leftPantLeg.setRotationPoint(1.9F, 12.0F, 0.0F);
+        this.rightPantLeg = this.createModelPart(0, 32);
+        this.rightPantLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, scale + 0.25F);
+        this.rightPantLeg.setRotationPoint(-1.9F, 12.0F, 0.0F);
+        this.jacket = this.createModelPart(16, 32);
+        this.jacket.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, scale + 0.25F);
+        this.jacket.setRotationPoint(0.0F, 0.0F, 0.0F);
+    }
+
+    private ModelRenderer createModelPart(int x, int y) {
+        ModelRenderer modelRenderer = new ModelRenderer(x, y);
+        modelRenderer.textureHeight = 64;
+        return modelRenderer;
+    }
+
+    @Override
+    public void render(float limbAngle, float limbDistance, float animationProgress, float headYaw, float headPitch, float scale) {
+        super.render(limbAngle, limbDistance, animationProgress, headYaw, headPitch, scale);
+
+        GL11.glPushMatrix();
+        this.leftPantLeg.render(scale);
+        this.rightPantLeg.render(scale);
+        this.leftSleeve.render(scale);
+        this.rightSleeve.render(scale);
+        this.jacket.render(scale);
+        GL11.glPopMatrix();
+    }
+
+    public void copyPositionAndRotation(ModelRenderer from, ModelRenderer to) {
+        to.setRotationPoint(from.rotationPointX, from.rotationPointY, from.rotationPointZ);
+        to.rotateAngleX = from.rotateAngleX;
+        to.rotateAngleY = from.rotateAngleY;
+        to.rotateAngleZ = from.rotateAngleZ;
+    }
+
+    @Override
+    public void setRotationAngles(float limbAngle, float limbDistance, float animationProgress, float headYaw, float headPitch, float scale) {
+        super.setRotationAngles(limbAngle, limbDistance, animationProgress, headYaw, headPitch, scale);
+        this.copyPositionAndRotation(this.bipedLeftLeg, this.leftPantLeg);
+        this.copyPositionAndRotation(this.bipedRightLeg, this.rightPantLeg);
+        this.copyPositionAndRotation(this.bipedLeftArm, this.leftSleeve);
+        this.copyPositionAndRotation(this.bipedRightArm, this.rightSleeve);
+        this.copyPositionAndRotation(this.bipedBody, this.jacket);
+        this.copyPositionAndRotation(this.bipedHead, this.bipedHeadwear);
+    }
+}
--- net/minecraft/game/world/block/TrapDoorBlock.java
+++ net/minecraft/game/world/block/TrapDoorBlock.java
@@ -8,12 +8,14 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class TrapDoorBlock extends Block {
 	protected TrapDoorBlock(int var1, Material var2) {
 		super(var1, var2);
-		this.textureIndex = 84;
+		this.textureIndex = getAtlasTexture(30,6);
 		if(var2 == Material.iron) {
-			++this.textureIndex;
+			this.textureIndex = getAtlasTexture(30,0);
 		}
 
 		float var3 = 0.5F;
--- /dev/null
+++ net/minecraft/util/DoubleArray3D.java
@@ -1,0 +1,30 @@
+package net.minecraft.util;
+
+public class DoubleArray3D {
+    private final double[] array;
+    public final int width, length, height;
+    public DoubleArray3D(int width, int height, int length) {
+        this(null, width, height, length);
+    }
+
+    public DoubleArray3D(double[] array, int width, int height, int length) {
+        if (array == null) {
+            array = new double[width * height * length];
+        } else if (array.length < width * height * length) {
+            throw new IllegalArgumentException("Array is too small!");
+        }
+        this.array = array;
+        this.width = width;
+        this.height = height;
+        this.length = length;
+    }
+    public double get(int x, int y, int z) {
+        return this.array[(x * this.length + z) * this.height + y];
+    }
+    public void set(int x, int y, int z, double value) {
+        this.array[(x * this.length + z) * this.height + y] = value;
+    }
+    public double[] getArray() {
+        return array;
+    }
+}
--- net/minecraft/client/player/ClientNetPlayerEntity.java
+++ net/minecraft/client/player/ClientNetPlayerEntity.java
@@ -140,7 +140,7 @@
 
 	public void respawnPlayer() {
 		this.sendInventoryChanged();
-		this.sendQueue.addToSendQueue(new Packet9Respawn((byte)this.dimension));
+		this.sendQueue.addToSendQueue(new Packet9Respawn((byte)this.dimension, this.worldObj.isCreativeWorld()));
 	}
 
 	protected void damageEntity(int var1) {
--- net/minecraft/game/world/save/SaveFormatComparator.java
+++ net/minecraft/game/world/save/SaveFormatComparator.java
@@ -6,13 +6,15 @@
 	private final long field_22169_c;
 	private final long field_22168_d;
 	private final boolean field_22167_e;
+	private final Boolean creative;
 
-	public SaveFormatComparator(String var1, String var2, long var3, long var5, boolean var7) {
+	public SaveFormatComparator(String var1, String var2, long var3, long var5, boolean var7, Boolean var8) {
 		this.fileName = var1;
 		this.displayName = var2;
 		this.field_22169_c = var3;
 		this.field_22168_d = var5;
 		this.field_22167_e = var7;
+		this.creative = var8;
 	}
 
 	public String getFileName() {
@@ -37,6 +39,10 @@
 
 	public int func_22160_a(SaveFormatComparator var1) {
 		return this.field_22169_c < var1.field_22169_c ? 1 : (this.field_22169_c > var1.field_22169_c ? -1 : this.fileName.compareTo(var1.fileName));
+	}
+
+	public Boolean isCreative() {
+		return this.creative;
 	}
 
 	public int compareTo(Object var1) {
--- net/minecraft/client/render/ItemRenderer.java
+++ net/minecraft/client/render/ItemRenderer.java
@@ -12,6 +12,7 @@
 import net.minecraft.game.world.map.MapData;
 import net.minecraft.game.world.material.Material;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -31,11 +32,11 @@
 
 	public void renderItem(LivingEntity var1, ItemStack var2) {
 		GL11.glPushMatrix();
-		if(var2.id < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var2.id].getRenderType())) {
+		if(var2.id < SharedConstants.BLOCK_LIMIT && RenderBlocks.renderItemIn3d(Block.blocksList[var2.id].getRenderType())) {
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/terrain.png"));
 			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[var2.id], var2.getItemDamage(), var1.getEntityBrightness(1.0F));
 		} else {
-			if(var2.id < 256) {
+			if(var2.id < SharedConstants.BLOCK_LIMIT) {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/terrain.png"));
 			} else {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/gui/items.png"));
@@ -43,10 +44,10 @@
 
 			Tessellator var3 = Tessellator.instance;
 			int var4 = var1.getItemIcon(var2);
-			float var5 = ((float)(var4 % 16 * 16) + 0.0F) / 256.0F;
-			float var6 = ((float)(var4 % 16 * 16) + 15.99F) / 256.0F;
-			float var7 = ((float)(var4 / 16 * 16) + 0.0F) / 256.0F;
-			float var8 = ((float)(var4 / 16 * 16) + 15.99F) / 256.0F;
+			float var5 = ((float)(var4 % ((int)SharedConstants.ATLAS_SIZE/16) * 16) + 0.0F) / SharedConstants.ATLAS_SIZE;
+			float var6 = ((float)(var4 % ((int)SharedConstants.ATLAS_SIZE/16) * 16) + 15.99F) / SharedConstants.ATLAS_SIZE;
+			float var7 = ((float)(var4 / ((int)SharedConstants.ATLAS_SIZE/16) * 16) + 0.0F) / SharedConstants.ATLAS_SIZE;
+			float var8 = ((float)(var4 / ((int)SharedConstants.ATLAS_SIZE/16) * 16) + 15.99F) / SharedConstants.ATLAS_SIZE;
 			float var9 = 1.0F;
 			float var10 = 0.0F;
 			float var11 = 0.3F;
@@ -81,7 +82,7 @@
 			float var17;
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var6 + (var5 - var6) * var15 - 0.001953125F;
+				var16 = var6 + (var5 - var6) * var15 - (1F / SharedConstants.ATLAS_SIZE / SharedConstants.ATLAS_SIZE / 2F);
 				var17 = var9 * var15;
 				var3.addVertexWithUV((double)var17, 0.0D, (double)(0.0F - var13), (double)var16, (double)var8);
 				var3.addVertexWithUV((double)var17, 0.0D, 0.0D, (double)var16, (double)var8);
@@ -95,7 +96,7 @@
 
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var6 + (var5 - var6) * var15 - 0.001953125F;
+				var16 = var6 + (var5 - var6) * var15 - (1F / SharedConstants.ATLAS_SIZE / SharedConstants.ATLAS_SIZE / 2F);
 				var17 = var9 * var15 + 1.0F / 16.0F;
 				var3.addVertexWithUV((double)var17, 1.0D, (double)(0.0F - var13), (double)var16, (double)var7);
 				var3.addVertexWithUV((double)var17, 1.0D, 0.0D, (double)var16, (double)var7);
@@ -109,7 +110,7 @@
 
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var8 + (var7 - var8) * var15 - 0.001953125F;
+				var16 = var8 + (var7 - var8) * var15 - (1F / SharedConstants.ATLAS_SIZE / SharedConstants.ATLAS_SIZE / 2F);
 				var17 = var9 * var15 + 1.0F / 16.0F;
 				var3.addVertexWithUV(0.0D, (double)var17, 0.0D, (double)var6, (double)var16);
 				var3.addVertexWithUV((double)var9, (double)var17, 0.0D, (double)var5, (double)var16);
@@ -123,7 +124,7 @@
 
 			for(var14 = 0; var14 < 16; ++var14) {
 				var15 = (float)var14 / 16.0F;
-				var16 = var8 + (var7 - var8) * var15 - 0.001953125F;
+				var16 = var8 + (var7 - var8) * var15 - (1F / SharedConstants.ATLAS_SIZE / SharedConstants.ATLAS_SIZE / 2F);
 				var17 = var9 * var15;
 				var3.addVertexWithUV((double)var9, (double)var17, 0.0D, (double)var5, (double)var16);
 				var3.addVertexWithUV(0.0D, (double)var17, 0.0D, (double)var6, (double)var16);
@@ -153,7 +154,7 @@
 		float var9;
 		float var10;
 		if(var5 != null) {
-			int var7 = Item.itemsList[var5.id].getColorFromDamage(var5.getItemDamage());
+			int var7 = var5.getItem().getColorFromDamage(var5.getItemDamage());
 			var8 = (float)(var7 >> 16 & 255) / 255.0F;
 			var9 = (float)(var7 >> 8 & 255) / 255.0F;
 			var10 = (float)(var7 & 255) / 255.0F;
@@ -198,7 +199,7 @@
 				RenderPlayer var12 = (RenderPlayer)var11;
 				float var13 = 1.0F;
 				GL11.glScalef(var13, var13, var13);
-				var12.drawFirstPersonHand();
+				var12.drawFirstPersonHand(var3);
 				GL11.glPopMatrix();
 			}
 
@@ -278,7 +279,7 @@
 			RenderPlayer var16 = (RenderPlayer)var15;
 			var10 = 1.0F;
 			GL11.glScalef(var10, var10, var10);
-			var16.drawFirstPersonHand();
+			var16.drawFirstPersonHand(var3);
 			GL11.glPopMatrix();
 		}
 
@@ -323,11 +324,11 @@
 			}
 		}
 
-		if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
+		/*if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
 			var2 = this.mc.textureRegistry.getTexture("/misc/water.png");
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
 			this.renderWarpedTextureOverlay(var1);
-		}
+		}*/
 
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 	}
@@ -344,10 +345,10 @@
 		float var8 = 1.0F;
 		float var9 = -0.5F;
 		float var10 = 0.0078125F;
-		float var11 = (float)(var2 % 16) / 256.0F - var10;
-		float var12 = ((float)(var2 % 16) + 15.99F) / 256.0F + var10;
-		float var13 = (float)(var2 / 16) / 256.0F - var10;
-		float var14 = ((float)(var2 / 16) + 15.99F) / 256.0F + var10;
+		float var11 = (float)(var2 % ((int)SharedConstants.ATLAS_SIZE/16)) / SharedConstants.ATLAS_SIZE - var10;
+		float var12 = ((float)(var2 % ((int)SharedConstants.ATLAS_SIZE/16)) + 15.99F) / SharedConstants.ATLAS_SIZE + var10;
+		float var13 = (float)(var2 / ((int)SharedConstants.ATLAS_SIZE/16)) / SharedConstants.ATLAS_SIZE - var10;
+		float var14 = ((float)(var2 / ((int)SharedConstants.ATLAS_SIZE/16)) + 15.99F) / SharedConstants.ATLAS_SIZE + var10;
 		var3.startDrawingQuads();
 		var3.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)var12, (double)var14);
 		var3.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)var11, (double)var14);
@@ -393,13 +394,13 @@
 
 		for(int var4 = 0; var4 < 2; ++var4) {
 			GL11.glPushMatrix();
-			int var5 = Block.fire.textureIndex + var4 * 16;
+			int var5 = Block.fire.textureIndex + var4 * 32;
 			int var6 = (var5 & 15) << 4;
 			int var7 = var5 & 240;
-			float var8 = (float)var6 / 256.0F;
-			float var9 = ((float)var6 + 15.99F) / 256.0F;
-			float var10 = (float)var7 / 256.0F;
-			float var11 = ((float)var7 + 15.99F) / 256.0F;
+			float var8 = (float)var6 / SharedConstants.ATLAS_SIZE;
+			float var9 = ((float)var6 + 15.99F) / SharedConstants.ATLAS_SIZE;
+			float var10 = (float)var7 / SharedConstants.ATLAS_SIZE;
+			float var11 = ((float)var7 + 15.99F) / SharedConstants.ATLAS_SIZE;
 			float var12 = (0.0F - var3) / 2.0F;
 			float var13 = var12 + var3;
 			float var14 = 0.0F - var3 / 2.0F;
--- net/minecraft/client/gui/Gui.java
+++ net/minecraft/client/gui/Gui.java
@@ -88,6 +88,10 @@
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
+	public void drawCenteredStringNoShadow(FontRenderer var1, String var2, int var3, int var4, int var5) {
+		var1.drawString(var2, var3 - var1.getStringWidth(var2) / 2, var4, var5);
+	}
+
 	public void drawCenteredString(FontRenderer var1, String var2, int var3, int var4, int var5) {
 		var1.drawStringWithShadow(var2, var3 - var1.getStringWidth(var2) / 2, var4, var5);
 	}
--- net/minecraft/game/world/block/SandstoneBlock.java
+++ net/minecraft/game/world/block/SandstoneBlock.java
@@ -2,12 +2,14 @@
 
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class SandstoneBlock extends Block {
 	public SandstoneBlock(int var1) {
-		super(var1, 192, Material.stone);
+		super(var1, getAtlasTexture(8,1), Material.stone);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.textureIndex - 16 : (var1 == 0 ? this.textureIndex + 16 : this.textureIndex);
+		return var1 == 1 ? this.textureIndex - 1 : (var1 == 0 ? this.textureIndex + 1 : this.textureIndex /*side*/);
 	}
 }
--- net/minecraft/game/world/chunk/ChunkProviderImpl.java
+++ net/minecraft/game/world/chunk/ChunkProviderImpl.java
@@ -7,9 +7,13 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
+import net.minecraft.game.entity.player.PlayerEntity;
+import net.minecraft.game.world.BlockPos;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.chunk.loader.ChunkLoader;
 import net.minecraft.util.ProgressUpdate;
+import net.minecraft.util.SharedConstants;
 
 public class ChunkProviderImpl implements ChunkProvider {
 	private Set droppedChunksSet = new HashSet();
@@ -19,9 +23,10 @@
 	private Map chunkMap = new HashMap();
 	private List chunkList = new ArrayList();
 	private World worldObj;
+	private int chunkListIndex = 0;
 
 	public ChunkProviderImpl(World var1, ChunkLoader var2, ChunkProvider var3) {
-		this.emptyChunk = new EmptyChunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+		this.emptyChunk = new EmptyChunk(var1, new short[16 * 16 * SharedConstants.CHUNK_HEIGHT], 0, 0);
 		this.worldObj = var1;
 		this.chunkLoader = var2;
 		this.chunkProvider = var3;
@@ -165,12 +170,31 @@
 			if(!this.droppedChunksSet.isEmpty()) {
 				Integer var2 = (Integer)this.droppedChunksSet.iterator().next();
 				Chunk var3 = (Chunk)this.chunkMap.get(var2);
-				var3.onChunkUnload();
 				this.saveChunk(var3);
 				this.saveExtraChunkData(var3);
+				var3.onChunkUnload();
 				this.droppedChunksSet.remove(var2);
 				this.chunkMap.remove(var2);
 				this.chunkList.remove(var3);
+			}
+		}
+
+		for(int i1 = 0; i1 < 10; ++i1) {
+			if(this.chunkListIndex >= this.chunkList.size()) {
+				this.chunkListIndex = 0;
+				break;
+			}
+			Chunk chunk4 = (Chunk)this.chunkList.get(this.chunkListIndex++);
+			PlayerEntity player = this.worldObj.getClosestPlayer((double)(chunk4.xPosition << 4) + 8.0D,
+					(double)(chunk4.zPosition << 4) + 8.0D, 288.0D);
+			if(player == null) {
+				BlockPos chunkCoordinates3 = this.worldObj.getSpawnPoint();
+				int i4 = chunk4.xPosition * 16 + 8 - chunkCoordinates3.x;
+				int i5 = chunk4.zPosition * 16 + 8 - chunkCoordinates3.z;
+				short s6 = 128;
+				if(i4 < -s6 || i4 > s6 || i5 < -s6 || i5 > s6) {
+					this.droppedChunksSet.add(ChunkCoordIntPair.chunkXZ2Int(chunk4.xPosition, chunk4.zPosition));
+				}
 			}
 		}
 
--- /dev/null
+++ net/minecraft/game/world/biome/categories/hot_forest/Savanna.java
@@ -1,0 +1,6 @@
+package net.minecraft.game.world.biome.categories.hot_forest;
+
+import net.minecraft.game.world.biome.Biome;
+
+public class Savanna extends Biome {
+}
--- net/minecraft/client/GameSettings.java
+++ net/minecraft/client/GameSettings.java
@@ -6,6 +6,7 @@
 import java.io.FileWriter;
 import java.io.PrintWriter;
 import net.minecraft.game.stats.StatCollector;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.StringTranslate;
 import org.lwjgl.input.Keyboard;
 
@@ -33,16 +34,18 @@
 	public KeyBinding keyBindJump = new KeyBinding("key.jump", 57);
 	public KeyBinding keyBindInventory = new KeyBinding("key.inventory", 18);
 	public KeyBinding keyBindDrop = new KeyBinding("key.drop", 16);
+	public KeyBinding keyBindSprint = new KeyBinding("key.sprint", Keyboard.KEY_LCONTROL);
+	public KeyBinding keyBindNoClip = new KeyBinding("key.noClip", Keyboard.KEY_G);
 	public KeyBinding keyBindChat = new KeyBinding("key.chat", 20);
 	public KeyBinding keyBindToggleFog = new KeyBinding("key.fog", 33);
 	public KeyBinding keyBindSneak = new KeyBinding("key.sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindNoClip, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
 	protected Minecraft mc;
 	private File optionsFile;
 	public int difficulty = 2;
 	public boolean hideGUI = false;
-	public boolean thirdPersonView = false;
-	public boolean showDebugInfo = false;
+	public int thirdPersonView = 0;
+	public boolean showDebugInfo = SharedConstants.DEBUG;
 	public String lastServer = "";
 	public boolean field_22275_C = false;
 	public boolean smoothCamera = false;
--- net/minecraft/game/entity/weather/LightningBoltEntity.java
+++ net/minecraft/game/entity/weather/LightningBoltEntity.java
@@ -25,7 +25,7 @@
 			int var9 = MathHelper.floor(var4);
 			int var10 = MathHelper.floor(var6);
 			if(var1.getBlockId(var8, var9, var10) == 0 && Block.fire.canPlaceBlockAt(var1, var8, var9, var10)) {
-				var1.setBlockWithNotify(var8, var9, var10, Block.fire.blockID);
+				//var1.setBlockWithNotify(var8, var9, var10, Block.fire.blockID);
 			}
 
 			for(var8 = 0; var8 < 4; ++var8) {
@@ -33,7 +33,7 @@
 				var10 = MathHelper.floor(var4) + this.rand.nextInt(3) - 1;
 				int var11 = MathHelper.floor(var6) + this.rand.nextInt(3) - 1;
 				if(var1.getBlockId(var9, var10, var11) == 0 && Block.fire.canPlaceBlockAt(var1, var9, var10, var11)) {
-					var1.setBlockWithNotify(var9, var10, var11, Block.fire.blockID);
+					//var1.setBlockWithNotify(var9, var10, var11, Block.fire.blockID);
 				}
 			}
 		}
@@ -60,7 +60,7 @@
 					int var2 = MathHelper.floor(this.posY);
 					int var3 = MathHelper.floor(this.posZ);
 					if(this.worldObj.getBlockId(var1, var2, var3) == 0 && Block.fire.canPlaceBlockAt(this.worldObj, var1, var2, var3)) {
-						this.worldObj.setBlockWithNotify(var1, var2, var3, Block.fire.blockID);
+						//this.worldObj.setBlockWithNotify(var1, var2, var3, Block.fire.blockID);
 					}
 				}
 			}
--- net/minecraft/game/world/PortalGenerator.java
+++ net/minecraft/game/world/PortalGenerator.java
@@ -4,6 +4,7 @@
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 
 public class PortalGenerator {
 	private Random rand = new Random();
@@ -16,6 +17,7 @@
 	}
 
 	public boolean findExitLocation(World var1, Entity var2) {
+		int height = var1.dimension.isNether ? 128 : SharedConstants.CHUNK_HEIGHT;
 		short var3 = 128;
 		double var4 = -1.0D;
 		int var6 = 0;
@@ -31,7 +33,7 @@
 			for(int var14 = var10 - var3; var14 <= var10 + var3; ++var14) {
 				double var15 = (double)var14 + 0.5D - var2.posZ;
 
-				for(int var17 = 127; var17 >= 0; --var17) {
+				for(int var17 = (height - 1); var17 >= 0; --var17) {
 					if(var1.getBlockId(var11, var17, var14) == Block.portal.blockID) {
 						while(var1.getBlockId(var11, var17 - 1, var14) == Block.portal.blockID) {
 							--var17;
@@ -79,6 +81,7 @@
 	}
 
 	public boolean createExitLocation(World var1, Entity var2) {
+		int height = var1.dimension.isNether ? 128 : SharedConstants.CHUNK_HEIGHT;
 		byte var3 = 16;
 		double var4 = -1.0D;
 		int var6 = MathHelper.floor(var2.posX);
@@ -112,7 +115,7 @@
 				var18 = (double)var17 + 0.5D - var2.posZ;
 
 				label293:
-				for(var20 = 127; var20 >= 0; --var20) {
+				for(var20 = (height - 1); var20 >= 0; --var20) {
 					if(var1.isAirBlock(var14, var20, var17)) {
 						while(var20 > 0 && var1.isAirBlock(var14, var20 - 1, var17)) {
 							--var20;
@@ -162,7 +165,7 @@
 					var18 = (double)var17 + 0.5D - var2.posZ;
 
 					label231:
-					for(var20 = 127; var20 >= 0; --var20) {
+					for(var20 = (height - 1); var20 >= 0; --var20) {
 						if(var1.isAirBlock(var14, var20, var17)) {
 							while(var1.isAirBlock(var14, var20 - 1, var17)) {
 								--var20;
@@ -211,12 +214,12 @@
 
 		boolean var34;
 		if(var4 < 0.0D) {
-			if(var10 < 70) {
-				var10 = 70;
+			if(var10 < SharedConstants.CHUNK_HEIGHT-(58*2)) { // 70
+				var10 = SharedConstants.CHUNK_HEIGHT-(58*2);
 			}
 
-			if(var10 > 118) {
-				var10 = 118;
+			if(var10 > SharedConstants.CHUNK_HEIGHT-20) { // 118
+				var10 = SharedConstants.CHUNK_HEIGHT-20;
 			}
 
 			var16 = var10;
--- net/minecraft/game/entity/EntityRegistry.java
+++ net/minecraft/game/entity/EntityRegistry.java
@@ -9,6 +9,7 @@
 import net.minecraft.game.entity.animal.SheepEntity;
 import net.minecraft.game.entity.animal.SquidEntity;
 import net.minecraft.game.entity.animal.WolfEntity;
+import net.minecraft.game.entity.mechanical.WindMillEntity;
 import net.minecraft.game.entity.misc.FallingBlockEntity;
 import net.minecraft.game.entity.misc.ItemEntity;
 import net.minecraft.game.entity.misc.PaintingEntity;
@@ -129,5 +130,7 @@
 		addMapping(FallingBlockEntity.class, "FallingSand", 21);
 		addMapping(MinecartEntity.class, "Minecart", 40);
 		addMapping(BoatEntity.class, "Boat", 41);
+
+		addMapping(WindMillEntity.class, "WindMill", 128);
 	}
 }
--- net/minecraft/game/item/AxeItem.java
+++ net/minecraft/game/item/AxeItem.java
@@ -3,7 +3,7 @@
 import net.minecraft.game.world.block.Block;
 
 public class AxeItem extends ToolItem {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.log, Block.chest};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.log, Block.chest, Block.workbench, Block.woodenStairs, Block.woodenPressurePlate, Block.door, Block.pumpkin, Block.jackOLantern, Block.jukebox, Block.standingSign, Block.wallSign, Block.fence, Block.trapdoor};
 
 	protected AxeItem(int var1, ToolMaterial var2) {
 		super(var1, 3, var2, blocksEffectiveAgainst);
--- /dev/null
+++ net/minecraft/client/render/entity/mechanical/WindMillRenderer.java
@@ -1,0 +1,36 @@
+package net.minecraft.client.render.entity.mechanical;
+
+import net.minecraft.client.model.mechanical.WindMillModel;
+import net.minecraft.client.render.entity.Render;
+import net.minecraft.game.entity.Entity;
+import net.minecraft.game.entity.mechanical.WindMillEntity;
+import org.lwjgl.opengl.GL11;
+
+public class WindMillRenderer extends Render {
+    protected WindMillModel modelWindMill;
+
+    public WindMillRenderer() {
+        modelWindMill = new WindMillModel();
+    }
+
+    @Override
+    public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
+        WindMillEntity windmill = (WindMillEntity)var1;
+        GL11.glPushMatrix();
+        GL11.glTranslatef((float)var2, (float)var4, (float)var6);
+        loadTexture("/mob/windMill.png");
+        GL11.glScalef(1.0F, 1.0F, 1.0F);
+        if(windmill.align)
+        {
+            GL11.glRotatef(windmill.rotation, 1.0F, 0.0F, 0.0F);
+            GL11.glRotatef(0F, 0.0F, 0.0F, 1.0F);
+            GL11.glRotatef(90F, 0.0F, 1.0F, 0.0F);
+        } else
+        {
+            GL11.glRotatef(windmill.rotation, 0.0F, 0.0F, 1.0F);
+            GL11.glRotatef(0F, 1.0F, 0.0F, 0.0F);
+        }
+        modelWindMill.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 0.0625F);
+        GL11.glPopMatrix();
+    }
+}
--- net/minecraft/game/item/recipe/FurnaceRecipes.java
+++ net/minecraft/game/item/recipe/FurnaceRecipes.java
@@ -5,34 +5,45 @@
 import net.minecraft.game.item.Item;
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.Pair;
+
+import static net.minecraft.game.item.recipe.CraftingManager.stackHash;
 
 public class FurnaceRecipes {
 	private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-	private Map smeltingList = new HashMap();
+	private HashMap<Long, ItemStack> smeltingList = new HashMap<>();
 
 	public static final FurnaceRecipes smelting() {
 		return smeltingBase;
 	}
 
 	private FurnaceRecipes() {
-		this.addSmelting(Block.ironOre.blockID, new ItemStack(Item.ironIngot));
-		this.addSmelting(Block.goldOre.blockID, new ItemStack(Item.goldIngot));
-		this.addSmelting(Block.diamondOre.blockID, new ItemStack(Item.diamond));
-		this.addSmelting(Block.sand.blockID, new ItemStack(Block.glass));
-		this.addSmelting(Item.rawPorkchop.itemID, new ItemStack(Item.cookedPorkchop));
-		this.addSmelting(Item.rawFish.itemID, new ItemStack(Item.cookedFish));
-		this.addSmelting(Block.cobblestone.blockID, new ItemStack(Block.stone));
-		this.addSmelting(Item.clay.itemID, new ItemStack(Item.brick));
-		this.addSmelting(Block.cactus.blockID, new ItemStack(Item.dye, 1, 2));
-		this.addSmelting(Block.log.blockID, new ItemStack(Item.coal, 1, 1));
-	}
-
-	public void addSmelting(int var1, ItemStack var2) {
-		this.smeltingList.put(Integer.valueOf(var1), var2);
-	}
-
-	public ItemStack getSmeltingResult(int var1) {
-		return (ItemStack)this.smeltingList.get(Integer.valueOf(var1));
+		this.addSmelting(Block.ironOre.blockID, -1, new ItemStack(Item.ironIngot));
+		this.addSmelting(Block.goldOre.blockID, -1, new ItemStack(Item.goldIngot));
+		this.addSmelting(Block.diamondOre.blockID, -1, new ItemStack(Item.diamond));
+		this.addSmelting(Block.sand.blockID, -1, new ItemStack(Block.glass));
+		this.addSmelting(Item.rawPorkchop.itemID, -1, new ItemStack(Item.cookedPorkchop));
+		this.addSmelting(Item.rawBeef.itemID, -1, new ItemStack(Item.cookedBeef));
+		this.addSmelting(Item.rawChicken.itemID, -1, new ItemStack(Item.cookedChicken));
+		this.addSmelting(Item.rawFish.itemID, -1, new ItemStack(Item.cookedFish));
+		this.addSmelting(Block.cobblestone.blockID, 0, new ItemStack(Block.stone));
+		this.addSmelting(Item.clay.itemID, -1, new ItemStack(Item.brick));
+		this.addSmelting(Block.cactus.blockID, -1, new ItemStack(Item.dye, 1, 2));
+		this.addSmelting(Block.log.blockID, -1, new ItemStack(Item.coal, 1, 1));
+	}
+
+	public void addSmelting(int var1, int var2, ItemStack var3) {
+		this.smeltingList.put(stackHash(var1,var2), var3);
+	}
+
+	public ItemStack getSmeltingResult(int var1, int var2) {
+		ItemStack result;
+		if(this.smeltingList.containsKey(stackHash(var1,var2))) {
+			result = this.smeltingList.get(stackHash(var1,var2));
+		} else {
+			result = this.smeltingList.get(stackHash(var1,-1));
+		}
+		return result;
 	}
 
 	public Map getSmeltingList() {
--- net/minecraft/game/item/SnowballItem.java
+++ net/minecraft/game/item/SnowballItem.java
@@ -11,7 +11,8 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, PlayerEntity var3) {
-		--var1.count;
+		if(!var2.isCreativeWorld())
+			--var1.count;
 		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (random.nextFloat() * 0.4F + 0.8F));
 		if(!var2.remoteWorld) {
 			var2.entityJoinedWorld(new SnowballEntity(var2, var3));
--- net/minecraft/client/gui/TexturePacksScreen.java
+++ net/minecraft/client/gui/TexturePacksScreen.java
@@ -50,6 +50,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
+		drawDefaultBackground(var3);
 		this.guiTexturePackSlot.drawScreen(var1, var2, var3);
 		if(this.field_6454_o <= 0) {
 			this.mc.texturePackList.updateAvaliableTexturePacks();
--- net/minecraft/game/item/recipe/RecipesDyes.java
+++ net/minecraft/game/item/recipe/RecipesDyes.java
@@ -7,7 +7,7 @@
 
 public class RecipesDyes {
 	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < 16; ++var2) {
+		/*for(int var2 = 0; var2 < 16; ++var2) {
 			var1.addShapelessRecipe(new ItemStack(Block.wool, 1, WoolBlock.funkyMetaStuffB(var2)), new Object[]{new ItemStack(Item.dye, 1, var2), new ItemStack(Item.itemsList[Block.wool.blockID], 1, 0)});
 		}
 
@@ -25,6 +25,6 @@
 		var1.addShapelessRecipe(new ItemStack(Item.dye, 2, 5), new Object[]{new ItemStack(Item.dye, 1, 4), new ItemStack(Item.dye, 1, 1)});
 		var1.addShapelessRecipe(new ItemStack(Item.dye, 2, 13), new Object[]{new ItemStack(Item.dye, 1, 5), new ItemStack(Item.dye, 1, 9)});
 		var1.addShapelessRecipe(new ItemStack(Item.dye, 3, 13), new Object[]{new ItemStack(Item.dye, 1, 4), new ItemStack(Item.dye, 1, 1), new ItemStack(Item.dye, 1, 9)});
-		var1.addShapelessRecipe(new ItemStack(Item.dye, 4, 13), new Object[]{new ItemStack(Item.dye, 1, 4), new ItemStack(Item.dye, 1, 1), new ItemStack(Item.dye, 1, 1), new ItemStack(Item.dye, 1, 15)});
+		var1.addShapelessRecipe(new ItemStack(Item.dye, 4, 13), new Object[]{new ItemStack(Item.dye, 1, 4), new ItemStack(Item.dye, 1, 1), new ItemStack(Item.dye, 1, 1), new ItemStack(Item.dye, 1, 15)});*/
 	}
 }
--- net/minecraft/client/controller/ClientPlayerController.java
+++ net/minecraft/client/controller/ClientPlayerController.java
@@ -98,14 +98,18 @@
 					}
 
 					++this.field_9441_h;
-					if(this.curBlockDamageMP >= 1.0F) {
+					if(this.mc.theWorld.isCreativeWorld()) {
+						this.netClientHandler.addToSendQueue(new Packet14BlockDig(2, var1, var2, var3, var4));
+						this.sendBlockRemoved(var1, var2, var3, var4);
+						this.blockHitDelay = 3;
+					} else if(this.curBlockDamageMP >= 1.0F) {
 						this.isHittingBlock = false;
 						this.netClientHandler.addToSendQueue(new Packet14BlockDig(2, var1, var2, var3, var4));
 						this.sendBlockRemoved(var1, var2, var3, var4);
 						this.curBlockDamageMP = 0.0F;
 						this.prevBlockDamageMP = 0.0F;
 						this.field_9441_h = 0.0F;
-						this.blockHitDelay = 5;
+						this.blockHitDelay = this.mc.theWorld.isCreativeWorld() ? 3 : 5;
 					}
 				} else {
 					this.clickBlock(var1, var2, var3, var4);
@@ -138,7 +142,7 @@
 	public void updateController() {
 		this.syncCurrentPlayItem();
 		this.prevBlockDamageMP = this.curBlockDamageMP;
-		this.mc.sndManager.playRandomMusicIfReady();
+		this.mc.sndManager.playRandomMusicIfReady(this.mc.theWorld.isCreativeWorld());
 	}
 
 	private void syncCurrentPlayItem() {
--- net/minecraft/game/item/MinecartItem.java
+++ net/minecraft/game/item/MinecartItem.java
@@ -21,7 +21,8 @@
 				var3.entityJoinedWorld(new MinecartEntity(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType));
 			}
 
-			--var1.count;
+			if(!var3.isCreativeWorld())
+				--var1.count;
 			return true;
 		} else {
 			return false;
--- net/minecraft/game/world/save/SaveHandlerImpl.java
+++ net/minecraft/game/world/save/SaveHandlerImpl.java
@@ -17,9 +17,9 @@
 import net.minecraft.game.world.chunk.loader.ChunkLoaderImpl;
 import net.minecraft.game.world.dimension.Dimension;
 import net.minecraft.game.world.dimension.NetherDimension;
-import net.minecraft.server.PlayerDataHandler;
+import net.minecraft.server.MPPlayerDataHandler;
 
-public class SaveHandlerImpl implements SaveHandler, PlayerDataHandler {
+public class SaveHandlerImpl implements SaveHandler, MPPlayerDataHandler {
 	private static final Logger logger = Logger.getLogger("Minecraft");
 	private final File worldDir;
 	private final File playerDir;
@@ -213,7 +213,7 @@
 		return null;
 	}
 
-	public PlayerDataHandler getPlayerFileData() {
+	public MPPlayerDataHandler getPlayerFileData() {
 		return this;
 	}
 
--- /dev/null
+++ net/minecraft/game/world/biome/categories/cold_forest/Taiga.java
@@ -1,0 +1,24 @@
+package net.minecraft.game.world.biome.categories.cold_forest;
+
+import java.util.Random;
+import net.minecraft.game.entity.animal.WolfEntity;
+import net.minecraft.game.world.SpawnListEntry;
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.SkinnySpruceTreeFeature;
+import net.minecraft.game.world.terrain.feature.SpruceTreeFeature;
+
+public class Taiga extends Biome {
+	public Taiga() {
+		this.spawnableCreatureList.add(new SpawnListEntry(WolfEntity.class, 2));
+	}
+
+	public Feature getRandomTreeFeature(Random var1) {
+		return (Feature)(var1.nextInt(3) == 0 ? new SkinnySpruceTreeFeature() : new SpruceTreeFeature());
+	}
+
+	@Override
+	public int getFlowerCount() {
+		return 1;
+	}
+}
--- net/minecraft/client/gui/WorldSlotGui.java
+++ net/minecraft/client/gui/WorldSlotGui.java
@@ -38,8 +38,8 @@
 		return SelectWorldScreen.getSize(this.parentWorldGui).size() * 36;
 	}
 
-	protected void drawBackground() {
-		this.parentWorldGui.drawDefaultBackground();
+	protected void drawBackground(float delta) {
+		this.parentWorldGui.drawDefaultBackground(delta);
 	}
 
 	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
@@ -53,7 +53,7 @@
 		var8 = var8 + " (" + SelectWorldScreen.getDateFormatter(this.parentWorldGui).format(new Date(var6.func_22163_e()));
 		long var9 = var6.func_22159_c();
 		var8 = var8 + ", " + (float)(var9 / 1024L * 100L / 1024L) / 100.0F + " MB)";
-		String var11 = "";
+		String var11 = var6.isCreative() == null ? "Unknown Mode (May be corrupted!)" : (var6.isCreative() ? "Creative Mode" : "Survival Mode");
 		if(var6.func_22161_d()) {
 			var11 = SelectWorldScreen.func_22088_h(this.parentWorldGui) + " " + var11;
 		}
--- net/minecraft/client/gui/IngameMenuScreen.java
+++ net/minecraft/client/gui/IngameMenuScreen.java
@@ -62,7 +62,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		boolean var4 = !this.mc.theWorld.saveLevelButMoreComplicated(this.updateCounter2++);
 		if(var4 || this.updateCounter < 20) {
 			float var5 = ((float)(this.updateCounter % 10) + var3) / 10.0F;
--- net/minecraft/client/gui/ErrorScreen.java
+++ net/minecraft/client/gui/ErrorScreen.java
@@ -19,7 +19,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, "Out of memory!", this.width / 2, this.height / 4 - 60 + 20, 16777215);
 		this.drawString(this.fontRenderer, "Minecraft has run out of memory.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
 		this.drawString(this.fontRenderer, "This could be caused by a bug in the game or by the", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
--- net/minecraft/game/entity/monster/SlimeEntity.java
+++ net/minecraft/game/entity/monster/SlimeEntity.java
@@ -1,6 +1,7 @@
 package net.minecraft.game.entity.monster;
 
 import com.mojang.nbt.CompoundTag;
+import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.LivingEntity;
 import net.minecraft.game.entity.player.PlayerEntity;
 import net.minecraft.game.item.Item;
@@ -146,5 +147,18 @@
 
 	protected float getSoundVolume() {
 		return 0.6F;
+	}
+
+	public void onDeath(Entity var1) {
+		if(var1 != null) {
+			int size = this.getSlimeSize();
+			if(size >= 4) {
+				var1.addEntityToPlayerScore(this,10);
+			} else if(size >= 2) {
+				var1.addEntityToPlayerScore(this,5);
+			} else {
+				var1.addEntityToPlayerScore(this,1);
+			}
+		}
 	}
 }
--- net/minecraft/game/item/recipe/RecipesArmor.java
+++ net/minecraft/game/item/recipe/RecipesArmor.java
@@ -9,14 +9,14 @@
 	private Object[][] recipeItems = new Object[][]{{Item.leather, Block.fire, Item.ironIngot, Item.diamond, Item.goldIngot}, {Item.leatherCap, Item.chainmailHelmet, Item.ironHelmet, Item.diamondHelmet, Item.goldHelmet}, {Item.leatherTunic, Item.chainmailChestplate, Item.ironChestplate, Item.diamondChestplate, Item.goldChestplate}, {Item.leatherPants, Item.chainmailLeggings, Item.ironLeggings, Item.diamondLeggings, Item.goldLeggings}, {Item.leatherBoots, Item.chainmailBoots, Item.ironBoots, Item.diamondBoots, Item.goldBoots}};
 
 	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
+		/*for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
 				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
 				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('X'), var3});
 			}
-		}
+		}*/
 
 	}
 }
--- net/minecraft/client/render/texture/TextureWatchFX.java
+++ net/minecraft/client/render/texture/TextureWatchFX.java
@@ -20,8 +20,8 @@
 
 		try {
 			BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
-			int var3 = this.iconIndex % 16 * 16;
-			int var4 = this.iconIndex / 16 * 16;
+			int var3 = this.iconIndex % 32 * 16;
+			int var4 = this.iconIndex / 32 * 16;
 			var2.getRGB(var3, var4, 16, 16, this.watchIconImageData, 0, 16);
 			var2 = ImageIO.read(Minecraft.class.getResource("/misc/dial.png"));
 			var2.getRGB(0, 0, 16, 16, this.dialImageData, 0, 16);
--- net/minecraft/client/gui/ConnectingScreen.java
+++ net/minecraft/client/gui/ConnectingScreen.java
@@ -45,7 +45,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		StringTranslate var4 = StringTranslate.getInstance();
 		if(this.clientHandler == null) {
 			this.drawCenteredString(this.fontRenderer, var4.translateKey("connect.connecting"), this.width / 2, this.height / 2 - 50, 16777215);
--- /dev/null
+++ net/minecraft/game/world/block/CobblestoneBlock.java
@@ -1,0 +1,23 @@
+package net.minecraft.game.world.block;
+
+import net.minecraft.game.world.material.Material;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
+public class CobblestoneBlock extends Block {
+    public CobblestoneBlock(int var1, Material var2) {
+        super(var1, var2);
+    }
+
+    public int getPlacedBlockMetadata(int var1) {
+        return var1;
+    }
+
+    protected int damageDropped(int var1) {
+        return var1 & 3;
+    }
+
+    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+        return getAtlasTexture(1,2 + (var2 & 3));
+    }
+}
--- net/minecraft/client/gui/ChatScreen.java
+++ net/minecraft/client/gui/ChatScreen.java
@@ -27,8 +27,16 @@
 			String var3 = this.message.trim();
 			if(var3.length() > 0) {
 				String var4 = this.message.trim();
-				if(!this.mc.lineIsCommand(var4)) {
+				if(!(this.mc.lineIsCommand(var4) && !this.mc.theWorld.remoteWorld)) {
 					this.mc.thePlayer.sendChatMessage(var4);
+				} else {
+					if(var4.equals("/toggledownfall")) {
+						this.mc.theWorld.getWorldInfo().setRainTime(1);
+						this.mc.thePlayer.addChatMessage("Toggled Downfall");
+					} else if(var4.equals("/night")) {
+						this.mc.theWorld.setWorldTime(13000);
+						this.mc.thePlayer.addChatMessage("It is now night UwU");
+					}
 				}
 			}
 
--- net/minecraft/game/world/block/tileentity/ChestTileEntity.java
+++ net/minecraft/game/world/block/tileentity/ChestTileEntity.java
@@ -84,7 +84,7 @@
 	}
 
 	public int getStackLimit() {
-		return 64;
+		return 100;
 	}
 
 	public boolean canInteractWith(PlayerEntity var1) {
--- net/minecraft/network/packet/Packet103SetSlot.java
+++ net/minecraft/network/packet/Packet103SetSlot.java
@@ -6,6 +6,8 @@
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.network.NetHandler;
 
+import javax.swing.*;
+
 public class Packet103SetSlot extends Packet {
 	public int windowId;
 	public int itemSlot;
--- net/minecraft/client/render/TextureRegistry.java
+++ net/minecraft/client/render/TextureRegistry.java
@@ -377,7 +377,7 @@
 
 			for(var3 = 0; var3 < var2.tileSize; ++var3) {
 				for(var4 = 0; var4 < var2.tileSize; ++var4) {
-					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, var2.iconIndex % 16 * 16 + var3 * 16, var2.iconIndex / 16 * 16 + var4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, var2.iconIndex % 32 * 16 + var3 * 16, var2.iconIndex / 32 * 16 + var4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
 					if(useMipmaps) {
 						for(var5 = 1; var5 <= 4; ++var5) {
 							var6 = 16 >> var5 - 1;
--- net/minecraft/client/render/RenderBlocks.java
+++ net/minecraft/client/render/RenderBlocks.java
@@ -4,33 +4,28 @@
 import net.minecraft.game.physics.Vec3D;
 import net.minecraft.game.world.BlockAccess;
 import net.minecraft.game.world.World;
-import net.minecraft.game.world.block.BedBlock;
-import net.minecraft.game.world.block.Block;
-import net.minecraft.game.world.block.DoorBlock;
-import net.minecraft.game.world.block.LiquidBlock;
-import net.minecraft.game.world.block.ModelBed;
-import net.minecraft.game.world.block.PistonBaseBlock;
-import net.minecraft.game.world.block.PistonExtensionBlock;
-import net.minecraft.game.world.block.RailBlock;
-import net.minecraft.game.world.block.RedstoneRepeaterBlock;
-import net.minecraft.game.world.block.RedstoneWireBlock;
+import net.minecraft.game.world.block.*;
 import net.minecraft.game.world.material.Material;
+import net.minecraft.util.FastNoiseLite;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.GL11;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class RenderBlocks {
 	private BlockAccess blockAccess;
 	private int overrideBlockTexture = -1;
-	private boolean flipTexture = false;
+	public boolean flipTexture = false;
 	private boolean renderAllFaces = false;
 	public static boolean fancyGrass = true;
 	public boolean field_31088_b = true;
-	private int field_31087_g = 0;
-	private int field_31086_h = 0;
-	private int field_31085_i = 0;
-	private int field_31084_j = 0;
-	private int field_31083_k = 0;
-	private int field_31082_l = 0;
+	public int eastUVRotate = 0;
+	public int westUVRotate = 0;
+	public int southUVRotate = 0;
+	public int northUVRotate = 0;
+	public int topUVRotate = 0;
+	public int bottomUVRotate = 0;
 	private boolean enableAO;
 	private float lightValueOwn;
 	private float aoLightValueXNeg;
@@ -85,11 +80,19 @@
 	private boolean field_22357_ad;
 	private boolean field_22355_ae;
 
+	public FastNoiseLite grassShowNoise = new FastNoiseLite();
+	public FastNoiseLite grassHeightNoise = new FastNoiseLite();
+
 	public RenderBlocks(BlockAccess var1) {
+		super();
 		this.blockAccess = var1;
 	}
 
 	public RenderBlocks() {
+		grassShowNoise = new FastNoiseLite("i have such a cute snep as a bf >w<".hashCode());
+		grassHeightNoise = new FastNoiseLite("he's so nice and adorbs ~w~".hashCode());
+		grassHeightNoise.SetNoiseType(FastNoiseLite.NoiseType.Value);
+		grassHeightNoise.SetFrequency(1.0F);
 	}
 
 	public void renderBlockUsingTexture(Block var1, int var2, int var3, int var4, int var5) {
@@ -107,6 +110,9 @@
 	public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
 		int var5 = var1.getRenderType();
 		var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
+		if(var5 == SharedConstants.CUSTOM_RENDER_TYPE) {
+			return var1.renderCustom(this,this.blockAccess,var2,var3,var4);
+		}
 		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack((RailBlock)var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : (var5 == 14 ? this.renderBlockBed(var1, var2, var3, var4) : (var5 == 15 ? this.renderBlockRepeater(var1, var2, var3, var4) : (var5 == 16 ? this.func_31074_b(var1, var2, var3, var4, false) : (var5 == 17 ? this.func_31080_c(var1, var2, var3, var4, true) : false)))))))))))))))));
 	}
 
@@ -122,12 +128,12 @@
 		float var25 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var9 * var25, var9 * var25, var9 * var25);
 		int var26 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0);
-		int var27 = (var26 & 15) << 4;
-		int var28 = var26 & 240;
-		double var29 = (double)((float)var27 / 256.0F);
-		double var31 = ((double)(var27 + 16) - 0.01D) / 256.0D;
-		double var33 = (double)((float)var28 / 256.0F);
-		double var35 = ((double)(var28 + 16) - 0.01D) / 256.0D;
+		int var27 = (var26 & SharedConstants.ATLAS_MASK1) << 4;
+		int var28 = (var26 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var29 = (double)((float)var27 / SharedConstants.ATLAS_SIZE);
+		double var31 = ((double)(var27 + 16) - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var33 = (double)((float)var28 / SharedConstants.ATLAS_SIZE);
+		double var35 = ((double)(var28 + 16) - 0.01D) / SharedConstants.ATLAS_SIZE;
 		double var37 = (double)var2 + var1.minX;
 		double var39 = (double)var2 + var1.maxX;
 		double var41 = (double)var3 + var1.minY + 0.1875D;
@@ -140,12 +146,12 @@
 		float var64 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
 		var5.setColorOpaque_F(var10 * var64, var10 * var64, var10 * var64);
 		var27 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1);
-		var28 = (var27 & 15) << 4;
-		int var67 = var27 & 240;
-		double var30 = (double)((float)var28 / 256.0F);
-		double var32 = ((double)(var28 + 16) - 0.01D) / 256.0D;
-		double var34 = (double)((float)var67 / 256.0F);
-		double var36 = ((double)(var67 + 16) - 0.01D) / 256.0D;
+		var28 = (var27 & SharedConstants.ATLAS_MASK1) << 4;
+		int var67 = (var27 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var30 = (double)((float)var28 / SharedConstants.ATLAS_SIZE);
+		double var32 = ((double)(var28 + 16) - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var34 = (double)((float)var67 / SharedConstants.ATLAS_SIZE);
+		double var36 = ((double)(var67 + 16) - 0.01D) / SharedConstants.ATLAS_SIZE;
 		double var38 = var30;
 		double var40 = var32;
 		double var42 = var34;
@@ -317,12 +323,12 @@
 		this.renderTorchAtAngle(var1, (double)var2 + var12, (double)var3 + var10, (double)var4 + var14, 0.0D, 0.0D);
 		this.renderTorchAtAngle(var1, (double)var2 + var16, (double)var3 + var10, (double)var4 + var18, 0.0D, 0.0D);
 		int var20 = var1.getBlockTextureFromSide(1);
-		int var21 = (var20 & 15) << 4;
-		int var22 = var20 & 240;
-		double var23 = (double)((float)var21 / 256.0F);
-		double var25 = (double)(((float)var21 + 15.99F) / 256.0F);
-		double var27 = (double)((float)var22 / 256.0F);
-		double var29 = (double)(((float)var22 + 15.99F) / 256.0F);
+		int var21 = (var20 & SharedConstants.ATLAS_MASK1) << 4;
+		int var22 = (var20 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var23 = (double)((float)var21 / SharedConstants.ATLAS_SIZE);
+		double var25 = (double)(((float)var21 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var27 = (double)((float)var22 / SharedConstants.ATLAS_SIZE);
+		double var29 = (double)(((float)var22 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		float var31 = 2.0F / 16.0F;
 		float var32 = (float)(var2 + 1);
 		float var33 = (float)(var2 + 1);
@@ -382,108 +388,108 @@
 		if(var7) {
 			switch(var8) {
 			case 0:
-				this.field_31087_g = 3;
-				this.field_31086_h = 3;
-				this.field_31085_i = 3;
-				this.field_31084_j = 3;
+				this.eastUVRotate = 3;
+				this.westUVRotate = 3;
+				this.southUVRotate = 3;
+				this.northUVRotate = 3;
 				var1.setBlockBounds(0.0F, 0.25F, 0.0F, 1.0F, 1.0F, 1.0F);
 				break;
 			case 1:
 				var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 12.0F / 16.0F, 1.0F);
 				break;
 			case 2:
-				this.field_31085_i = 1;
-				this.field_31084_j = 2;
+				this.southUVRotate = 1;
+				this.northUVRotate = 2;
 				var1.setBlockBounds(0.0F, 0.0F, 0.25F, 1.0F, 1.0F, 1.0F);
 				break;
 			case 3:
-				this.field_31085_i = 2;
-				this.field_31084_j = 1;
-				this.field_31083_k = 3;
-				this.field_31082_l = 3;
+				this.southUVRotate = 2;
+				this.northUVRotate = 1;
+				this.topUVRotate = 3;
+				this.bottomUVRotate = 3;
 				var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 12.0F / 16.0F);
 				break;
 			case 4:
-				this.field_31087_g = 1;
-				this.field_31086_h = 2;
-				this.field_31083_k = 2;
-				this.field_31082_l = 1;
+				this.eastUVRotate = 1;
+				this.westUVRotate = 2;
+				this.topUVRotate = 2;
+				this.bottomUVRotate = 1;
 				var1.setBlockBounds(0.25F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 				break;
 			case 5:
-				this.field_31087_g = 2;
-				this.field_31086_h = 1;
-				this.field_31083_k = 1;
-				this.field_31082_l = 2;
+				this.eastUVRotate = 2;
+				this.westUVRotate = 1;
+				this.topUVRotate = 1;
+				this.bottomUVRotate = 2;
 				var1.setBlockBounds(0.0F, 0.0F, 0.0F, 12.0F / 16.0F, 1.0F, 1.0F);
 			}
 
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.field_31087_g = 0;
-			this.field_31086_h = 0;
-			this.field_31085_i = 0;
-			this.field_31084_j = 0;
-			this.field_31083_k = 0;
-			this.field_31082_l = 0;
+			this.eastUVRotate = 0;
+			this.westUVRotate = 0;
+			this.southUVRotate = 0;
+			this.northUVRotate = 0;
+			this.topUVRotate = 0;
+			this.bottomUVRotate = 0;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		} else {
 			switch(var8) {
 			case 0:
-				this.field_31087_g = 3;
-				this.field_31086_h = 3;
-				this.field_31085_i = 3;
-				this.field_31084_j = 3;
+				this.eastUVRotate = 3;
+				this.westUVRotate = 3;
+				this.southUVRotate = 3;
+				this.northUVRotate = 3;
 			case 1:
 			default:
 				break;
 			case 2:
-				this.field_31085_i = 1;
-				this.field_31084_j = 2;
+				this.southUVRotate = 1;
+				this.northUVRotate = 2;
 				break;
 			case 3:
-				this.field_31085_i = 2;
-				this.field_31084_j = 1;
-				this.field_31083_k = 3;
-				this.field_31082_l = 3;
+				this.southUVRotate = 2;
+				this.northUVRotate = 1;
+				this.topUVRotate = 3;
+				this.bottomUVRotate = 3;
 				break;
 			case 4:
-				this.field_31087_g = 1;
-				this.field_31086_h = 2;
-				this.field_31083_k = 2;
-				this.field_31082_l = 1;
+				this.eastUVRotate = 1;
+				this.westUVRotate = 2;
+				this.topUVRotate = 2;
+				this.bottomUVRotate = 1;
 				break;
 			case 5:
-				this.field_31087_g = 2;
-				this.field_31086_h = 1;
-				this.field_31083_k = 1;
-				this.field_31082_l = 2;
+				this.eastUVRotate = 2;
+				this.westUVRotate = 1;
+				this.topUVRotate = 1;
+				this.bottomUVRotate = 2;
 			}
 
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.field_31087_g = 0;
-			this.field_31086_h = 0;
-			this.field_31085_i = 0;
-			this.field_31084_j = 0;
-			this.field_31083_k = 0;
-			this.field_31082_l = 0;
+			this.eastUVRotate = 0;
+			this.westUVRotate = 0;
+			this.southUVRotate = 0;
+			this.northUVRotate = 0;
+			this.topUVRotate = 0;
+			this.bottomUVRotate = 0;
 		}
 
 		return true;
 	}
 
 	private void func_31076_a(double var1, double var3, double var5, double var7, double var9, double var11, float var13, double var14) {
-		int var16 = 108;
+		int var16 = getAtlasTexture(29,10);
 		if(this.overrideBlockTexture >= 0) {
 			var16 = this.overrideBlockTexture;
 		}
 
-		int var17 = (var16 & 15) << 4;
-		int var18 = var16 & 240;
+		int var17 = (var16 & SharedConstants.ATLAS_MASK1) << 4;
+		int var18 = (var16 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
 		Tessellator var19 = Tessellator.instance;
-		double var20 = (double)((float)(var17 + 0) / 256.0F);
-		double var22 = (double)((float)(var18 + 0) / 256.0F);
-		double var24 = ((double)var17 + var14 - 0.01D) / 256.0D;
-		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 256.0D;
+		double var20 = (double)((float)(var17 + 0) / SharedConstants.ATLAS_SIZE);
+		double var22 = (double)((float)(var18 + 0) / SharedConstants.ATLAS_SIZE);
+		double var24 = ((double)var17 + var14 - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / SharedConstants.ATLAS_SIZE;
 		var19.setColorOpaque_F(var13, var13, var13);
 		var19.addVertexWithUV(var1, var7, var9, var24, var22);
 		var19.addVertexWithUV(var1, var5, var9, var20, var22);
@@ -492,18 +498,18 @@
 	}
 
 	private void func_31081_b(double var1, double var3, double var5, double var7, double var9, double var11, float var13, double var14) {
-		int var16 = 108;
+		int var16 = getAtlasTexture(29,10);
 		if(this.overrideBlockTexture >= 0) {
 			var16 = this.overrideBlockTexture;
 		}
 
-		int var17 = (var16 & 15) << 4;
-		int var18 = var16 & 240;
+		int var17 = (var16 & SharedConstants.ATLAS_MASK1) << 4;
+		int var18 = (var16 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
 		Tessellator var19 = Tessellator.instance;
-		double var20 = (double)((float)(var17 + 0) / 256.0F);
-		double var22 = (double)((float)(var18 + 0) / 256.0F);
-		double var24 = ((double)var17 + var14 - 0.01D) / 256.0D;
-		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 256.0D;
+		double var20 = (double)((float)(var17 + 0) / SharedConstants.ATLAS_SIZE);
+		double var22 = (double)((float)(var18 + 0) / SharedConstants.ATLAS_SIZE);
+		double var24 = ((double)var17 + var14 - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / SharedConstants.ATLAS_SIZE;
 		var19.setColorOpaque_F(var13, var13, var13);
 		var19.addVertexWithUV(var1, var5, var11, var24, var22);
 		var19.addVertexWithUV(var1, var5, var9, var20, var22);
@@ -512,18 +518,18 @@
 	}
 
 	private void func_31077_c(double var1, double var3, double var5, double var7, double var9, double var11, float var13, double var14) {
-		int var16 = 108;
+		int var16 = getAtlasTexture(29,10);
 		if(this.overrideBlockTexture >= 0) {
 			var16 = this.overrideBlockTexture;
 		}
 
-		int var17 = (var16 & 15) << 4;
-		int var18 = var16 & 240;
+		int var17 = (var16 & SharedConstants.ATLAS_MASK1) << 4;
+		int var18 = (var16 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
 		Tessellator var19 = Tessellator.instance;
-		double var20 = (double)((float)(var17 + 0) / 256.0F);
-		double var22 = (double)((float)(var18 + 0) / 256.0F);
-		double var24 = ((double)var17 + var14 - 0.01D) / 256.0D;
-		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / 256.0D;
+		double var20 = (double)((float)(var17 + 0) / SharedConstants.ATLAS_SIZE);
+		double var22 = (double)((float)(var18 + 0) / SharedConstants.ATLAS_SIZE);
+		double var24 = ((double)var17 + var14 - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var26 = ((double)((float)var18 + 4.0F) - 0.01D) / SharedConstants.ATLAS_SIZE;
 		var19.setColorOpaque_F(var13, var13, var13);
 		var19.addVertexWithUV(var3, var5, var9, var24, var22);
 		var19.addVertexWithUV(var1, var5, var9, var20, var22);
@@ -545,10 +551,10 @@
 		double var13 = var5 ? 16.0D : 8.0D;
 		switch(var7) {
 		case 0:
-			this.field_31087_g = 3;
-			this.field_31086_h = 3;
-			this.field_31085_i = 3;
-			this.field_31084_j = 3;
+			this.eastUVRotate = 3;
+			this.westUVRotate = 3;
+			this.southUVRotate = 3;
+			this.northUVRotate = 3;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
 			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var12), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.8F, var13);
@@ -565,8 +571,8 @@
 			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var12), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.6F, var13);
 			break;
 		case 2:
-			this.field_31085_i = 1;
-			this.field_31084_j = 2;
+			this.southUVRotate = 1;
+			this.northUVRotate = 2;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.25F);
 			this.renderStandardBlock(var1, var2, var3, var4);
 			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var12), var11 * 0.6F, var13);
@@ -575,10 +581,10 @@
 			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var12), var11, var13);
 			break;
 		case 3:
-			this.field_31085_i = 2;
-			this.field_31084_j = 1;
-			this.field_31083_k = 3;
-			this.field_31082_l = 3;
+			this.southUVRotate = 2;
+			this.northUVRotate = 1;
+			this.topUVRotate = 3;
+			this.bottomUVRotate = 3;
 			var1.setBlockBounds(0.0F, 0.0F, 12.0F / 16.0F, 1.0F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
 			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var12), (double)((float)var4 - 0.25F + 1.0F), var11 * 0.6F, var13);
@@ -587,10 +593,10 @@
 			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var12), (double)((float)var4 - 0.25F + 1.0F), var11, var13);
 			break;
 		case 4:
-			this.field_31087_g = 1;
-			this.field_31086_h = 2;
-			this.field_31083_k = 2;
-			this.field_31082_l = 1;
+			this.eastUVRotate = 1;
+			this.westUVRotate = 2;
+			this.topUVRotate = 2;
+			this.bottomUVRotate = 1;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.25F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
 			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var12), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.5F, var13);
@@ -599,10 +605,10 @@
 			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var12), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.6F, var13);
 			break;
 		case 5:
-			this.field_31087_g = 2;
-			this.field_31086_h = 1;
-			this.field_31083_k = 1;
-			this.field_31082_l = 2;
+			this.eastUVRotate = 2;
+			this.westUVRotate = 1;
+			this.topUVRotate = 1;
+			this.bottomUVRotate = 2;
 			var1.setBlockBounds(12.0F / 16.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
 			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var12), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.5F, var13);
@@ -611,12 +617,12 @@
 			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var12), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.6F, var13);
 		}
 
-		this.field_31087_g = 0;
-		this.field_31086_h = 0;
-		this.field_31085_i = 0;
-		this.field_31084_j = 0;
-		this.field_31083_k = 0;
-		this.field_31082_l = 0;
+		this.eastUVRotate = 0;
+		this.westUVRotate = 0;
+		this.southUVRotate = 0;
+		this.northUVRotate = 0;
+		this.topUVRotate = 0;
+		this.bottomUVRotate = 0;
 		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		return true;
 	}
@@ -628,7 +634,7 @@
 		Tessellator var8 = Tessellator.instance;
 		boolean var9 = this.overrideBlockTexture >= 0;
 		if(!var9) {
-			this.overrideBlockTexture = Block.cobblestone.textureIndex;
+			this.overrideBlockTexture = getAtlasTexture(1,2);
 		}
 
 		float var10 = 0.25F;
@@ -664,12 +670,12 @@
 			var14 = this.overrideBlockTexture;
 		}
 
-		int var15 = (var14 & 15) << 4;
-		int var16 = var14 & 240;
-		float var17 = (float)var15 / 256.0F;
-		float var18 = ((float)var15 + 15.99F) / 256.0F;
-		float var19 = (float)var16 / 256.0F;
-		float var20 = ((float)var16 + 15.99F) / 256.0F;
+		int var15 = (var14 & SharedConstants.ATLAS_MASK1) << 4;
+		int var16 = (var14 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		float var17 = (float)var15 / SharedConstants.ATLAS_SIZE;
+		float var18 = ((float)var15 + 15.99F) / SharedConstants.ATLAS_SIZE;
+		float var19 = (float)var16 / SharedConstants.ATLAS_SIZE;
+		float var20 = ((float)var16 + 15.99F) / SharedConstants.ATLAS_SIZE;
 		Vec3D[] var21 = new Vec3D[8];
 		float var22 = 1.0F / 16.0F;
 		float var23 = 1.0F / 16.0F;
@@ -732,15 +738,15 @@
 
 		for(int var29 = 0; var29 < 6; ++var29) {
 			if(var29 == 0) {
-				var17 = (float)(var15 + 7) / 256.0F;
-				var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-				var19 = (float)(var16 + 6) / 256.0F;
-				var20 = ((float)(var16 + 8) - 0.01F) / 256.0F;
+				var17 = (float)(var15 + 7) / SharedConstants.ATLAS_SIZE;
+				var18 = ((float)(var15 + 9) - 0.01F) / SharedConstants.ATLAS_SIZE;
+				var19 = (float)(var16 + 6) / SharedConstants.ATLAS_SIZE;
+				var20 = ((float)(var16 + 8) - 0.01F) / SharedConstants.ATLAS_SIZE;
 			} else if(var29 == 2) {
-				var17 = (float)(var15 + 7) / 256.0F;
-				var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-				var19 = (float)(var16 + 6) / 256.0F;
-				var20 = ((float)(var16 + 16) - 0.01F) / 256.0F;
+				var17 = (float)(var15 + 7) / SharedConstants.ATLAS_SIZE;
+				var18 = ((float)(var15 + 9) - 0.01F) / SharedConstants.ATLAS_SIZE;
+				var19 = (float)(var16 + 6) / SharedConstants.ATLAS_SIZE;
+				var20 = ((float)(var16 + 16) - 0.01F) / SharedConstants.ATLAS_SIZE;
 			}
 
 			if(var29 == 0) {
@@ -793,12 +799,12 @@
 
 		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var7, var7, var7);
-		int var8 = (var6 & 15) << 4;
-		int var9 = var6 & 240;
-		double var10 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var9 / 256.0F);
-		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
+		int var8 = (var6 & SharedConstants.ATLAS_MASK1) << 4;
+		int var9 = (var6 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+		double var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var14 = (double)((float)var9 / SharedConstants.ATLAS_SIZE);
+		double var16 = (double)(((float)var9 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		float var18 = 1.4F;
 		double var21;
 		double var23;
@@ -811,10 +817,10 @@
 			float var37 = 0.2F;
 			float var20 = 1.0F / 16.0F;
 			if((var2 + var3 + var4 & 1) == 1) {
-				var10 = (double)((float)var8 / 256.0F);
-				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-				var14 = (double)((float)(var9 + 16) / 256.0F);
-				var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
+				var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+				var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+				var14 = (double)((float)(var9 + 16) / SharedConstants.ATLAS_SIZE);
+				var16 = (double)(((float)var9 + 15.99F + 16.0F) / SharedConstants.ATLAS_SIZE);
 			}
 
 			if((var2 / 2 + var3 / 2 + var4 / 2 & 1) == 1) {
@@ -876,10 +882,10 @@
 				var31 = (double)var2 + 0.5D + 0.5D;
 				var33 = (double)var4 + 0.5D - 0.5D;
 				double var35 = (double)var4 + 0.5D + 0.5D;
-				var10 = (double)((float)var8 / 256.0F);
-				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-				var14 = (double)((float)var9 / 256.0F);
-				var16 = (double)(((float)var9 + 15.99F) / 256.0F);
+				var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+				var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+				var14 = (double)((float)var9 / SharedConstants.ATLAS_SIZE);
+				var16 = (double)(((float)var9 + 15.99F) / SharedConstants.ATLAS_SIZE);
 				++var3;
 				var18 = -0.2F;
 				if((var2 + var3 + var4 & 1) == 0) {
@@ -887,10 +893,10 @@
 					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
 					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
 					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-					var10 = (double)((float)var8 / 256.0F);
-					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-					var14 = (double)((float)(var9 + 16) / 256.0F);
-					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
+					var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+					var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+					var14 = (double)((float)(var9 + 16) / SharedConstants.ATLAS_SIZE);
+					var16 = (double)(((float)var9 + 15.99F + 16.0F) / SharedConstants.ATLAS_SIZE);
 					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
 					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
 					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
@@ -900,10 +906,10 @@
 					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var27, var12, var16);
 					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var27, var10, var16);
 					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var35, var10, var14);
-					var10 = (double)((float)var8 / 256.0F);
-					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-					var14 = (double)((float)(var9 + 16) / 256.0F);
-					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
+					var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+					var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+					var14 = (double)((float)(var9 + 16) / SharedConstants.ATLAS_SIZE);
+					var16 = (double)(((float)var9 + 15.99F + 16.0F) / SharedConstants.ATLAS_SIZE);
 					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
 					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
 					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
@@ -927,10 +933,10 @@
 			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
 			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
 			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-			var10 = (double)((float)var8 / 256.0F);
-			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-			var14 = (double)((float)(var9 + 16) / 256.0F);
-			var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
+			var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+			var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)((float)(var9 + 16) / SharedConstants.ATLAS_SIZE);
+			var16 = (double)(((float)var9 + 15.99F + 16.0F) / SharedConstants.ATLAS_SIZE);
 			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
 			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
 			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
@@ -955,10 +961,10 @@
 			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
 			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
 			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-			var10 = (double)((float)var8 / 256.0F);
-			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-			var14 = (double)((float)var9 / 256.0F);
-			var16 = (double)(((float)var9 + 15.99F) / 256.0F);
+			var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+			var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)((float)var9 / SharedConstants.ATLAS_SIZE);
+			var16 = (double)(((float)var9 + 15.99F) / SharedConstants.ATLAS_SIZE);
 			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
 			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
 			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
@@ -998,12 +1004,12 @@
 		}
 
 		var5.setColorOpaque_F(var8 * var10, var8 * var11, var8 * var12);
-		int var13 = (var7 & 15) << 4;
-		int var14 = var7 & 240;
-		double var15 = (double)((float)var13 / 256.0F);
-		double var17 = (double)(((float)var13 + 15.99F) / 256.0F);
-		double var19 = (double)((float)var14 / 256.0F);
-		double var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+		int var13 = (var7 & SharedConstants.ATLAS_MASK1) << 4;
+		int var14 = (var7 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var15 = (double)((float)var13 / SharedConstants.ATLAS_SIZE);
+		double var17 = (double)(((float)var13 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var19 = (double)((float)var14 / SharedConstants.ATLAS_SIZE);
+		double var21 = (double)(((float)var14 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		boolean var26 = RedstoneWireBlock.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4, 1) || !this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && RedstoneWireBlock.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4, -1);
 		boolean var27 = RedstoneWireBlock.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4, 3) || !this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && RedstoneWireBlock.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4, -1);
 		boolean var28 = RedstoneWireBlock.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1, 2) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && RedstoneWireBlock.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1, -1);
@@ -1040,10 +1046,10 @@
 		}
 
 		if(var35 != 0) {
-			var15 = (double)((float)(var13 + 16) / 256.0F);
-			var17 = (double)(((float)(var13 + 16) + 15.99F) / 256.0F);
-			var19 = (double)((float)var14 / 256.0F);
-			var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+			var15 = (double)((float)(var13 + 16) / SharedConstants.ATLAS_SIZE);
+			var17 = (double)(((float)(var13 + 16) + 15.99F) / SharedConstants.ATLAS_SIZE);
+			var19 = (double)((float)var14 / SharedConstants.ATLAS_SIZE);
+			var21 = (double)(((float)var14 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var35 == 0) {
@@ -1053,7 +1059,7 @@
 				}
 
 				if(!var26) {
-					var15 += 1.25D / 64.0D;
+					var15 += 1.25D / 128.0D;
 				}
 
 				if(!var27) {
@@ -1061,7 +1067,7 @@
 				}
 
 				if(!var27) {
-					var17 -= 1.25D / 64.0D;
+					var17 -= 1.25D / 128.0D;
 				}
 
 				if(!var28) {
@@ -1069,7 +1075,7 @@
 				}
 
 				if(!var28) {
-					var19 += 1.25D / 64.0D;
+					var19 += 1.25D / 128.0D;
 				}
 
 				if(!var29) {
@@ -1077,7 +1083,7 @@
 				}
 
 				if(!var29) {
-					var21 -= 1.25D / 64.0D;
+					var21 -= 1.25D / 128.0D;
 				}
 			}
 
@@ -1113,10 +1119,10 @@
 		}
 
 		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
-			var15 = (double)((float)(var13 + 16) / 256.0F);
-			var17 = (double)(((float)(var13 + 16) + 15.99F) / 256.0F);
-			var19 = (double)((float)var14 / 256.0F);
-			var21 = (double)(((float)var14 + 15.99F) / 256.0F);
+			var15 = (double)((float)(var13 + 16) / SharedConstants.ATLAS_SIZE);
+			var17 = (double)(((float)(var13 + 16) + 15.99F) / SharedConstants.ATLAS_SIZE);
+			var19 = (double)((float)var14 / SharedConstants.ATLAS_SIZE);
+			var21 = (double)(((float)var14 + 15.99F) / SharedConstants.ATLAS_SIZE);
 			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && this.blockAccess.getBlockId(var2 - 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
 				var5.setColorOpaque_F(var8 * var10, var8 * var11, var8 * var12);
 				var5.addVertexWithUV((double)((float)var2 + 0.015625F), (double)((float)(var3 + 1) + 7.0F / 320.0F), (double)(var4 + 1), var17, var19);
@@ -1187,12 +1193,12 @@
 
 		float var8 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var8, var8, var8);
-		int var9 = (var7 & 15) << 4;
-		int var10 = var7 & 240;
-		double var11 = (double)((float)var9 / 256.0F);
-		double var13 = (double)(((float)var9 + 15.99F) / 256.0F);
-		double var15 = (double)((float)var10 / 256.0F);
-		double var17 = (double)(((float)var10 + 15.99F) / 256.0F);
+		int var9 = (var7 & SharedConstants.ATLAS_MASK1) << 4;
+		int var10 = (var7 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var11 = (double)((float)var9 / SharedConstants.ATLAS_SIZE);
+		double var13 = (double)(((float)var9 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var15 = (double)((float)var10 / SharedConstants.ATLAS_SIZE);
+		double var17 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		float var19 = 1.0F / 16.0F;
 		float var20 = (float)(var2 + 1);
 		float var21 = (float)(var2 + 1);
@@ -1267,12 +1273,12 @@
 
 		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
 		var5.setColorOpaque_F(var7, var7, var7);
-		int var8 = (var6 & 15) << 4;
-		int var9 = var6 & 240;
-		double var10 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var9 / 256.0F);
-		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
+		int var8 = (var6 & SharedConstants.ATLAS_MASK1) << 4;
+		int var9 = (var6 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var10 = (double)((float)var8 / SharedConstants.ATLAS_SIZE);
+		double var12 = (double)(((float)var8 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var14 = (double)((float)var9 / SharedConstants.ATLAS_SIZE);
+		double var16 = (double)(((float)var9 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		int var18 = this.blockAccess.getBlockMetadata(var2, var3, var4);
 		float var19 = 0.0F;
 		float var20 = 0.05F;
@@ -1354,16 +1360,16 @@
 			var13 = this.overrideBlockTexture;
 		}
 
-		int var14 = (var13 & 15) << 4;
-		int var15 = var13 & 240;
-		float var16 = (float)var14 / 256.0F;
-		float var17 = ((float)var14 + 15.99F) / 256.0F;
-		float var18 = (float)var15 / 256.0F;
-		float var19 = ((float)var15 + 15.99F) / 256.0F;
-		double var20 = (double)var16 + 1.75D / 64.0D;
-		double var22 = (double)var18 + 6.0D / 256.0D;
-		double var24 = (double)var16 + 9.0D / 256.0D;
-		double var26 = (double)var18 + 1.0D / 32.0D;
+		int var14 = (var13 & SharedConstants.ATLAS_MASK1) << 4;
+		int var15 = (var13 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		float var16 = (float)var14 / SharedConstants.ATLAS_SIZE;
+		float var17 = ((float)var14 + 15.99F) / SharedConstants.ATLAS_SIZE;
+		float var18 = (float)var15 / SharedConstants.ATLAS_SIZE;
+		float var19 = ((float)var15 + 15.99F) / SharedConstants.ATLAS_SIZE;
+		double var20 = (double)var16 + 7.0D / SharedConstants.ATLAS_SIZE;
+		double var22 = (double)var18 + 6.0D / SharedConstants.ATLAS_SIZE;
+		double var24 = (double)var16 + 9.0D / SharedConstants.ATLAS_SIZE;
+		double var26 = (double)var18 + 8.0D / SharedConstants.ATLAS_SIZE;
 		var2 += 0.5D;
 		var6 += 0.5D;
 		double var28 = var2 - 0.5D;
@@ -1401,12 +1407,12 @@
 			var10 = this.overrideBlockTexture;
 		}
 
-		int var11 = (var10 & 15) << 4;
-		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
+		int var11 = (var10 & SharedConstants.ATLAS_MASK1) << 4;
+		int var12 = (var10 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var13 = (double)((float)var11 / SharedConstants.ATLAS_SIZE);
+		double var15 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var17 = (double)((float)var12 / SharedConstants.ATLAS_SIZE);
+		double var19 = (double)(((float)var12 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		double var21 = var3 + 0.5D - (double)0.45F;
 		double var23 = var3 + 0.5D + (double)0.45F;
 		double var25 = var7 + 0.5D - (double)0.45F;
@@ -1436,12 +1442,12 @@
 			var10 = this.overrideBlockTexture;
 		}
 
-		int var11 = (var10 & 15) << 4;
-		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
+		int var11 = (var10 & SharedConstants.ATLAS_MASK1) << 4;
+		int var12 = (var10 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var13 = (double)((float)var11 / SharedConstants.ATLAS_SIZE);
+		double var15 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
+		double var17 = (double)((float)var12 / SharedConstants.ATLAS_SIZE);
+		double var19 = (double)(((float)var12 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		double var21 = var3 + 0.5D - 0.25D;
 		double var23 = var3 + 0.5D + 0.25D;
 		double var25 = var7 + 0.5D - 0.5D;
@@ -1522,19 +1528,19 @@
 					var28 = var1.getBlockTextureFromSideAndMetadata(2, var23);
 				}
 
-				int var30 = (var28 & 15) << 4;
-				var31 = var28 & 240;
-				double var32 = ((double)var30 + 8.0D) / 256.0D;
-				double var34 = ((double)var31 + 8.0D) / 256.0D;
+				int var30 = (var28 & SharedConstants.ATLAS_MASK1) << 4;
+				var31 = (var28 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+				double var32 = ((double)var30 + 8.0D) / SharedConstants.ATLAS_SIZE;
+				double var34 = ((double)var31 + 8.0D) / SharedConstants.ATLAS_SIZE;
 				if(var29 < -999.0F) {
 					var29 = 0.0F;
 				} else {
-					var32 = (double)((float)(var30 + 16) / 256.0F);
-					var34 = (double)((float)(var31 + 16) / 256.0F);
+					var32 = (double)((float)(var30 + 16) / SharedConstants.ATLAS_SIZE);
+					var34 = (double)((float)(var31 + 16) / SharedConstants.ATLAS_SIZE);
 				}
 
-				var36 = MathHelper.sin(var29) * 8.0F / 256.0F;
-				var37 = MathHelper.cos(var29) * 8.0F / 256.0F;
+				var36 = MathHelper.sin(var29) * 8.0F / SharedConstants.ATLAS_SIZE;
+				var37 = MathHelper.cos(var29) * 8.0F / SharedConstants.ATLAS_SIZE;
 				var38 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
 				var5.setColorOpaque_F(var15 * var38 * var7, var15 * var38 * var8, var15 * var38 * var9);
 				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var24), (double)(var4 + 0), var32 - (double)var37 - (double)var36, var34 - (double)var37 + (double)var36);
@@ -1570,8 +1576,8 @@
 				}
 
 				int var54 = var1.getBlockTextureFromSideAndMetadata(var28 + 2, var23);
-				int var33 = (var54 & 15) << 4;
-				int var55 = var54 & 240;
+				int var33 = (var54 & SharedConstants.ATLAS_MASK1) << 4;
+				int var55 = (var54 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
 				if(this.renderAllFaces || var12[var28]) {
 					float var35;
 					float var39;
@@ -1607,11 +1613,11 @@
 					}
 
 					var13 = true;
-					double var41 = (double)((float)(var33 + 0) / 256.0F);
-					double var43 = ((double)(var33 + 16) - 0.01D) / 256.0D;
-					double var45 = (double)(((float)var55 + (1.0F - var35) * 16.0F) / 256.0F);
-					double var47 = (double)(((float)var55 + (1.0F - var36) * 16.0F) / 256.0F);
-					double var49 = ((double)(var55 + 16) - 0.01D) / 256.0D;
+					double var41 = (double)((float)(var33 + 0) / SharedConstants.ATLAS_SIZE);
+					double var43 = ((double)(var33 + 16) - 0.01D) / SharedConstants.ATLAS_SIZE;
+					double var45 = (double)(((float)var55 + (1.0F - var35) * 16.0F) / SharedConstants.ATLAS_SIZE);
+					double var47 = (double)(((float)var55 + (1.0F - var36) * 16.0F) / SharedConstants.ATLAS_SIZE);
+					double var49 = ((double)(var55 + 16) - 0.01D) / SharedConstants.ATLAS_SIZE;
 					float var51 = var1.getBlockBrightness(this.blockAccess, var53, var3, var31);
 					if(var28 < 2) {
 						var51 *= var16;
@@ -1767,7 +1773,7 @@
 		this.field_22339_T = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 + 1, var4 - 1)];
 		this.field_22355_ae = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 - 1, var4 + 1)];
 		this.field_22361_ab = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 - 1, var4 - 1)];
-		if(var1.textureIndex == 3) {
+		if(var1.textureIndex == getAtlasTexture(0,1)) {
 			var18 = false;
 			var17 = var18;
 			var16 = var18;
@@ -1968,7 +1974,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var19);
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var19 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -1981,7 +1987,7 @@
 				this.colorBlueBottomLeft *= var7;
 				this.colorBlueBottomRight *= var7;
 				this.colorBlueTopRight *= var7;
-				this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var8 = true;
@@ -2047,7 +2053,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
 			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var19 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2060,7 +2066,7 @@
 				this.colorBlueBottomLeft *= var7;
 				this.colorBlueBottomRight *= var7;
 				this.colorBlueTopRight *= var7;
-				this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var8 = true;
@@ -2126,7 +2132,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
 			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var19);
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var19 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2139,7 +2145,7 @@
 				this.colorBlueBottomLeft *= var7;
 				this.colorBlueBottomRight *= var7;
 				this.colorBlueTopRight *= var7;
-				this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var8 = true;
@@ -2205,7 +2211,7 @@
 			this.colorBlueTopRight *= var12;
 			var19 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var19);
-			if(fancyGrass && var19 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var19 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				this.colorRedTopLeft *= var5;
 				this.colorRedBottomLeft *= var5;
 				this.colorRedBottomRight *= var5;
@@ -2218,7 +2224,7 @@
 				this.colorBlueBottomLeft *= var7;
 				this.colorBlueBottomRight *= var7;
 				this.colorBlueTopRight *= var7;
-				this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var8 = true;
@@ -2290,9 +2296,9 @@
 			var8.setColorOpaque_F(var18 * var27, var21 * var27, var24 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var28 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var18 * var27 * var5, var21 * var27 * var6, var24 * var27 * var7);
-				this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var9 = true;
@@ -2307,9 +2313,9 @@
 			var8.setColorOpaque_F(var18 * var27, var21 * var27, var24 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
 			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var28 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var18 * var27 * var5, var21 * var27 * var6, var24 * var27 * var7);
-				this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var9 = true;
@@ -2324,9 +2330,9 @@
 			var8.setColorOpaque_F(var19 * var27, var22 * var27, var25 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
 			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var28 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var19 * var27 * var5, var22 * var27 * var6, var25 * var27 * var7);
-				this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var9 = true;
@@ -2341,9 +2347,9 @@
 			var8.setColorOpaque_F(var19 * var27, var22 * var27, var25 * var27);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var28);
-			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
+			if(fancyGrass && var28 == getAtlasTexture(0,1) && this.overrideBlockTexture < 0) {
 				var8.setColorOpaque_F(var19 * var27 * var5, var22 * var27 * var6, var25 * var27 * var7);
-				this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, 38);
+				this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, getAtlasTexture(1,1));
 			}
 
 			var9 = true;
@@ -2678,53 +2684,53 @@
 			var8 = this.overrideBlockTexture;
 		}
 
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
+		int var10 = (var8 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var8 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var16 = ((double)var11 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var18 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		double var20 = var14;
 		double var22 = var12;
 		double var24 = var16;
 		double var26 = var18;
-		if(this.field_31082_l == 2) {
-			var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
+		if(this.bottomUVRotate == 2) {
+			var12 = ((double)var10 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)var10 + var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
 			var22 = var14;
 			var16 = var18;
 			var18 = var24;
-		} else if(this.field_31082_l == 1) {
-			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
+		} else if(this.bottomUVRotate == 1) {
+			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
 			var14 = var22;
 			var24 = var18;
 			var26 = var16;
-		} else if(this.field_31082_l == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
+		} else if(this.bottomUVRotate == 3) {
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -2760,53 +2766,53 @@
 			var8 = this.overrideBlockTexture;
 		}
 
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
+		int var10 = (var8 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var8 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var16 = ((double)var11 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var18 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		double var20 = var14;
 		double var22 = var12;
 		double var24 = var16;
 		double var26 = var18;
-		if(this.field_31083_k == 1) {
-			var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
+		if(this.topUVRotate == 1) {
+			var12 = ((double)var10 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)var10 + var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
 			var22 = var14;
 			var16 = var18;
 			var18 = var24;
-		} else if(this.field_31083_k == 2) {
-			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
+		} else if(this.topUVRotate == 2) {
+			var12 = ((double)(var10 + 16) - var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
 			var14 = var22;
 			var24 = var18;
 			var26 = var16;
-		} else if(this.field_31083_k == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
+		} else if(this.topUVRotate == 3) {
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -2832,6 +2838,15 @@
 			var9.addVertexWithUV(var30, var32, var34, var20, var24);
 			var9.addVertexWithUV(var28, var32, var34, var12, var16);
 			var9.addVertexWithUV(var28, var32, var36, var22, var26);
+		}
+
+		if(var1 instanceof GrassBlock) {
+			if(var1.blockID == Block.grass.blockID && fancyGrass) {
+				if(Math.abs(grassShowNoise.GetNoise((float)var2*16,(float)var6*16)) > 0.25F) {
+					double val = Math.abs(grassHeightNoise.GetNoise((float)var2,(float)var6));
+					renderCrossedSquares(Block.tallGrass, 1, var2, var4 + MathHelper.lerp(val,0.15,0.8), var6);
+				}
+			}
 		}
 
 	}
@@ -2842,12 +2857,12 @@
 			var8 = this.overrideBlockTexture;
 		}
 
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var10 = (var8 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var8 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -2856,46 +2871,46 @@
 		}
 
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var18 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		var20 = var14;
 		double var22 = var12;
 		double var24 = var16;
 		double var26 = var18;
-		if(this.field_31087_g == 2) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
+		if(this.eastUVRotate == 2) {
+			var12 = ((double)var10 + var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
 			var22 = var14;
 			var16 = var18;
 			var18 = var24;
-		} else if(this.field_31087_g == 1) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
+		} else if(this.eastUVRotate == 1) {
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
 			var14 = var22;
 			var24 = var18;
 			var26 = var16;
-		} else if(this.field_31087_g == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+		} else if(this.eastUVRotate == 3) {
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -2931,12 +2946,12 @@
 			var8 = this.overrideBlockTexture;
 		}
 
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var10 = (var8 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var8 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var12 = ((double)var10 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -2945,46 +2960,46 @@
 		}
 
 		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var18 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		var20 = var14;
 		double var22 = var12;
 		double var24 = var16;
 		double var26 = var18;
-		if(this.field_31086_h == 1) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / 256.0D;
+		if(this.westUVRotate == 1) {
+			var12 = ((double)var10 + var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
 			var22 = var14;
 			var16 = var18;
 			var18 = var24;
-		} else if(this.field_31086_h == 2) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxX * 16.0D) / 256.0D;
+		} else if(this.westUVRotate == 2) {
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.maxX * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
 			var14 = var22;
 			var24 = var18;
 			var26 = var16;
-		} else if(this.field_31086_h == 3) {
-			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+		} else if(this.westUVRotate == 3) {
+			var12 = ((double)(var10 + 16) - var1.minX * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.maxX * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -3020,12 +3035,12 @@
 			var8 = this.overrideBlockTexture;
 		}
 
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var10 = (var8 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var8 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var12 = ((double)var10 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -3034,46 +3049,46 @@
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var18 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		var20 = var14;
 		double var22 = var12;
 		double var24 = var16;
 		double var26 = var18;
-		if(this.field_31084_j == 1) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
+		if(this.northUVRotate == 1) {
+			var12 = ((double)var10 + var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
 			var22 = var14;
 			var16 = var18;
 			var18 = var24;
-		} else if(this.field_31084_j == 2) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.maxZ * 16.0D) / 256.0D;
+		} else if(this.northUVRotate == 2) {
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
 			var14 = var22;
 			var24 = var18;
 			var26 = var16;
-		} else if(this.field_31084_j == 3) {
-			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+		} else if(this.northUVRotate == 3) {
+			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
@@ -3109,12 +3124,12 @@
 			var8 = this.overrideBlockTexture;
 		}
 
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / 256.0D;
-		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / 256.0D;
+		int var10 = (var8 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var8 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		double var12 = ((double)var10 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+		double var16 = ((double)(var11 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+		double var18 = ((double)(var11 + 16) - var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 		double var20;
 		if(this.flipTexture) {
 			var20 = var12;
@@ -3123,46 +3138,46 @@
 		}
 
 		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
+			var12 = (double)(((float)var10 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var14 = (double)(((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
+			var16 = (double)(((float)var11 + 0.0F) / SharedConstants.ATLAS_SIZE);
+			var18 = (double)(((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE);
 		}
 
 		var20 = var14;
 		double var22 = var12;
 		double var24 = var16;
 		double var26 = var18;
-		if(this.field_31085_i == 2) {
-			var12 = ((double)var10 + var1.minY * 16.0D) / 256.0D;
-			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)var10 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / 256.0D;
+		if(this.southUVRotate == 2) {
+			var12 = ((double)var10 + var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)(var11 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)var10 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)(var11 + 16) - var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var24 = var16;
 			var26 = var18;
 			var20 = var12;
 			var22 = var14;
 			var16 = var18;
 			var18 = var24;
-		} else if(this.field_31085_i == 1) {
-			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / 256.0D;
-			var16 = ((double)var11 + var1.maxZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
+		} else if(this.southUVRotate == 1) {
+			var12 = ((double)(var10 + 16) - var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.maxZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.minY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var12 = var14;
 			var14 = var22;
 			var24 = var18;
 			var26 = var16;
-		} else if(this.field_31085_i == 3) {
-			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / 256.0D;
-			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / 256.0D;
-			var16 = ((double)var11 + var1.maxY * 16.0D) / 256.0D;
-			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / 256.0D;
+		} else if(this.southUVRotate == 3) {
+			var12 = ((double)(var10 + 16) - var1.minZ * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var14 = ((double)(var10 + 16) - var1.maxZ * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
+			var16 = ((double)var11 + var1.maxY * 16.0D) / SharedConstants.ATLAS_SIZE;
+			var18 = ((double)var11 + var1.minY * 16.0D - 0.01D) / SharedConstants.ATLAS_SIZE;
 			var20 = var14;
 			var22 = var12;
 			var24 = var16;
--- net/minecraft/game/world/block/RailBlock.java
+++ net/minecraft/game/world/block/RailBlock.java
@@ -56,10 +56,10 @@
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
 		if(this.isPowered) {
 			if(this.blockID == Block.poweredRail.blockID && (var2 & 8) == 0) {
-				return this.textureIndex - 16;
+				return this.textureIndex - 32;
 			}
 		} else if(var2 >= 6) {
-			return this.textureIndex - 16;
+			return this.textureIndex - 32;
 		}
 
 		return this.textureIndex;
--- net/minecraft/client/render/entity/RenderBiped.java
+++ net/minecraft/client/render/entity/RenderBiped.java
@@ -6,6 +6,7 @@
 import net.minecraft.game.item.Item;
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.GL11;
 
 public class RenderBiped extends RenderLiving {
@@ -23,7 +24,7 @@
 			this.modelBipedMain.bipedRightArm.postRender(1.0F / 16.0F);
 			GL11.glTranslatef(-(1.0F / 16.0F), 7.0F / 16.0F, 1.0F / 16.0F);
 			float var4;
-			if(var3.id < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3.id].getRenderType())) {
+			if(var3.id < SharedConstants.BLOCK_LIMIT && RenderBlocks.renderItemIn3d(Block.blocksList[var3.id].getRenderType())) {
 				var4 = 0.5F;
 				GL11.glTranslatef(0.0F, 3.0F / 16.0F, -(5.0F / 16.0F));
 				var4 *= 12.0F / 16.0F;
--- net/minecraft/util/NibbleArray.java
+++ net/minecraft/util/NibbleArray.java
@@ -12,14 +12,14 @@
 	}
 
 	public int getNibble(int var1, int var2, int var3) {
-		int var4 = var1 << 11 | var3 << 7 | var2;
+		int var4 = var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2;
 		int var5 = var4 >> 1;
 		int var6 = var4 & 1;
 		return var6 == 0 ? this.data[var5] & 15 : this.data[var5] >> 4 & 15;
 	}
 
 	public void setNibble(int var1, int var2, int var3, int var4) {
-		int var5 = var1 << 11 | var3 << 7 | var2;
+		int var5 = var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2;
 		int var6 = var5 >> 1;
 		int var7 = var5 & 1;
 		if(var7 == 0) {
--- net/minecraft/game/entity/animal/PigEntity.java
+++ net/minecraft/game/entity/animal/PigEntity.java
@@ -13,6 +13,7 @@
 		super(var1);
 		this.texture = "/mob/pig.png";
 		this.setSize(0.9F, 0.9F);
+		this.scoreValue = 5;
 	}
 
 	protected void entityInit() {
--- net/minecraft/game/entity/misc/FallingBlockEntity.java
+++ net/minecraft/game/entity/misc/FallingBlockEntity.java
@@ -77,11 +77,11 @@
 	}
 
 	protected void writeEntityToNBT(CompoundTag var1) {
-		var1.setByte("Tile", (byte)this.blockID);
+		var1.setShort("Tile", (short)this.blockID);
 	}
 
 	protected void readEntityFromNBT(CompoundTag var1) {
-		this.blockID = var1.getByte("Tile") & 255;
+		this.blockID = var1.getShort("Tile");
 	}
 
 	public float getShadowSize() {
--- net/minecraft/client/gui/OptionsScreen.java
+++ net/minecraft/client/gui/OptionsScreen.java
@@ -67,7 +67,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
--- net/minecraft/client/gui/component/GuiYesNo.java
+++ net/minecraft/client/gui/component/GuiYesNo.java
@@ -29,7 +29,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 16777215);
 		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 16777215);
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/game/entity/player/InventoryCrafting.java
+++ net/minecraft/game/entity/player/InventoryCrafting.java
@@ -65,7 +65,7 @@
 	}
 
 	public int getStackLimit() {
-		return 64;
+		return 100;
 	}
 
 	public void onChanged() {
--- net/minecraft/game/world/block/StoneBlock.java
+++ net/minecraft/game/world/block/StoneBlock.java
@@ -4,11 +4,18 @@
 import net.minecraft.game.world.material.Material;
 
 public class StoneBlock extends Block {
-	public StoneBlock(int var1, int var2) {
+	private int damage;
+
+	public StoneBlock(int var1, int var2, int damage) {
 		super(var1, var2, Material.stone);
+		this.damage = damage;
 	}
 
 	public int idDropped(int var1, Random var2) {
 		return Block.cobblestone.blockID;
+	}
+
+	protected int damageDropped(int var1) {
+		return damage;
 	}
 }
--- net/minecraft/game/world/block/PistonBaseBlock.java
+++ net/minecraft/game/world/block/PistonBaseBlock.java
@@ -10,6 +10,9 @@
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.game.world.material.Material;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
 
 public class PistonBaseBlock extends Block {
 	private boolean isSticky;
@@ -23,12 +26,12 @@
 	}
 
 	public int getFaceTexture() {
-		return this.isSticky ? 106 : 107;
+		return this.isSticky ? getAtlasTexture(27,10) : getAtlasTexture(28,10);
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
 		int var3 = getOrientation(var2);
-		return var3 > 5 ? this.textureIndex : (var1 == var3 ? (!isExtended(var2) && this.minX <= 0.0D && this.minY <= 0.0D && this.minZ <= 0.0D && this.maxX >= 1.0D && this.maxY >= 1.0D && this.maxZ >= 1.0D ? this.textureIndex : 110) : (var1 == Direction.oppositeFace[var3] ? 109 : 108));
+		return var3 > 5 ? this.textureIndex : (var1 == var3 ? (!isExtended(var2) && this.minX <= 0.0D && this.minY <= 0.0D && this.minZ <= 0.0D && this.maxX >= 1.0D && this.maxY >= 1.0D && this.maxZ >= 1.0D ? this.textureIndex : getAtlasTexture(30,10)) : (var1 == Direction.oppositeFace[var3] ? getAtlasTexture(31,2) : getAtlasTexture(29,10)));
 	}
 
 	public int getRenderType() {
@@ -249,7 +252,7 @@
 
 		while(true) {
 			if(var8 < 13) {
-				if(var6 <= 0 || var6 >= 127) {
+				if(var6 <= 0 || var6 >= SharedConstants.CHUNK_HEIGHT-1) {
 					return false;
 				}
 
@@ -286,7 +289,7 @@
 		while(true) {
 			int var10;
 			if(var9 < 13) {
-				if(var7 <= 0 || var7 >= 127) {
+				if(var7 <= 0 || var7 >= SharedConstants.CHUNK_HEIGHT-1) {
 					return false;
 				}
 
--- /dev/null
+++ net/minecraft/game/world/biome/categories/tropical/RainforestBiome.java
@@ -1,0 +1,14 @@
+package net.minecraft.game.world.biome.categories.tropical;
+
+import java.util.Random;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.BigTreeFeature;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.TreeFeature;
+
+public class RainforestBiome extends Biome {
+	public Feature getRandomTreeFeature(Random var1) {
+		return (Feature)(var1.nextInt(3) == 0 ? new BigTreeFeature() : new TreeFeature());
+	}
+}
--- net/minecraft/server/world/WorldServer.java
+++ net/minecraft/server/world/WorldServer.java
@@ -79,7 +79,7 @@
 		return var6 > 16 || this.mcServer.configManager.isOp(var1.username);
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
+	public void obtainEntitySkin(Entity var1) {
 		super.obtainEntitySkin(var1);
 		this.field_20912_E.addKey(var1.entityId, var1);
 	}
--- net/minecraft/game/entity/animal/WolfEntity.java
+++ net/minecraft/game/entity/animal/WolfEntity.java
@@ -30,6 +30,7 @@
 		this.setSize(0.8F, 0.8F);
 		this.moveSpeed = 1.1F;
 		this.health = 8;
+		this.scoreValue = 5;
 	}
 
 	protected void entityInit() {
--- net/minecraft/game/world/block/StairsBlock.java
+++ net/minecraft/game/world/block/StairsBlock.java
@@ -98,24 +98,25 @@
 		return this.modelBlock.getRenderBlockPass();
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
+	/*public int idDropped(int var1, Random var2) {
+		return ;
+	}*/
 
-	public int quantityDropped(Random var1) {
+	/*public int quantityDropped(Random var1) {
 		return this.modelBlock.quantityDropped(var1);
-	}
+	}*/
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, var2);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSide(var1);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1,0);
 	}
 
 	public int getBlockTexture(BlockAccess var1, int var2, int var3, int var4, int var5) {
-		return this.modelBlock.getBlockTexture(var1, var2, var3, var4, var5);
+		//return this.modelBlock.getBlockTexture(var1, var2, var3, var4, var5);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(0,0);
 	}
 
 	public int tickRate() {
--- net/minecraft/network/NetworkWriterThread.java
+++ net/minecraft/network/NetworkWriterThread.java
@@ -30,7 +30,7 @@
 				}
 
 				try {
-					sleep(100L);
+					sleep(2L);
 				} catch (InterruptedException var16) {
 				}
 
--- net/minecraft/client/model/ModelRenderer.java
+++ net/minecraft/client/model/ModelRenderer.java
@@ -22,6 +22,9 @@
 	public boolean showModel = true;
 	public boolean skipRender = false;
 
+	public int textureWidth = 64;
+	public int textureHeight = 32;
+
 	public ModelRenderer(int var1, int var2) {
 		this.textureOffsetX = var1;
 		this.textureOffsetY = var2;
@@ -65,12 +68,12 @@
 		this.corners[5] = var16;
 		this.corners[6] = var17;
 		this.corners[7] = var18;
-		this.faces[0] = new TexturedQuad(new ModelVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5);
-		this.faces[1] = new TexturedQuad(new ModelVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5);
-		this.faces[2] = new TexturedQuad(new ModelVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6);
-		this.faces[3] = new TexturedQuad(new ModelVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6);
-		this.faces[4] = new TexturedQuad(new ModelVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5);
-		this.faces[5] = new TexturedQuad(new ModelVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5);
+		this.faces[0] = new TexturedQuad(new ModelVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5, textureWidth, textureHeight);
+		this.faces[1] = new TexturedQuad(new ModelVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5,textureWidth, textureHeight);
+		this.faces[2] = new TexturedQuad(new ModelVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6,textureWidth, textureHeight);
+		this.faces[3] = new TexturedQuad(new ModelVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6,textureWidth, textureHeight);
+		this.faces[4] = new TexturedQuad(new ModelVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5,textureWidth, textureHeight);
+		this.faces[5] = new TexturedQuad(new ModelVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5,textureWidth, textureHeight);
 		if(this.mirror) {
 			for(int var19 = 0; var19 < this.faces.length; ++var19) {
 				this.faces[var19].flipFace();
--- net/minecraft/game/entity/monster/ZombieEntity.java
+++ net/minecraft/game/entity/monster/ZombieEntity.java
@@ -10,6 +10,7 @@
 		this.texture = "/mob/zombie.png";
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 5;
+		this.scoreValue = 10;
 	}
 
 	public void onLivingUpdate() {
--- net/minecraft/client/gui/VideoSettingsScreen.java
+++ net/minecraft/client/gui/VideoSettingsScreen.java
@@ -59,7 +59,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, this.field_22107_a, this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
--- net/minecraft/game/world/block/Block.java
+++ net/minecraft/game/world/block/Block.java
@@ -2,20 +2,14 @@
 
 import java.util.ArrayList;
 import java.util.Random;
+
+import net.minecraft.client.render.RenderBlocks;
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.LivingEntity;
 import net.minecraft.game.entity.MobType;
 import net.minecraft.game.entity.misc.ItemEntity;
 import net.minecraft.game.entity.player.PlayerEntity;
-import net.minecraft.game.item.BlockItem;
-import net.minecraft.game.item.Item;
-import net.minecraft.game.item.ItemStack;
-import net.minecraft.game.item.LeavesItem;
-import net.minecraft.game.item.PistonItem;
-import net.minecraft.game.item.SaplingItem;
-import net.minecraft.game.item.SlabItem;
-import net.minecraft.game.item.SubtypedItem;
-import net.minecraft.game.item.WoolItem;
+import net.minecraft.game.item.*;
 import net.minecraft.game.physics.AxisAlignedBB;
 import net.minecraft.game.physics.Vec3D;
 import net.minecraft.game.stats.StatCollector;
@@ -23,8 +17,13 @@
 import net.minecraft.game.world.BlockAccess;
 import net.minecraft.game.world.MovingObjectPosition;
 import net.minecraft.game.world.World;
+import net.minecraft.game.world.block.mechanical.AxleBlock;
+import net.minecraft.game.world.block.mechanical.GearboxBlock;
 import net.minecraft.game.world.block.tileentity.SignTileEntity;
 import net.minecraft.game.world.material.Material;
+import net.minecraft.util.SharedConstants;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
 
 public class Block {
 	public static final StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
@@ -36,110 +35,116 @@
 	public static final StepSound soundGlassFootstep = new StepSoundStone("stone", 1.0F, 1.0F);
 	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
 	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
-	public static final Block[] blocksList = new Block[256];
-	public static final boolean[] tickOnLoad = new boolean[256];
-	public static final boolean[] opaqueCubeLookup = new boolean[256];
-	public static final boolean[] isBlockContainer = new boolean[256];
-	public static final int[] lightOpacity = new int[256];
-	public static final boolean[] canBlockGrass = new boolean[256];
-	public static final int[] lightValue = new int[256];
-	public static final boolean[] requiresSelfNotify = new boolean[256];
-	public static final Block stone = (new StoneBlock(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stone");
+	public static final Block[] blocksList = new Block[SharedConstants.BLOCK_LIMIT];
+	public static final boolean[] tickOnLoad = new boolean[SharedConstants.BLOCK_LIMIT];
+	public static final boolean[] opaqueCubeLookup = new boolean[SharedConstants.BLOCK_LIMIT];
+	public static final boolean[] isBlockContainer = new boolean[SharedConstants.BLOCK_LIMIT];
+	public static final int[] lightOpacity = new int[SharedConstants.BLOCK_LIMIT];
+	public static final boolean[] canBlockGrass = new boolean[SharedConstants.BLOCK_LIMIT];
+	public static final int[] lightValue = new int[SharedConstants.BLOCK_LIMIT];
+	public static final boolean[] requiresSelfNotify = new boolean[SharedConstants.BLOCK_LIMIT];
+	public static final Block stone = (new StoneBlock(1, getAtlasTexture(0,2), 0)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stone");
 	public static final GrassBlock grass = (GrassBlock)(new GrassBlock(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setName("grass");
-	public static final Block dirt = (new DirtBlock(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setName("dirt");
-	public static final Block cobblestone = (new Block(4, 16, Material.stone)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stonebrick");
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("wood").setRequiresSelfNotify();
-	public static final Block sapling = (new SaplingBlock(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("sapling").setRequiresSelfNotify();
-	public static final Block bedrock = (new Block(7, 17, Material.stone)).setBlockUnbreakable().setResistance(6000000.0F).setStepSound(soundStoneFootstep).setName("bedrock").disableStats();
+	public static final Block dirt = (new DirtBlock(3, getAtlasTexture(3,1))).setHardness(0.5F).setStepSound(soundGravelFootstep).setName("dirt");
+	public static final Block cobblestone = (new CobblestoneBlock(4, Material.stone)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stonebrick");
+	public static final Block planks = (new PlanksBlock(5, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("wood").setRequiresSelfNotify();
+	public static final Block sapling = (new SaplingBlock(6, getAtlasTexture(21,0))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("sapling").setRequiresSelfNotify();
+	public static final Block bedrock = (new Block(7, getAtlasTexture(11,1), Material.stone)).setBlockUnbreakable().setResistance(6000000.0F).setStepSound(soundStoneFootstep).setName("bedrock").disableStats();
 	public static final Block flowingWater = (new FlowingLiquidBlock(8, Material.water)).setHardness(100.0F).setLightOpacity(3).setName("water").disableStats().setRequiresSelfNotify();
 	public static final Block stillWater = (new StillLiquidBlock(9, Material.water)).setHardness(100.0F).setLightOpacity(3).setName("water").disableStats().setRequiresSelfNotify();
 	public static final Block flowingLava = (new FlowingLiquidBlock(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255).setName("lava").disableStats().setRequiresSelfNotify();
 	public static final Block stillLava = (new StillLiquidBlock(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setName("lava").disableStats().setRequiresSelfNotify();
-	public static final Block sand = (new SandBlock(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setName("sand");
-	public static final Block gravel = (new GravelBlock(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("gravel");
-	public static final Block goldOre = (new OreBlock(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreGold");
-	public static final Block ironOre = (new OreBlock(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreIron");
-	public static final Block coalOre = (new OreBlock(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreCoal");
+	public static final Block sand = (new SandBlock(12, getAtlasTexture(3,0))).setHardness(0.5F).setStepSound(soundSandFootstep).setName("sand");
+	public static final Block gravel = (new GravelBlock(13, getAtlasTexture(4,0))).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("gravel");
+	public static final Block goldOre = (new OreBlock(14, getAtlasTexture(0,9))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreGold");
+	public static final Block ironOre = (new OreBlock(15, getAtlasTexture(0,8))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreIron");
+	public static final Block coalOre = (new OreBlock(16, getAtlasTexture(0,6))).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreCoal");
 	public static final Block log = (new LogBlock(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setName("log").setRequiresSelfNotify();
-	public static final LeavesBlock leaves = (LeavesBlock)(new LeavesBlock(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setName("leaves").disableStats().setRequiresSelfNotify();
+	public static final LeavesBlock leaves = (LeavesBlock)(new LeavesBlock(18, getAtlasTexture(19,0))).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setName("leaves").disableStats().setRequiresSelfNotify();
 	public static final Block sponge = (new SpongeBlock(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setName("sponge");
-	public static final Block glass = (new GlassBlock(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setName("glass");
+	public static final Block glass = (new GlassBlock(20, getAtlasTexture(10,1), Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setName("glass");
 	public static final Block lapisOre = (new OreBlock(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreLapis");
 	public static final Block lapisBlock = (new Block(22, 144, Material.stone)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("blockLapis");
 	public static final Block dispenser = (new DispenserBlock(23)).setHardness(3.5F).setStepSound(soundStoneFootstep).setName("dispenser").setRequiresSelfNotify();
 	public static final Block sandstone = (new SandstoneBlock(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setName("sandStone");
 	public static final Block noteBlock = (new NoteBlock(25)).setHardness(0.8F).setName("musicBlock").setRequiresSelfNotify();
 	public static final Block bed = (new BedBlock(26)).setHardness(0.2F).setName("bed").disableStats().setRequiresSelfNotify();
-	public static final Block poweredRail = (new RailBlock(27, 179, true)).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("goldenRail").setRequiresSelfNotify();
-	public static final Block detectorRail = (new DetectorRailBlock(28, 195)).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("detectorRail").setRequiresSelfNotify();
-	public static final Block stickyPiston = (new PistonBaseBlock(29, 106, true)).setName("pistonStickyBase").setRequiresSelfNotify();
-	public static final Block web = (new WebBlock(30, 11)).setLightOpacity(1).setHardness(4.0F).setName("web");
-	public static final TallGrassBlock tallGrass = (TallGrassBlock)(new TallGrassBlock(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("tallgrass");
-	public static final DeadBushBlock deadBush = (DeadBushBlock)(new DeadBushBlock(32, 55)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("deadbush");
-	public static final Block piston = (new PistonBaseBlock(33, 107, false)).setName("pistonBase").setRequiresSelfNotify();
-	public static final PistonExtensionBlock pistonExtension = (PistonExtensionBlock)(new PistonExtensionBlock(34, 107)).setRequiresSelfNotify();
+	public static final Block poweredRail = (new RailBlock(27, getAtlasTexture(30,9), true)).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("goldenRail").setRequiresSelfNotify();
+	public static final Block detectorRail = (new DetectorRailBlock(28, getAtlasTexture(31,9))).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("detectorRail").setRequiresSelfNotify();
+	public static final Block stickyPiston = (new PistonBaseBlock(29, getAtlasTexture(27,10), true)).setName("pistonStickyBase").setRequiresSelfNotify();
+	public static final Block web = (new WebBlock(30, getAtlasTexture(27,5))).setLightOpacity(1).setHardness(4.0F).setName("web");
+	public static final TallGrassBlock tallGrass = (TallGrassBlock)(new TallGrassBlock(31, getAtlasTexture(7,0))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("tallgrass");
+	public static final DeadBushBlock deadBush = (DeadBushBlock)(new DeadBushBlock(32, getAtlasTexture(15,3))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("deadbush");
+	public static final Block piston = (new PistonBaseBlock(33, getAtlasTexture(28,10), false)).setName("pistonBase").setRequiresSelfNotify();
+	public static final PistonExtensionBlock pistonExtension = (PistonExtensionBlock)(new PistonExtensionBlock(34, getAtlasTexture(28,10))).setRequiresSelfNotify();
 	public static final Block wool = (new WoolBlock()).setHardness(0.8F).setStepSound(soundClothFootstep).setName("cloth").setRequiresSelfNotify();
 	public static final MovingPistonBlock movingPiston = new MovingPistonBlock(36);
-	public static final FlowerBlock flower = (FlowerBlock)(new FlowerBlock(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("flower");
-	public static final FlowerBlock rose = (FlowerBlock)(new FlowerBlock(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("rose");
-	public static final FlowerBlock brownMushroom = (FlowerBlock)(new MushroomBlock(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F).setName("mushroom");
-	public static final FlowerBlock redMushroom = (FlowerBlock)(new MushroomBlock(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("mushroom");
+	public static final FlowerBlock flower = (FlowerBlock)(new FlowerBlock(37, getAtlasTexture(9,0))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("flower");
+	public static final FlowerBlock rose = (FlowerBlock)(new FlowerBlock(38, getAtlasTexture(8,0))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("rose");
+	public static final FlowerBlock brownMushroom = (FlowerBlock)(new MushroomBlock(39, getAtlasTexture(11,0))).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F).setName("mushroom");
+	public static final FlowerBlock redMushroom = (FlowerBlock)(new MushroomBlock(40, getAtlasTexture(10,0))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("mushroom");
 	public static final Block goldBlock = (new MineralBlock(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setName("blockGold");
 	public static final Block ironBlock = (new MineralBlock(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setName("blockIron");
-	public static final Block doubleStoneSlab = (new SlabBlock(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stoneSlab");
+	public static final Block doubleStoneSlab = (new SlabBlock(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stoneSlabDouble");
 	public static final Block stoneSlab = (new SlabBlock(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stoneSlab");
-	public static final Block brick = (new Block(45, 7, Material.stone)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("brick");
-	public static final Block tnt = (new TNTBlock(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("tnt");
-	public static final Block bookshelf = (new BookshelfBlock(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setName("bookshelf");
-	public static final Block mossyCobblestone = (new Block(48, 36, Material.stone)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stoneMoss");
-	public static final Block obsidian = (new ObsidianBlock(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setName("obsidian");
-	public static final Block torch = (new TorchBlock(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep).setName("torch").setRequiresSelfNotify();
-	public static final FireBlock fire = (FireBlock)(new FireBlock(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setName("fire").disableStats().setRequiresSelfNotify();
-	public static final Block mobSpawner = (new MobSpawnerBlock(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setName("mobSpawner").disableStats();
+	public static final Block brick = (new Block(45, getAtlasTexture(6,1), Material.stone)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("brick");
+	public static final Block tnt = (new TNTBlock(46, getAtlasTexture(28,7))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("tnt");
+	public static final Block bookshelf = (new BookshelfBlock(47, getAtlasTexture(5,1))).setHardness(1.5F).setStepSound(soundWoodFootstep).setName("bookshelf");
+	public static final Block mossyCobblestone = (new Block(48, getAtlasTexture(2,2), Material.stone)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("stoneMoss");
+	public static final Block obsidian = (new ObsidianBlock(49, getAtlasTexture(4,1))).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setName("obsidian");
+	public static final Block torch = (new TorchBlock(50, getAtlasTexture(31,6))).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep).setName("torch").setRequiresSelfNotify();
+	public static final FireBlock fire = (FireBlock)(new FireBlock(51, getAtlasTexture(31, 26))).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setName("fire").disableStats().setRequiresSelfNotify();
+	public static final Block mobSpawner = (new MobSpawnerBlock(52, getAtlasTexture(28,4))).setHardness(5.0F).setStepSound(soundMetalFootstep).setName("mobSpawner").disableStats();
 	public static final Block woodenStairs = (new StairsBlock(53, planks)).setName("stairsWood").setRequiresSelfNotify();
 	public static final Block chest = (new ChestBlock(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setName("chest").setRequiresSelfNotify();
-	public static final Block redstoneWire = (new RedstoneWireBlock(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setName("redstoneDust").disableStats().setRequiresSelfNotify();
+	public static final Block redstoneWire = (new RedstoneWireBlock(55, getAtlasTexture(25,4))).setHardness(0.0F).setStepSound(soundPowderFootstep).setName("redstoneDust").disableStats().setRequiresSelfNotify();
 	public static final Block diamondOre = (new OreBlock(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreDiamond");
 	public static final Block diamondBlock = (new MineralBlock(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setName("blockDiamond");
 	public static final Block workbench = (new WorkbenchBlock(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setName("workbench");
-	public static final Block crops = (new CropsBlock(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("crops").disableStats().setRequiresSelfNotify();
+	public static final Block crops = (new CropsBlock(59, getAtlasTexture(0,30))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("crops").disableStats().setRequiresSelfNotify();
 	public static final Block farmland = (new FarmlandBlock(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("farmland");
 	public static final Block furnace = (new FurnaceBlock(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setName("furnace").setRequiresSelfNotify();
 	public static final Block activeFurnace = (new FurnaceBlock(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setName("furnace").setRequiresSelfNotify();
 	public static final Block standingSign = (new SignBlock(63, SignTileEntity.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setName("sign").disableStats().setRequiresSelfNotify();
 	public static final Block door = (new DoorBlock(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setName("doorWood").disableStats().setRequiresSelfNotify();
-	public static final Block ladder = (new LadderBlock(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setName("ladder").setRequiresSelfNotify();
-	public static final Block rail = (new RailBlock(66, 128, false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("rail").setRequiresSelfNotify();
+	public static final Block ladder = (new LadderBlock(65, getAtlasTexture(29,0))).setHardness(0.4F).setStepSound(soundWoodFootstep).setName("ladder").setRequiresSelfNotify();
+	public static final Block rail = (new RailBlock(66, getAtlasTexture(31,8), false)).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("rail").setRequiresSelfNotify();
 	public static final Block cobblestoneStairs = (new StairsBlock(67, cobblestone)).setName("stairsStone").setRequiresSelfNotify();
 	public static final Block wallSign = (new SignBlock(68, SignTileEntity.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setName("sign").disableStats().setRequiresSelfNotify();
-	public static final Block lever = (new LeverBlock(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep).setName("lever").setRequiresSelfNotify();
-	public static final Block stonePressurePlate = (new PressurePlateBlock(70, stone.textureIndex, MobType.mobs, Material.stone)).setHardness(0.5F).setStepSound(soundStoneFootstep).setName("pressurePlate").setRequiresSelfNotify();
+	public static final Block lever = (new LeverBlock(69, getAtlasTexture(31,4))).setHardness(0.5F).setStepSound(soundWoodFootstep).setName("lever").setRequiresSelfNotify();
+	public static final Block stonePressurePlate = (new PressurePlateBlock(70, stone.textureIndex, MobType.mobs, Material.stone)).setHardness(0.5F).setStepSound(soundStoneFootstep).setName("pressurePlateStone").setRequiresSelfNotify();
 	public static final Block ironDoor = (new DoorBlock(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setName("doorIron").disableStats().setRequiresSelfNotify();
-	public static final Block woodenPressurePlate = (new PressurePlateBlock(72, planks.textureIndex, MobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setName("pressurePlate").setRequiresSelfNotify();
-	public static final Block redstoneOre = (new RedstoneOreBlock(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreRedstone").setRequiresSelfNotify();
-	public static final Block glowingRedstoneOre = (new RedstoneOreBlock(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreRedstone").setRequiresSelfNotify();
+	public static final Block woodenPressurePlate = (new PressurePlateBlock(72, planks.textureIndex, MobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setName("pressurePlateWood").setRequiresSelfNotify();
+	public static final Block redstoneOre = (new RedstoneOreBlock(73, getAtlasTexture(0,10), false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreRedstone").setRequiresSelfNotify();
+	public static final Block glowingRedstoneOre = (new RedstoneOreBlock(74, getAtlasTexture(0,10), true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("oreRedstone").setRequiresSelfNotify();
 	public static final Block redstoneTorchOff = (new RedstoneTorchBlock(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setName("notGate").setRequiresSelfNotify();
 	public static final Block redstoneTorchOn = (new RedstoneTorchBlock(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setName("notGate").setRequiresSelfNotify();
 	public static final Block button = (new ButtonBlock(77, stone.textureIndex)).setHardness(0.5F).setStepSound(soundStoneFootstep).setName("button").setRequiresSelfNotify();
-	public static final Block snowLayer = (new SnowLayerBlock(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setName("snow");
-	public static final Block ice = (new IceBlock(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setName("ice");
-	public static final Block snow = (new SnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setName("snow");
-	public static final Block cactus = (new CactusBlock(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setName("cactus");
-	public static final Block clayBlock = (new ClayBlock(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("clay");
-	public static final Block reed = (new ReedBlock(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("reeds").disableStats();
-	public static final Block jukebox = (new JukeboxBlock(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("jukebox").setRequiresSelfNotify();
-	public static final Block fence = (new FenceBlock(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("fence").setRequiresSelfNotify();
-	public static final Block pumpkin = (new PumpkinBlock(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setName("pumpkin").setRequiresSelfNotify();
-	public static final Block netherrack = (new NetherrackBlock(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setName("hellrock");
-	public static final Block soulSand = (new SoulSandBlock(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setName("hellsand");
-	public static final Block glowstone = (new GlowstoneBlock(89, 105, Material.stone)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setName("lightgem");
-	public static final PortalBlock portal = (PortalBlock)(new PortalBlock(90, 14)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F).setName("portal");
-	public static final Block jackOLantern = (new PumpkinBlock(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setName("litpumpkin").setRequiresSelfNotify();
-	public static final Block cake = (new CakeBlock(92, 121)).setHardness(0.5F).setStepSound(soundClothFootstep).setName("cake").disableStats().setRequiresSelfNotify();
+	public static final Block snowLayer = (new SnowLayerBlock(78, getAtlasTexture(2,0))).setHardness(0.1F).setStepSound(soundClothFootstep).setName("snowLayer");
+	public static final Block ice = (new IceBlock(79, getAtlasTexture(5,0))).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setName("ice");
+	public static final Block snow = (new SnowBlock(80, getAtlasTexture(2,0))).setHardness(0.2F).setStepSound(soundClothFootstep).setName("snow");
+	public static final Block cactus = (new CactusBlock(81, getAtlasTexture(15,0))).setHardness(0.4F).setStepSound(soundClothFootstep).setName("cactus");
+	public static final Block clayBlock = (new ClayBlock(82, getAtlasTexture(6,0))).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("clay");
+	public static final Block reed = (new ReedBlock(83, getAtlasTexture(27,4))).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("reeds").disableStats();
+	public static final Block jukebox = (new JukeboxBlock(84, getAtlasTexture(26,3))).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("jukebox").setRequiresSelfNotify();
+	public static final Block fence = (new FenceBlock(85, getAtlasTexture(16,0))).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("fence").setRequiresSelfNotify();
+	public static final Block pumpkin = (new PumpkinBlock(86, getAtlasTexture(11,2), false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setName("pumpkin").setRequiresSelfNotify();
+	public static final Block netherrack = (new NetherrackBlock(87, getAtlasTexture(12,1))).setHardness(0.4F).setStepSound(soundStoneFootstep).setName("hellrock");
+	public static final Block soulSand = (new SoulSandBlock(88, getAtlasTexture(13,1))).setHardness(0.5F).setStepSound(soundSandFootstep).setName("hellsand");
+	public static final Block glowstone = (new GlowstoneBlock(89, getAtlasTexture(14,1), Material.stone)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setName("lightgem");
+	public static final PortalBlock portal = (PortalBlock)(new PortalBlock(90, getAtlasTexture(30,27))).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F).setName("portal");
+	public static final Block jackOLantern = (new PumpkinBlock(91, getAtlasTexture(11,2), true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setName("litpumpkin").setRequiresSelfNotify();
+	public static final Block cake = (new CakeBlock(92, getAtlasTexture(28,3))).setHardness(0.5F).setStepSound(soundClothFootstep).setName("cake").disableStats().setRequiresSelfNotify();
 	public static final Block redstoneRepeaterOff = (new RedstoneRepeaterBlock(93, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setName("diode").disableStats().setRequiresSelfNotify();
 	public static final Block redstoneRepeaterOn = (new RedstoneRepeaterBlock(94, true)).setHardness(0.0F).setLightValue(10.0F / 16.0F).setStepSound(soundWoodFootstep).setName("diode").disableStats().setRequiresSelfNotify();
 	public static final Block lockedChest = (new LockedChestBlock(95)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setName("lockedchest").setTickOnLoad(true).setRequiresSelfNotify();
 	public static final Block trapdoor = (new TrapDoorBlock(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setName("trapdoor").disableStats().setRequiresSelfNotify();
+
+	public static final Block limestone = (new StoneBlock(97, getAtlasTexture(0,3), 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("limestone");
+	public static final Block granite = (new StoneBlock(98, getAtlasTexture(0,4), 2)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("granite");
+
+	public static final Block axle = (new AxleBlock(99)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("axle").setRequiresSelfNotify();
+	public static final Block gearbox = (new GearboxBlock(100)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("gearbox").setRequiresSelfNotify();
 	public int textureIndex;
 	public final int blockID;
 	protected float hardness;
@@ -543,7 +548,9 @@
 
 	public void harvestBlock(World var1, PlayerEntity var2, int var3, int var4, int var5, int var6) {
 		var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-		this.dropBlockAsItem(var1, var3, var4, var5, var6);
+		if(!var1.isCreativeWorld()) {
+			this.dropBlockAsItem(var1, var3, var4, var5, var6);
+		}
 	}
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
@@ -582,18 +589,24 @@
 		return this.material.getMaterialMobility();
 	}
 
+	public boolean renderCustom(RenderBlocks renderBlocks, BlockAccess access, int x, int y, int z) {
+		return false;
+	}
+
 	static {
-		Item.itemsList[wool.blockID] = (new WoolItem(wool.blockID - 256)).setName("cloth");
-		Item.itemsList[log.blockID] = (new SubtypedItem(log.blockID - 256)).setName("log");
-		Item.itemsList[stoneSlab.blockID] = (new SlabItem(stoneSlab.blockID - 256)).setName("stoneSlab");
-		Item.itemsList[sapling.blockID] = (new SaplingItem(sapling.blockID - 256)).setName("sapling");
-		Item.itemsList[leaves.blockID] = (new LeavesItem(leaves.blockID - 256)).setName("leaves");
-		Item.itemsList[piston.blockID] = new PistonItem(piston.blockID - 256);
-		Item.itemsList[stickyPiston.blockID] = new PistonItem(stickyPiston.blockID - 256);
+		Item.itemsList[wool.blockID] = (new WoolItem(wool.blockID)).setName("cloth");
+		Item.itemsList[log.blockID] = (new SubtypedItem(log.blockID)).setName("log");
+		Item.itemsList[stoneSlab.blockID] = (new SlabItem(stoneSlab.blockID)).setName("stoneSlab");
+		Item.itemsList[sapling.blockID] = (new SaplingItem(sapling.blockID)).setName("sapling");
+		Item.itemsList[leaves.blockID] = (new LeavesItem(leaves.blockID)).setName("leaves");
+		Item.itemsList[piston.blockID] = new PistonItem(piston.blockID);
+		Item.itemsList[stickyPiston.blockID] = new PistonItem(stickyPiston.blockID);
+		Item.itemsList[cobblestone.blockID] = (new CobblestoneItem(cobblestone.blockID)).setName("stonebrick");
+		Item.itemsList[planks.blockID] = (new PlanksItem(planks.blockID)).setName("wood");
 
-		for(int var0 = 0; var0 < 256; ++var0) {
+		for(int var0 = 0; var0 < blocksList.length; ++var0) {
 			if(blocksList[var0] != null && Item.itemsList[var0] == null) {
-				Item.itemsList[var0] = new BlockItem(var0 - 256);
+				Item.itemsList[var0] = new BlockItem(var0);
 				blocksList[var0].initializeBlock();
 			}
 		}
--- net/minecraft/game/world/World.java
+++ net/minecraft/game/world/World.java
@@ -15,7 +15,7 @@
 import net.minecraft.game.physics.AxisAlignedBB;
 import net.minecraft.game.physics.Vec3D;
 import net.minecraft.game.world.biome.Biome;
-import net.minecraft.game.world.biome.ClimaticBiomeSource;
+import net.minecraft.game.world.biome.ClimaticVoronoiBiomeSource;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.block.LiquidBlock;
 import net.minecraft.game.world.block.tileentity.TileEntity;
@@ -35,6 +35,7 @@
 import net.minecraft.game.world.save.SaveHandler;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ProgressUpdate;
+import net.minecraft.util.SharedConstants;
 
 public class World implements BlockAccess {
 	public boolean scheduledUpdatesAreImmediate;
@@ -82,7 +83,7 @@
 	private List entitiesInAABB;
 	public boolean remoteWorld;
 
-	public ClimaticBiomeSource getBiomeSource() {
+	public ClimaticVoronoiBiomeSource getBiomeSource() {
 		return this.dimension.biomeSource;
 	}
 
@@ -242,7 +243,7 @@
 	protected void getInitialSpawnLocation() {
 		this.worldChunkLoadOverride = true;
 		int var1 = 0;
-		byte var2 = 64;
+		int var2 = 128;
 
 		int var3;
 		for(var3 = 0; !this.dimension.canCoordinateBeSpawn(var1, var3); var3 += this.rand.nextInt(64) - this.rand.nextInt(64)) {
@@ -255,7 +256,7 @@
 
 	public void setSpawnLocation() {
 		if(this.worldInfo.getSpawnY() <= 0) {
-			this.worldInfo.setSpawnY(64);
+			this.worldInfo.setSpawnY(128);
 		}
 
 		int var1 = this.worldInfo.getSpawnX();
@@ -336,7 +337,7 @@
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= SharedConstants.CHUNK_HEIGHT ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
 	}
 
 	public boolean isAirBlock(int var1, int var2, int var3) {
@@ -344,7 +345,7 @@
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 && var2 < SharedConstants.CHUNK_HEIGHT && this.chunkExists(var1 >> 4, var3 >> 4);
 	}
 
 	public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
@@ -352,7 +353,7 @@
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
+		if(var5 >= 0 && var2 < SharedConstants.CHUNK_HEIGHT) {
 			var1 >>= 4;
 			var2 >>= 4;
 			var3 >>= 4;
@@ -390,7 +391,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 				return false;
 			} else {
 				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -405,7 +406,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -425,7 +426,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 				return 0;
 			} else {
 				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -441,7 +442,7 @@
 	public void setBlockMetadataWithNotify(int var1, int var2, int var3, int var4) {
 		if(this.setBlockMetadata(var1, var2, var3, var4)) {
 			int var5 = this.getBlockId(var1, var2, var3);
-			if(Block.requiresSelfNotify[var5 & 255]) {
+			if(Block.requiresSelfNotify[var5]) {
 				this.notifyBlockChange(var1, var2, var3, var5);
 			} else {
 				this.notifyBlocksOfNeighborChange(var1, var2, var3, var5);
@@ -454,7 +455,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -549,8 +550,8 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			if(var2 >= 128) {
-				var2 = 127;
+			if(var2 >= SharedConstants.CHUNK_HEIGHT) {
+				var2 = SharedConstants.CHUNK_HEIGHT - 1;
 			}
 
 			return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightValue(var1 & 15, var2, var3 & 15, 0);
@@ -594,8 +595,8 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				if(var2 >= 128) {
-					var2 = 127;
+				if(var2 >= SharedConstants.CHUNK_HEIGHT) {
+					var2 = SharedConstants.CHUNK_HEIGHT - 1;
 				}
 
 				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -612,7 +613,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 				return true;
 			} else if(!this.chunkExists(var1 >> 4, var3 >> 4)) {
 				return false;
@@ -667,11 +668,11 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 128) {
-			var3 = 127;
+		if(var3 >= SharedConstants.CHUNK_HEIGHT) {
+			var3 = SharedConstants.CHUNK_HEIGHT - 1;
 		}
 
-		if(var3 >= 0 && var3 < 128 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
+		if(var3 >= 0 && var3 < SharedConstants.CHUNK_HEIGHT && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
@@ -688,7 +689,7 @@
 	public void setLightValue(LightType var1, int var2, int var3, int var4, int var5) {
 		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
 			if(var3 >= 0) {
-				if(var3 < 128) {
+				if(var3 < SharedConstants.CHUNK_HEIGHT) {
 					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
 						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
 						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
@@ -747,7 +748,7 @@
 					}
 				}
 
-				var11 = 200;
+				var11 = SharedConstants.CHUNK_HEIGHT + 64;
 
 				while(var11-- >= 0) {
 					if(Double.isNaN(var1.xCoord) || Double.isNaN(var1.yCoord) || Double.isNaN(var1.zCoord)) {
@@ -936,7 +937,7 @@
 		}
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
+	public void obtainEntitySkin(Entity var1) {
 		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
 			((WorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
 		}
@@ -1157,7 +1158,7 @@
 
 	public int getTopSolidOrLiquidBlock(int var1, int var2) {
 		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
+		int var4 = SharedConstants.CHUNK_HEIGHT - 1;
 		var1 &= 15;
 
 		for(var2 &= 15; var4 > 0; --var4) {
@@ -1173,7 +1174,7 @@
 
 	public int findTopSolidBlock(int var1, int var2) {
 		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
+		int var4 = SharedConstants.CHUNK_HEIGHT - 1;
 		var1 &= 15;
 
 		for(var2 &= 15; var4 > 0; --var4) {
@@ -1202,7 +1203,7 @@
 
 	public void scheduleUpdateTick(int var1, int var2, int var3, int var4, int var5) {
 		NextTickListEntry var6 = new NextTickListEntry(var1, var2, var3, var4);
-		byte var7 = 8;
+		int var7 = SharedConstants.CHUNK_HEIGHT / 16;
 		if(this.scheduledUpdatesAreImmediate) {
 			if(this.checkChunksExist(var6.xCoord - var7, var6.yCoord - var7, var6.zCoord - var7, var6.xCoord + var7, var6.yCoord + var7, var6.zCoord + var7)) {
 				int var8 = this.getBlockId(var6.xCoord, var6.yCoord, var6.zCoord);
@@ -1343,7 +1344,7 @@
 		int var3 = MathHelper.floor(var1.posX);
 		int var4 = MathHelper.floor(var1.posZ);
 		byte var5 = 32;
-		if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 128, var4 + var5)) {
+		if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, SharedConstants.CHUNK_HEIGHT, var4 + var5)) {
 			var1.lastTickPosX = var1.posX;
 			var1.lastTickPosY = var1.posY;
 			var1.lastTickPosZ = var1.posZ;
@@ -1771,40 +1772,46 @@
 			++lightingUpdatesScheduled;
 
 			try {
-				if(lightingUpdatesScheduled != 50) {
-					int var9 = (var5 + var2) / 2;
-					int var10 = (var7 + var4) / 2;
-					if(this.blockExists(var9, 64, var10)) {
-						if(!this.getChunkFromBlockCoords(var9, var10).isEmpty()) {
-							int var11 = this.lightingToUpdate.size();
-							int var12;
-							if(var8) {
-								var12 = 5;
-								if(var12 > var11) {
-									var12 = var11;
-								}
-
-								for(int var13 = 0; var13 < var12; ++var13) {
-									MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
-									if(var14.lightType == var1 && var14.merge(var2, var3, var4, var5, var6, var7)) {
-										return;
-									}
-								}
-							}
-
-							this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-							var12 = 1000000;
-							if(this.lightingToUpdate.size() > 1000000) {
-								System.out.println("More than " + var12 + " updates, aborting lighting updates");
-								this.lightingToUpdate.clear();
-							}
-
-						}
-					}
+				if(lightingUpdatesScheduled == 50) {
+					return;
+				}
+
+				int var9 = (var5 + var2) / 2;
+				int var10 = (var7 + var4) / 2;
+				if(this.blockExists(var9, 64, var10)) {
+					if(this.getChunkFromBlockCoords(var9, var10).isEmpty()) {
+						return;
+					}
+
+					int var11 = this.lightingToUpdate.size();
+					int var12;
+					if(var8) {
+						var12 = 5;
+						if(var12 > var11) {
+							var12 = var11;
+						}
+
+						for(int var13 = 0; var13 < var12; ++var13) {
+							MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
+							if(var14.lightType == var1 && var14.merge(var2, var3, var4, var5, var6, var7)) {
+								return;
+							}
+						}
+					}
+
+					this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
+					var12 = 1000000;
+					if(this.lightingToUpdate.size() > 1000000) {
+						System.out.println("More than " + var12 + " updates, aborting lighting updates");
+						this.lightingToUpdate.clear();
+					}
+
+					return;
 				}
 			} finally {
 				--lightingUpdatesScheduled;
 			}
+
 		}
 	}
 
@@ -1848,12 +1855,14 @@
 			}
 		}
 
-		var2 = this.worldInfo.getWorldTime() + 1L;
-		if(var2 % (long)this.autosavePeriod == 0L) {
-			this.saveWorld(false, (ProgressUpdate)null);
-		}
+		if(!SharedConstants.PANORAMA_SCREENSHOT_MODE) {
+			var2 = this.worldInfo.getWorldTime() + 1L;
+			if (var2 % (long) this.autosavePeriod == 0L) {
+				this.saveWorld(false, (ProgressUpdate) null);
+			}
 
-		this.worldInfo.setWorldTime(var2);
+			this.worldInfo.setWorldTime(var2);
+		}
 		this.tickUpdates(false);
 		this.updateBlocksAndPlayCaveSounds();
 	}
@@ -1894,7 +1903,7 @@
 				if(this.worldInfo.isRaining()) {
 					this.worldInfo.setRainTime(this.rand.nextInt(12000) + 12000);
 				} else {
-					this.worldInfo.setRainTime(this.rand.nextInt(168000) + 12000);
+					this.worldInfo.setRainTime(this.rand.nextInt(12000 * 4) + 12000);
 				}
 			} else {
 				--var2;
@@ -1983,7 +1992,7 @@
 				var6 = this.distHashCounter >> 2;
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
+				var9 = var6 >> 16 & 255;
 				var10 = var14.getBlockID(var7, var9, var8);
 				var7 += var3;
 				var8 += var4;
@@ -2015,7 +2024,7 @@
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(this.getBiomeSource().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 128 && var14.getSavedLightValue(LightType.BLOCK, var7, var9, var8) < 10) {
+				if(this.getBiomeSource().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < SharedConstants.CHUNK_HEIGHT && var14.getSavedLightValue(LightType.BLOCK, var7, var9, var8) < 10) {
 					var10 = var14.getBlockID(var7, var9 - 1, var8);
 					var15 = var14.getBlockID(var7, var9, var8);
 					if(this.canRain() && var15 == 0 && Block.snowLayer.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4) && var10 != 0 && var10 != Block.ice.blockID && Block.blocksList[var10].material.getIsSolid()) {
@@ -2028,13 +2037,13 @@
 				}
 			}
 
-			for(var6 = 0; var6 < 80; ++var6) {
+			for(var6 = 0; var6 < (80*2); ++var6) {
 				this.distHashCounter = this.distHashCounter * 3 + 1013904223;
 				var7 = this.distHashCounter >> 2;
 				var8 = var7 & 15;
 				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
-				var15 = var14.blocks[var8 << 11 | var9 << 7 | var10] & 255;
+				var10 = var7 >> 16 & 255;
+				var15 = var14.blocks[var8 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var9 << SharedConstants.CHUNK_BIT_OFFSET | var10];
 				if(Block.tickOnLoad[var15]) {
 					Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
 				}
@@ -2264,6 +2273,20 @@
 		return var11;
 	}
 
+	public PlayerEntity getClosestPlayer(double var1, double var5, double var7) {
+		double var9 = -1.0D;
+		PlayerEntity var11 = null;
+		for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
+			PlayerEntity var13 = (PlayerEntity)this.playerEntities.get(var12);
+			double var14 = var13.getDistanceSq(var1, var5);
+			if((var7 < 0.0D || var14 < var7 * var7) && (var9 == -1.0D || var14 < var9)) {
+				var9 = var14;
+				var11 = var13;
+			}
+		}
+		return var11;
+	}
+
 	public PlayerEntity getPlayerEntityByName(String var1) {
 		for(int var2 = 0; var2 < this.playerEntities.size(); ++var2) {
 			if(var1.equals(((PlayerEntity)this.playerEntities.get(var2)).username)) {
@@ -2275,7 +2298,7 @@
 	}
 
 	public byte[] getChunkData(int var1, int var2, int var3, int var4, int var5, int var6) {
-		byte[] var7 = new byte[var4 * var5 * var6 * 5 / 2];
+		byte[] var7 = new byte[var4 * var5 * var6 * 8 / 2];
 		int var8 = var1 >> 4;
 		int var9 = var3 >> 4;
 		int var10 = var1 + var4 - 1 >> 4;
@@ -2287,8 +2310,8 @@
 			var13 = 0;
 		}
 
-		if(var14 > 128) {
-			var14 = 128;
+		if(var14 > SharedConstants.CHUNK_HEIGHT) {
+			var14 = SharedConstants.CHUNK_HEIGHT;
 		}
 
 		for(int var15 = var8; var15 <= var10; ++var15) {
@@ -2332,8 +2355,8 @@
 			var13 = 0;
 		}
 
-		if(var14 > 128) {
-			var14 = 128;
+		if(var14 > SharedConstants.CHUNK_HEIGHT) {
+			var14 = SharedConstants.CHUNK_HEIGHT;
 		}
 
 		for(int var15 = var8; var15 <= var10; ++var15) {
@@ -2519,7 +2542,7 @@
 			}
 		}
 
-		this.clearWeather();
+		//this.clearWeather();
 	}
 
 	public boolean isAllPlayersFullyAsleep() {
@@ -2596,5 +2619,9 @@
 			((WorldAccess)this.worldAccesses.get(var7)).playAuxEffect(var1, var2, var3, var4, var5, var6);
 		}
 
+	}
+
+	public boolean isCreativeWorld() {
+		return this.worldInfo.isCreative();
 	}
 }
--- net/minecraft/game/world/save/SaveHandler.java
+++ net/minecraft/game/world/save/SaveHandler.java
@@ -5,7 +5,7 @@
 import net.minecraft.game.world.WorldInfo;
 import net.minecraft.game.world.chunk.loader.ChunkLoader;
 import net.minecraft.game.world.dimension.Dimension;
-import net.minecraft.server.PlayerDataHandler;
+import net.minecraft.server.MPPlayerDataHandler;
 
 public interface SaveHandler {
 	WorldInfo loadWorldInfo();
@@ -18,7 +18,7 @@
 
 	void saveWorldInfo(WorldInfo var1);
 
-	PlayerDataHandler getPlayerFileData();
+	MPPlayerDataHandler getPlayerFileData();
 
 	void flushCache();
 
--- net/minecraft/game/world/block/BedBlock.java
+++ net/minecraft/game/world/block/BedBlock.java
@@ -10,11 +10,13 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class BedBlock extends Block {
 	public static final int[][] headBlockToFootBlockMap = new int[][]{{0, 1}, {-1, 0}, {0, -1}, {1, 0}};
 
 	public BedBlock(int var1) {
-		super(var1, 134, Material.cloth);
+		super(var1, getAtlasTexture(29,4), Material.cloth);
 		this.setBounds();
 	}
 
@@ -95,7 +97,7 @@
 		} else {
 			int var3 = getDirectionFromMetadata(var2);
 			int var4 = ModelBed.bedDirection[var3][var1];
-			return isBlockFootOfBed(var2) ? (var4 == 2 ? this.textureIndex + 2 + 16 : (var4 != 5 && var4 != 4 ? this.textureIndex + 1 : this.textureIndex + 1 + 16)) : (var4 == 3 ? this.textureIndex - 1 + 16 : (var4 != 5 && var4 != 4 ? this.textureIndex : this.textureIndex + 16));
+			return isBlockFootOfBed(var2) ? (var4 == 2 ? this.textureIndex + 2 + 32 : (var4 != 5 && var4 != 4 ? this.textureIndex + 1 : this.textureIndex + 1 + 32)) : (var4 == 3 ? this.textureIndex - 1 + 32 : (var4 != 5 && var4 != 4 ? this.textureIndex : this.textureIndex + 32));
 		}
 	}
 
--- /dev/null
+++ net/minecraft/game/world/biome/categories/temperate_forest/ConiferousForest.java
@@ -1,0 +1,26 @@
+package net.minecraft.game.world.biome.categories.temperate_forest;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.BigTreeFeature;
+import net.minecraft.game.world.terrain.feature.BirchTreeFeature;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.SpruceTreeFeature;
+
+import java.util.Random;
+
+public class ConiferousForest extends Biome {
+    @Override
+    public int getTreeCount(int treeNoise, int treeBonus) {
+        return treeNoise + treeBonus + 5;
+    }
+
+    @Override
+    public Feature getRandomTreeFeature(Random var1) {
+        return new SpruceTreeFeature();
+    }
+
+    @Override
+    public int getFlowerCount() {
+        return 2;
+    }
+}
--- net/minecraft/game/world/terrain/feature/SpruceTreeFeature.java
+++ net/minecraft/game/world/terrain/feature/SpruceTreeFeature.java
@@ -3,6 +3,7 @@
 import java.util.Random;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 
 public class SpruceTreeFeature extends Feature {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
@@ -11,7 +12,7 @@
 		int var8 = var6 - var7;
 		int var9 = 2 + var2.nextInt(2);
 		boolean var10 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+		if(var4 >= 1 && var4 + var6 + 1 <= SharedConstants.CHUNK_HEIGHT) {
 			int var11;
 			int var13;
 			int var15;
@@ -26,7 +27,7 @@
 
 				for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
 					for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
-						if(var11 >= 0 && var11 < 128) {
+						if(var11 >= 0 && var11 < SharedConstants.CHUNK_HEIGHT) {
 							var15 = var1.getBlockId(var13, var11, var14);
 							if(var15 != 0 && var15 != Block.leaves.blockID) {
 								var10 = false;
@@ -42,7 +43,7 @@
 				return false;
 			} else {
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < SharedConstants.CHUNK_HEIGHT - var6 - 1) {
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 					var21 = var2.nextInt(2);
 					var13 = 1;
--- com/mojang/nbt/NBTBaseTag.java
+++ com/mojang/nbt/NBTBaseTag.java
@@ -66,6 +66,10 @@
 			return new ListTag();
 		case 10:
 			return new CompoundTag();
+		case 11:
+			return new IntArrayTag();
+		case 13:
+			return new ShortArrayTag();
 		default:
 			return null;
 		}
@@ -95,6 +99,10 @@
 			return "TAG_List";
 		case 10:
 			return "TAG_Compound";
+		case 11:
+			return "TAG_Int_Array";
+		case 13:
+			return "TAG_Short_Array";
 		default:
 			return "UNKNOWN";
 		}
--- net/minecraft/client/player/MovementInput.java
+++ net/minecraft/client/player/MovementInput.java
@@ -8,6 +8,7 @@
 	public boolean field_1177_c = false;
 	public boolean jump = false;
 	public boolean sneak = false;
+	public boolean sprint = false;
 
 	public void updatePlayerMoveState(PlayerEntity var1) {
 	}
--- net/minecraft/game/item/RedstoneItem.java
+++ net/minecraft/game/item/RedstoneItem.java
@@ -41,7 +41,8 @@
 		}
 
 		if(Block.redstoneWire.canPlaceBlockAt(var3, var4, var5, var6)) {
-			--var1.count;
+			if(!var3.isCreativeWorld())
+				--var1.count;
 			var3.setBlockWithNotify(var4, var5, var6, Block.redstoneWire.blockID);
 		}
 
--- net/minecraft/game/entity/player/PlayerEntity.java
+++ net/minecraft/game/entity/player/PlayerEntity.java
@@ -4,6 +4,8 @@
 import com.mojang.nbt.ListTag;
 import java.util.Iterator;
 import java.util.List;
+
+import net.minecraft.client.ThreadGetSkin;
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.LivingEntity;
 import net.minecraft.game.entity.animal.PigEntity;
@@ -48,7 +50,6 @@
 	public int swingProgressInt = 0;
 	public String username;
 	public int dimension;
-	public String playerCloakUrl;
 	public double posX2;
 	public double posY2;
 	public double posZ2;
@@ -69,10 +70,12 @@
 	public float prevTimeInPortal;
 	private int damageRemainder = 0;
 	public FishEntity fishEntity = null;
+	public boolean isSlim = false;
+	public int damageSprintRecover = 200;
 
 	public PlayerEntity(World var1) {
 		super(var1);
-		this.inventorySlots = new PlayerContainer(this.inventory, !var1.remoteWorld);
+		this.inventorySlots = var1.isCreativeWorld() ? new PlayerContainerCreative(this.inventory, !var1.remoteWorld) : new PlayerContainer(this.inventory, !var1.remoteWorld);
 		this.craftingInventory = this.inventorySlots;
 		this.yOffset = 1.62F;
 		BlockPos var2 = var1.getSpawnPoint();
@@ -166,8 +169,9 @@
 	}
 
 	public void updateCloak() {
-		this.playerCloakUrl = "http://s3.amazonaws.com/MinecraftCloaks/" + this.username + ".png";
-		this.cloakUrl = this.playerCloakUrl;
+		//this.playerCloakUrl = "http://s3.amazonaws.com/MinecraftCloaks/" + this.username + ".png";
+		//this.cloakUrl = this.playerCloakUrl;
+		(new ThreadGetSkin(this)).start();
 	}
 
 	public void updateRidden() {
@@ -203,6 +207,17 @@
 	}
 
 	public void onLivingUpdate() {
+		float runFactor = MathHelper.lerp(damageSprintRecover/200.0,0,0.5F);
+		if(damageSprintRecover < 200) {
+            if (damageSprintRecover < 140 || !isRunning()) {
+                damageSprintRecover++;
+            }
+        }
+		this.groundSpeedMultiplier = this.isRunning() ? 1.0F + runFactor : 1.0F;
+		this.airSpeedMultiplier = this.noClip
+				? this.isRunning() ? 7.5F : 2.5F
+				: this.isRunning() ? 1.0F + runFactor * 1.5F : 1.0F;
+
 		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 12 == 0) {
 			this.heal(1);
 		}
@@ -210,6 +225,20 @@
 		this.inventory.decrementAnimations();
 		this.prevRideThing = this.rideThing;
 		super.onLivingUpdate();
+
+		if (this.noClip) {
+			this.fallDistance = 0;
+			if (this.isSneaking() && this.isJumping) {
+				this.motionY = 0.0D;
+			} else if (this.isJumping) {
+				this.motionY = Math.min(this.motionY + 0.2D, this.isRunning() ? 0.7D : 0.4D);
+			} else if (this.isSneaking()) {
+				this.motionY = Math.max(this.motionY - 0.2D, this.isRunning() ? -0.7D : -0.4D);
+			} else {
+				this.motionY *= 0.6D;
+			}
+		}
+
 		float var1 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 		float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
 		if(var1 > 0.1F) {
@@ -240,6 +269,10 @@
 
 	}
 
+	public boolean isRunning() {
+		return false;
+	}
+
 	private void collideWithPlayer(Entity var1) {
 		var1.onCollideWithPlayer(this);
 	}
@@ -269,7 +302,7 @@
 		this.addStat(StatList.deathsStat, 1);
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
+	public void addEntityToPlayerScore(Entity var1, int var2) {
 		this.score += var2;
 		if(var1 instanceof PlayerEntity) {
 			this.addStat(StatList.playerKillsStat, 1);
@@ -279,6 +312,10 @@
 
 	}
 
+	public void addToPlayerScore(int var2) {
+		this.score += var2;
+	}
+
 	public void dropCurrentItem() {
 		this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
 	}
@@ -388,6 +425,7 @@
 	}
 
 	public boolean hurt(Entity var1, int var2) {
+		if(worldObj.isCreativeWorld()) return false;
 		this.age = 0;
 		if(this.health <= 0) {
 			return false;
@@ -423,6 +461,7 @@
 				}
 
 				this.addStat(StatList.damageTakenStat, var2);
+				damageSprintRecover = 0;
 				return super.hurt(var1, var2);
 			}
 		}
@@ -470,6 +509,7 @@
 	}
 
 	protected void damageEntity(int var1) {
+		if(worldObj.isCreativeWorld()) return;
 		int var2 = 25 - this.inventory.getTotalArmorValue();
 		int var3 = var1 * var2 + this.damageRemainder;
 		this.inventory.damageArmor(var1);
@@ -525,6 +565,15 @@
 				++var2;
 			}
 
+			if(var1 instanceof LivingEntity) {
+				if(((LivingEntity) var1).hurtTime == 0) {
+					this.damageSprintRecover -= 40;
+					if(this.damageSprintRecover < 0) {
+						this.damageSprintRecover = 0;
+					}
+				}
+			}
+
 			var1.hurt(this, var2);
 			ItemStack var3 = this.getCurrentEquippedItem();
 			if(var3 != null && var1 instanceof LivingEntity) {
@@ -539,7 +588,6 @@
 				if(var1.isEntityAlive()) {
 					this.alertWolves((LivingEntity)var1, true);
 				}
-
 				this.addStat(StatList.damageDealtStat, var2);
 			}
 		}
--- net/minecraft/network/packet/Packet.java
+++ net/minecraft/network/packet/Packet.java
@@ -187,6 +187,9 @@
 		addIdClassMapping(104, true, false, Packet104WindowItems.class);
 		addIdClassMapping(105, true, false, Packet105UpdateProgressbar.class);
 		addIdClassMapping(106, true, true, Packet106Transaction.class);
+		addIdClassMapping(107, false, true, Packet107CreativeSetSlot.class);
+		addIdClassMapping(108, false, true, Packet108NoClip.class);
+		addIdClassMapping(109, false, true, Packet109Craft.class);
 		addIdClassMapping(130, true, true, Packet130UpdateSign.class);
 		addIdClassMapping(131, true, false, Packet131MapData.class);
 		addIdClassMapping(200, true, false, Packet200Statistic.class);
--- net/minecraft/client/gui/stats/StatsSlot.java
+++ net/minecraft/client/gui/stats/StatsSlot.java
@@ -35,8 +35,8 @@
 		return false;
 	}
 
-	protected void drawBackground() {
-		this.field_27269_g.drawDefaultBackground();
+	protected void drawBackground(float delta) {
+		this.field_27269_g.drawDefaultBackground(delta);
 	}
 
 	protected void func_27260_a(int var1, int var2, Tessellator var3) {
--- /dev/null
+++ net/minecraft/network/packet/Packet108NoClip.java
@@ -1,0 +1,39 @@
+package net.minecraft.network.packet;
+
+import net.minecraft.network.NetHandler;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet108NoClip extends Packet {
+    public boolean noClip;
+
+    public Packet108NoClip() {
+
+    }
+
+    public Packet108NoClip(boolean noClip) {
+        this.noClip = noClip;
+    }
+
+    @Override
+    public void readPacketData(DataInputStream var1) throws IOException {
+        this.noClip = var1.readBoolean();
+    }
+
+    @Override
+    public void writePacketData(DataOutputStream var1) throws IOException {
+        var1.writeBoolean(this.noClip);
+    }
+
+    @Override
+    public void processPacket(NetHandler var1) {
+        var1.handleNoClip(this);
+    }
+
+    @Override
+    public int getPacketSize() {
+        return 1;
+    }
+}
--- net/minecraft/game/world/block/SlabBlock.java
+++ net/minecraft/game/world/block/SlabBlock.java
@@ -5,6 +5,8 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class SlabBlock extends Block {
 	public static final String[] slabNames = new String[]{"stone", "sand", "wood", "cobble"};
 	private boolean doubleSlab;
@@ -20,7 +22,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var2 == 0 ? (var1 <= 1 ? 6 : 5) : (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var2 == 2 ? 4 : (var2 == 3 ? 16 : 6)));
+		return var2 == 0 ? (var1 <= 1 ? getAtlasTexture(4,2) : getAtlasTexture(3,2)) : (var2 == 1 ? (var1 == 0 ? getAtlasTexture(9,1) : (var1 == 1 ? getAtlasTexture(7,1) : getAtlasTexture(8,1))) : (var2 == 2 ? getAtlasTexture(16,0) : (var2 == 3 ? getAtlasTexture(1,2) :getAtlasTexture(4,2))));
 	}
 
 	public int getBlockTextureFromSide(int var1) {
--- net/minecraft/client/ImageBufferDownload.java
+++ net/minecraft/client/ImageBufferDownload.java
@@ -15,16 +15,32 @@
 			return null;
 		} else {
 			this.imageWidth = 64;
-			this.imageHeight = 32;
-			BufferedImage var2 = new BufferedImage(this.imageWidth, this.imageHeight, 2);
-			Graphics var3 = var2.getGraphics();
-			var3.drawImage(var1, 0, 0, (ImageObserver)null);
-			var3.dispose();
-			this.imageData = ((DataBufferInt)var2.getRaster().getDataBuffer()).getData();
+			this.imageHeight = 64;
+			BufferedImage buffer = new BufferedImage(this.imageWidth, this.imageHeight, 2);
+			Graphics g = buffer.getGraphics();
+			g.drawImage(var1, 0, 0, (ImageObserver)null);
+
+			if (var1.getHeight() == 32) {
+				g.drawImage(buffer, 24, 48, 20, 52, 4, 16, 8, 20, (ImageObserver)null);
+				g.drawImage(buffer, 28, 48, 24, 52, 8, 16, 12, 20, (ImageObserver)null);
+				g.drawImage(buffer, 20, 52, 16, 64, 8, 20, 12, 32, (ImageObserver)null);
+				g.drawImage(buffer, 24, 52, 20, 64, 4, 20, 8, 32, (ImageObserver)null);
+				g.drawImage(buffer, 28, 52, 24, 64, 0, 20, 4, 32, (ImageObserver)null);
+				g.drawImage(buffer, 32, 52, 28, 64, 12, 20, 16, 32, (ImageObserver)null);
+				g.drawImage(buffer, 40, 48, 36, 52, 44, 16, 48, 20, (ImageObserver)null);
+				g.drawImage(buffer, 44, 48, 40, 52, 48, 16, 52, 20, (ImageObserver)null);
+				g.drawImage(buffer, 36, 52, 32, 64, 48, 20, 52, 32, (ImageObserver)null);
+				g.drawImage(buffer, 40, 52, 36, 64, 44, 20, 48, 32, (ImageObserver)null);
+				g.drawImage(buffer, 44, 52, 40, 64, 40, 20, 44, 32, (ImageObserver)null);
+				g.drawImage(buffer, 48, 52, 44, 64, 52, 20, 56, 32, (ImageObserver)null);
+			}
+
+			g.dispose();
+			this.imageData = ((DataBufferInt)buffer.getRaster().getDataBuffer()).getData();
 			this.func_884_b(0, 0, 32, 16);
-			this.func_885_a(32, 0, 64, 32);
-			this.func_884_b(0, 16, 64, 32);
-			boolean var4 = false;
+			this.func_885_a(32, 0, 64, 64);
+			this.func_884_b(0, 16, 64, 64);
+			/*boolean var4 = false;
 
 			int var5;
 			int var6;
@@ -47,9 +63,16 @@
 						}
 					}
 				}
-			}
+			}*/
+			this.func_885_a(0, 32, 16, 48);
+			this.func_885_a(16, 32, 40, 48);
+			this.func_885_a(40, 32, 56, 48);
+			this.func_885_a(0, 48, 16, 64);
+			this.func_884_b(16, 48, 48, 64);
+			this.func_885_a(48, 48, 64, 64);
+			return buffer;
 
-			return var2;
+			//return var2;
 		}
 	}
 
--- net/minecraft/game/world/block/LiquidBlock.java
+++ net/minecraft/game/world/block/LiquidBlock.java
@@ -10,7 +10,8 @@
 
 public abstract class LiquidBlock extends Block {
 	protected LiquidBlock(int var1, Material var2) {
-		super(var1, (var2 == Material.lava ? 14 : 12) * 16 + 13, var2);
+		//super(var1, (var2 == Material.lava ? 14 : 12) * 16 + 13, var2);
+		super(var1, (var2 == Material.lava ? 30 : 28) * 32 + 29, var2);
 		float var3 = 0.0F;
 		float var4 = 0.0F;
 		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
--- net/minecraft/client/render/entity/RenderFish.java
+++ net/minecraft/client/render/entity/RenderFish.java
@@ -50,7 +50,7 @@
 			double var28 = var1.angler.prevPosX + (var1.angler.posX - var1.angler.prevPosX) * (double)var9 + var27.xCoord;
 			double var30 = var1.angler.prevPosY + (var1.angler.posY - var1.angler.prevPosY) * (double)var9 + var27.yCoord;
 			double var32 = var1.angler.prevPosZ + (var1.angler.posZ - var1.angler.prevPosZ) * (double)var9 + var27.zCoord;
-			if(this.renderManager.options.thirdPersonView) {
+			if(this.renderManager.options.thirdPersonView > 0) {
 				var20 = (var1.angler.prevRenderYawOffset + (var1.angler.renderYawOffset - var1.angler.prevRenderYawOffset) * var9) * (float)Math.PI / 180.0F;
 				var21 = (double)MathHelper.sin(var20);
 				var23 = (double)MathHelper.cos(var20);
--- /dev/null
+++ net/minecraft/game/item/PlanksItem.java
@@ -1,0 +1,27 @@
+package net.minecraft.game.item;
+
+import net.minecraft.game.world.block.Block;
+
+import static net.minecraft.game.world.block.PlanksBlock.getPlankColor;
+
+public class PlanksItem extends BlockItem {
+    public PlanksItem(int var1) {
+        super(var1);
+        this.setMaxDamage(0);
+        this.setHasSubtypes(true);
+    }
+
+    public int getPlacedBlockMetadata(int var1) {
+        return var1;
+    }
+
+    public int getTextureFromDamage(int var1) {
+        return Block.planks.getBlockTextureFromSideAndMetadata(0, var1);
+    }
+
+    public int getColorFromDamage(int var1) {
+        if(var1 == 0)
+            return 16777215;
+        return getPlankColor(DyeItem.dyeColors[var1-1]);
+    }
+}
--- net/minecraft/game/world/biome/DesertBiome.java
+++ /dev/null
@@ -1,4 +1,0 @@
-package net.minecraft.game.world.biome;
-
-public class DesertBiome extends Biome {
-}
--- net/minecraft/client/MinecraftAppletImpl.java
+++ net/minecraft/client/MinecraftAppletImpl.java
@@ -1,21 +1,118 @@
 package net.minecraft.client;
 
-import java.awt.BorderLayout;
-import java.awt.Canvas;
-import java.awt.Component;
+import net.minecraft.client.gui.ScaledResolution;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+
+import java.awt.*;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+
+// Modified it to not use AWT stuff, should help with compatibility
 
 public class MinecraftAppletImpl extends Minecraft {
-	final MinecraftApplet mainFrame;
+	private final int previousWidth;
+	private final int previousHeight;
+	private final Frame awtFrame;
 
 	public MinecraftAppletImpl(MinecraftApplet var1, Component var2, Canvas var3, MinecraftApplet var4, int var5, int var6, boolean var7) {
 		super(var2, var3, var4, var5, var6, var7);
-		this.mainFrame = var1;
-	}
-
-	public void displayUnexpectedThrowable(UnexpectedThrowable var1) {
-		this.mainFrame.removeAll();
-		this.mainFrame.setLayout(new BorderLayout());
-		this.mainFrame.add(new PanelCrashReport(var1), "Center");
-		this.mainFrame.validate();
+		this.previousWidth = var5;
+		this.previousHeight = var6;
+		this.awtFrame = new Frame("Minecraft");
+	}
+
+	public void displayUnexpectedThrowable(UnexpectedThrowable crashSummary) {
+		this.awtFrame.removeAll();
+		this.awtFrame.add(new PanelCrashReport(crashSummary), "Center");
+		this.awtFrame.validate();
+		this.awtFrame.setSize(this.displayWidth, this.displayHeight);
+		this.awtFrame.setLocationRelativeTo(null);
+		this.awtFrame.setAutoRequestFocus(true);
+		this.awtFrame.addWindowListener(new WindowAdapter() {
+											public void windowClosing(WindowEvent we) {
+												awtFrame.dispose();
+												System.exit(1);
+											}
+										}
+		);
+		this.awtFrame.setVisible(true);
+
+	}
+
+	@Override
+	public void runTick() {
+		if (GL11.glGetString(GL11.GL_RENDERER).contains("Apple M")) {
+			GL11.glEnable(GL30.GL_FRAMEBUFFER_SRGB);
+		}
+		if (Display.getWidth() != this.displayWidth || Display.getHeight() != this.displayHeight) {
+			this.onResolutionChanged(Display.getWidth(), Display.getHeight());
+		}
+
+		super.runTick();
+	}
+
+	@Override
+	public void toggleFullscreen() {
+		final Object fullscreen_b;
+		boolean isFullscreen;
+		try {
+			fullscreen_b = this.getClass().getDeclaredField("fullscreen").get(this);
+			isFullscreen = (boolean) fullscreen_b;
+		} catch (NoSuchFieldException | IllegalAccessException ignore) {
+			isFullscreen = Display.isFullscreen();
+		}
+		try {
+			isFullscreen = !isFullscreen;
+			if (isFullscreen) {
+				this.displayWidth = Display.getWidth();
+				this.displayHeight = Display.getHeight();
+
+				Display.setDisplayMode(Display.getDesktopDisplayMode());
+				this.displayWidth = Display.getDisplayMode().getWidth();
+				this.displayHeight = Display.getDisplayMode().getHeight();
+			} else {
+				this.displayWidth = this.previousWidth;
+				this.displayHeight = this.previousHeight;
+				Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
+			}
+			if (this.displayWidth <= 0) {
+				this.displayWidth = 1;
+			}
+			if (this.displayHeight <= 0) {
+				this.displayHeight = 1;
+			}
+
+			if (this.currentScreen != null) {
+				this.onResolutionChanged(this.displayWidth, this.displayHeight);
+			}
+
+			Display.setFullscreen(isFullscreen);
+			Display.update();
+		} catch (Exception ignored) {}
+
+		try {
+			this.getClass().getDeclaredField("fullscreen").set(this, isFullscreen);
+		} catch (NoSuchFieldException | IllegalAccessException ignore) {
+		}
+	}
+
+	private void onResolutionChanged(int w, int h) {
+		if (w <= 0) {
+			w = 1;
+		}
+		if (h <= 0) {
+			h = 1;
+		}
+		this.displayWidth = w;
+		this.displayHeight = h;
+		if (this.currentScreen != null) {
+			ScaledResolution scaled = new ScaledResolution(this.gameSettings, w, h);
+			int scaledWidth = scaled.getScaledWidth();
+			int scaledHeight = scaled.getScaledHeight();
+			this.currentScreen.setWorldAndResolution(this, scaledWidth, scaledHeight);
+		}
 	}
 }
--- net/minecraft/network/packet/Packet1Login.java
+++ net/minecraft/network/packet/Packet1Login.java
@@ -10,6 +10,7 @@
 	public String username;
 	public long mapSeed;
 	public byte dimension;
+	public boolean creative;
 
 	public Packet1Login() {
 	}
@@ -24,6 +25,7 @@
 		this.username = readString(var1, 16);
 		this.mapSeed = var1.readLong();
 		this.dimension = var1.readByte();
+		this.creative = var1.readBoolean();
 	}
 
 	public void writePacketData(DataOutputStream var1) throws IOException {
@@ -31,6 +33,7 @@
 		writeString(this.username, var1);
 		var1.writeLong(this.mapSeed);
 		var1.writeByte(this.dimension);
+		var1.writeBoolean(this.creative);
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -38,13 +41,14 @@
 	}
 
 	public int getPacketSize() {
-		return 4 + this.username.length() + 4 + 5;
+		return 4 + this.username.length() + 4 + 5 + 1;
 	}
 
-	public Packet1Login(String var1, int var2, long var3, byte var5) {
+	public Packet1Login(String var1, int var2, long var3, byte var5, boolean var6) {
 		this.username = var1;
 		this.protocolVersion = var2;
 		this.mapSeed = var3;
 		this.dimension = var5;
+		this.creative = var6;
 	}
 }
--- /dev/null
+++ net/minecraft/client/render/texture/TextureAxleFX.java
@@ -1,0 +1,60 @@
+package net.minecraft.client.render.texture;
+
+import net.minecraft.client.Minecraft;
+
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
+public class TextureAxleFX extends TextureFX {
+    private Minecraft mc;
+    private int[] axle = new int[256];
+    private boolean vertical;
+    private int shift = 0;
+    private int updateDelay = 2;
+
+    public TextureAxleFX(Minecraft var1, boolean vertical) {
+        super(getAtlasTexture(27,6));
+        this.mc = var1;
+        this.tileImage = 0;
+        this.vertical = vertical;
+        try {
+            BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/terrain.png"));
+            int var3 = this.iconIndex % 32 * 16;
+            int var4 = this.iconIndex / 32 * 16;
+            var2.getRGB(var3, var4, 16, 16, this.axle, 0, 16);
+        } catch (IOException var5) {
+            var5.printStackTrace();
+        }
+    }
+
+    public void onTick() {
+        if(updateDelay <= 0) {
+            shift = Math.floorMod((shift + 1),16);
+            for (int index = 0; index < 16; index++) {
+                for (int pixel = 0; pixel < 16; pixel++) {
+                    int shiftedIndex = (index + shift) % 16;
+                    int shiftedPixel = (pixel + shift) % 16;
+                    int i;
+                    if (vertical) {
+                        i = (shiftedIndex * 16) + pixel;
+                    } else {
+                        i = (index * 16) + shiftedPixel;
+                        //i = 0;
+                    }
+                    int v = axle[i];
+                    int f = (index * 16) + pixel;
+                    this.imageData[f * 4 + 0] = (byte) ((v >> 16) & 0xFF);
+                    this.imageData[f * 4 + 1] = (byte) ((v >> 8) & 0xFF);
+                    this.imageData[f * 4 + 2] = (byte) (v & 0xFF);
+                    this.imageData[f * 4 + 3] = (byte) 0xff;
+                }
+            }
+            updateDelay = 2;
+        } else {
+            updateDelay--;
+        }
+    }
+}
--- net/minecraft/game/world/terrain/feature/OreFeature.java
+++ net/minecraft/game/world/terrain/feature/OreFeature.java
@@ -8,10 +8,12 @@
 public class OreFeature extends Feature {
 	private int blockId;
 	private int size;
+	private boolean multiVariant;
 
-	public OreFeature(int var1, int var2) {
+	public OreFeature(int var1, int var2, boolean multiVariant) {
 		this.blockId = var1;
 		this.size = var2;
+		this.multiVariant = multiVariant;
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
@@ -45,8 +47,16 @@
 						if(var39 * var39 + var42 * var42 < 1.0D) {
 							for(int var44 = var34; var44 <= var37; ++var44) {
 								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
-								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D && var1.getBlockId(var38, var41, var44) == Block.stone.blockID) {
-									var1.setBlock(var38, var41, var44, this.blockId);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D) {
+									if (var1.getBlockId(var38, var41, var44) == Block.stone.blockID) {
+										var1.setBlock(var38, var41, var44, this.blockId);
+									} else if(multiVariant) {
+										if(var1.getBlockId(var38, var41, var44) == Block.limestone.blockID) {
+											var1.setBlockAndMetadata(var38,var41,var44,this.blockId,1);
+										} else if(var1.getBlockId(var38, var41, var44) == Block.granite.blockID) {
+											var1.setBlockAndMetadata(var38,var41,var44,this.blockId,2);
+										}
+									}
 								}
 							}
 						}
--- net/minecraft/game/item/slot/Slot.java
+++ net/minecraft/game/item/slot/Slot.java
@@ -57,4 +57,8 @@
 	public boolean isHere(Inventory var1, int var2) {
 		return var1 == this.inventory && var2 == this.slotIndex;
 	}
+
+	public boolean isVisible() {
+		return true;
+	}
 }
--- net/minecraft/game/item/recipe/RecipesWeapons.java
+++ net/minecraft/game/item/recipe/RecipesWeapons.java
@@ -9,7 +9,7 @@
 	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ironIngot, Item.diamond, Item.goldIngot}, {Item.woodSword, Item.stoneSword, Item.ironSword, Item.diamondSword, Item.goldSword}};
 
 	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
+		/*for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
 			Object var3 = this.recipeItems[0][var2];
 
 			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
@@ -19,6 +19,6 @@
 		}
 
 		var1.addRecipe(new ItemStack(Item.bow, 1), new Object[]{" #X", "# X", " #X", Character.valueOf('X'), Item.string, Character.valueOf('#'), Item.stick});
-		var1.addRecipe(new ItemStack(Item.arrow, 4), new Object[]{"X", "#", "Y", Character.valueOf('Y'), Item.feather, Character.valueOf('X'), Item.flint, Character.valueOf('#'), Item.stick});
+		var1.addRecipe(new ItemStack(Item.arrow, 4), new Object[]{"X", "#", "Y", Character.valueOf('Y'), Item.feather, Character.valueOf('X'), Item.flint, Character.valueOf('#'), Item.stick});*/
 	}
 }
--- net/minecraft/game/entity/monster/PigZombieEntity.java
+++ net/minecraft/game/entity/monster/PigZombieEntity.java
@@ -19,6 +19,7 @@
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 5;
 		this.isImmuneToFire = true;
+		this.scoreValue = 10;
 	}
 
 	public void onUpdate() {
--- /dev/null
+++ net/minecraft/game/world/biome/categories/temperate/Grasslands.java
@@ -1,0 +1,26 @@
+package net.minecraft.game.world.biome.categories.temperate;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.BigTreeFeature;
+import net.minecraft.game.world.terrain.feature.BirchTreeFeature;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.TreeFeature;
+
+import java.util.Random;
+
+public class Grasslands extends Biome {
+    @Override
+    public int getTreeCount(int treeNoise, int treeBonus) {
+        return treeBonus;
+    }
+
+    @Override
+    public Feature getRandomTreeFeature(Random var1) {
+        return new TreeFeature();
+    }
+
+    @Override
+    public int getFlowerCount() {
+        return 3;
+    }
+}
--- net/minecraft/client/model/BipedModel.java
+++ net/minecraft/client/model/BipedModel.java
@@ -29,29 +29,47 @@
 		this.field_1278_i = false;
 		this.isSneak = false;
 		this.bipedCloak = new ModelRenderer(0, 0);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedCloak.textureHeight = 64;
 		this.bipedCloak.addBox(-5.0F, 0.0F, -1.0F, 10, 16, 1, var1);
 		this.bipedEars = new ModelRenderer(24, 0);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedEars.textureHeight = 64;
 		this.bipedEars.addBox(-3.0F, -6.0F, -1.0F, 6, 6, 1, var1);
 		this.bipedHead = new ModelRenderer(0, 0);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedHead.textureHeight = 64;
 		this.bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1);
 		this.bipedHead.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
 		this.bipedHeadwear = new ModelRenderer(32, 0);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedHeadwear.textureHeight = 64;
 		this.bipedHeadwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1 + 0.5F);
 		this.bipedHeadwear.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
 		this.bipedBody = new ModelRenderer(16, 16);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedBody.textureHeight = 64;
 		this.bipedBody.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, var1);
 		this.bipedBody.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
 		this.bipedRightArm = new ModelRenderer(40, 16);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedRightArm.textureHeight = 64;
 		this.bipedRightArm.addBox(-3.0F, -2.0F, -2.0F, 4, 12, 4, var1);
 		this.bipedRightArm.setRotationPoint(-5.0F, 2.0F + var2, 0.0F);
 		this.bipedLeftArm = new ModelRenderer(40, 16);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedLeftArm.textureHeight = 64;
 		this.bipedLeftArm.mirror = true;
 		this.bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, var1);
 		this.bipedLeftArm.setRotationPoint(5.0F, 2.0F + var2, 0.0F);
 		this.bipedRightLeg = new ModelRenderer(0, 16);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedRightLeg.textureHeight = 64;
 		this.bipedRightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, var1);
 		this.bipedRightLeg.setRotationPoint(-2.0F, 12.0F + var2, 0.0F);
 		this.bipedLeftLeg = new ModelRenderer(0, 16);
+		if (((Object)this) instanceof PlayerModel)
+			this.bipedLeftLeg.textureHeight = 64;
 		this.bipedLeftLeg.mirror = true;
 		this.bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, var1);
 		this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F + var2, 0.0F);
--- net/minecraft/game/world/dimension/Dimension.java
+++ net/minecraft/game/world/dimension/Dimension.java
@@ -2,15 +2,16 @@
 
 import net.minecraft.game.physics.Vec3D;
 import net.minecraft.game.world.World;
-import net.minecraft.game.world.biome.ClimaticBiomeSource;
+import net.minecraft.game.world.biome.ClimaticVoronoiBiomeSource;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.chunk.ChunkProvider;
 import net.minecraft.game.world.terrain.OverworldChunkProvider;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 
 public abstract class Dimension {
 	public World worldObj;
-	public ClimaticBiomeSource biomeSource;
+	public ClimaticVoronoiBiomeSource biomeSource;
 	public boolean isNether = false;
 	public boolean isHellWorld = false;
 	public boolean hasNoSky = false;
@@ -35,7 +36,7 @@
 	}
 
 	protected void registerWorldChunkManager() {
-		this.biomeSource = new ClimaticBiomeSource(this.worldObj);
+		this.biomeSource = new ClimaticVoronoiBiomeSource(this.worldObj);
 	}
 
 	public ChunkProvider getChunkProvider() {
@@ -44,7 +45,8 @@
 
 	public boolean canCoordinateBeSpawn(int var1, int var2) {
 		int var3 = this.worldObj.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.sand.blockID;
+		//return var3 == Block.sand.blockID;
+		return var3 != 0;
 	}
 
 	public float calculateCelestialAngle(long var1, float var3) {
@@ -110,7 +112,7 @@
 	}
 
 	public float getCloudHeight() {
-		return 108.0F;
+		return SharedConstants.CHUNK_HEIGHT - 20;
 	}
 
 	public boolean canSleep() {
--- net/minecraft/client/sound/SoundManager.java
+++ net/minecraft/client/sound/SoundManager.java
@@ -3,6 +3,7 @@
 import java.io.File;
 import java.util.Random;
 import net.minecraft.client.GameSettings;
+import net.minecraft.client.ThreadDownloadResources;
 import net.minecraft.game.entity.LivingEntity;
 import net.minecraft.util.MathHelper;
 import paulscode.sound.SoundSystem;
@@ -12,10 +13,12 @@
 import paulscode.sound.libraries.LibraryLWJGLOpenAL;
 
 public class SoundManager {
-	private static SoundSystem sndSystem;
+	public static SoundSystem sndSystem;
 	private SoundPool soundPoolSounds = new SoundPool();
 	private SoundPool soundPoolStreaming = new SoundPool();
 	private SoundPool soundPoolMusic = new SoundPool();
+	public SoundPool soundPoolCreativeMusic = new SoundPool();
+	public SoundPool soundPoolTitleMusic = new SoundPool();
 	private int field_587_e = 0;
 	private GameSettings options;
 	private static boolean loaded = false;
@@ -62,8 +65,10 @@
 		if(loaded) {
 			if(this.options.musicVolume == 0.0F) {
 				sndSystem.stop("BgMusic");
+				sndSystem.stop("TitleMusic");
 			} else {
 				sndSystem.setVolume("BgMusic", this.options.musicVolume);
+				sndSystem.setVolume("TitleMusic", this.options.musicVolume);
 			}
 		}
 
@@ -88,15 +93,15 @@
 		this.soundPoolMusic.addSound(var1, var2);
 	}
 
-	public void playRandomMusicIfReady() {
+	public void playRandomMusicIfReady(boolean creative) {
 		if(loaded && this.options.musicVolume != 0.0F) {
 			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
-				if(this.ticksBeforeMusic > 0) {
+				/*if(this.ticksBeforeMusic > 0) {
 					--this.ticksBeforeMusic;
 					return;
-				}
+				}*/
 
-				SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
+				SoundPoolEntry var1 = creative && this.rand.nextInt(4) != 0 ? this.soundPoolCreativeMusic.getRandomSound() : this.soundPoolMusic.getRandomSound();
 				if(var1 != null) {
 					this.ticksBeforeMusic = this.rand.nextInt(12000) + 12000;
 					sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
@@ -106,6 +111,26 @@
 			}
 
 		}
+	}
+
+	public boolean playMenuMusic() {
+		if(loaded && ThreadDownloadResources.titleMusicReady && this.options.musicVolume != 0.0F) {
+			if(sndSystem.playing("BgMusic")) {
+				sndSystem.stop("BgMusic");
+			}
+			if(!sndSystem.playing("TitleMusic")) {
+				SoundPoolEntry var1 = this.soundPoolTitleMusic.getRandomSound();
+				if (var1 != null) {
+					sndSystem.backgroundMusic("TitleMusic", var1.soundUrl, var1.soundName, false);
+					sndSystem.setVolume("TitleMusic", this.options.musicVolume);
+					sndSystem.play("TitleMusic");
+					return true;
+				} else {
+					return false;
+				}
+			}
+		}
+		return false;
 	}
 
 	public void func_338_a(LivingEntity var1, float var2) {
--- net/minecraft/game/world/biome/Biome.java
+++ net/minecraft/game/world/biome/Biome.java
@@ -16,30 +16,56 @@
 import net.minecraft.game.entity.monster.SpiderEntity;
 import net.minecraft.game.entity.monster.ZombieEntity;
 import net.minecraft.game.world.SpawnListEntry;
+import net.minecraft.game.world.biome.categories.cold_forest.Taiga;
+import net.minecraft.game.world.biome.categories.hot.Desert;
+import net.minecraft.game.world.biome.categories.temperate.Grasslands;
+import net.minecraft.game.world.biome.categories.temperate_forest.ConiferousForest;
+import net.minecraft.game.world.biome.categories.temperate_forest.NostalgicWoodlands;
+import net.minecraft.game.world.biome.categories.temperate_forest.SeasonalWoods;
+import net.minecraft.game.world.biome.categories.tropical.SwamplandBiome;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.terrain.feature.BigTreeFeature;
 import net.minecraft.game.world.terrain.feature.Feature;
 import net.minecraft.game.world.terrain.feature.TreeFeature;
 
 public class Biome {
-	public static final Biome rainforest = (new RainforestBiome()).setMapColor(588342).setName("Rainforest").setUnusedFoliageColor(2094168);
-	public static final Biome swampland = (new SwamplandBiome()).setMapColor(522674).setName("Swampland").setUnusedFoliageColor(9154376);
+	/*public static final Biome rainforest = (new RainforestBiome()).setMapColor(588342).setName("Rainforest").setFoliageColor(2094168);
+	public static final Biome swampland = (new SwamplandBiome()).setMapColor(522674).setName("Swampland").setFoliageColor(9154376);
 	public static final Biome seasonalForest = (new Biome()).setMapColor(10215459).setName("Seasonal Forest");
-	public static final Biome forest = (new ForestBiome()).setMapColor(353825).setName("Forest").setUnusedFoliageColor(5159473);
+	public static final Biome forest = (new ForestBiome()).setMapColor(353825).setName("Forest").setFoliageColor(5159473);
 	public static final Biome savanna = (new DesertBiome()).setMapColor(14278691).setName("Savanna");
 	public static final Biome shrubland = (new Biome()).setMapColor(10595616).setName("Shrubland");
-	public static final Biome taiga = (new TaigaBiome()).setMapColor(3060051).setName("Taiga").enableSnow().setUnusedFoliageColor(8107825);
-	public static final Biome desert = (new DesertBiome()).setMapColor(16421912).setName("Desert").disablePrecipitation();
+
+
 	public static final Biome plains = (new DesertBiome()).setMapColor(16767248).setName("Plains");
-	public static final Biome iceDesert = (new DesertBiome()).setMapColor(16772499).setName("Ice Desert").enableSnow().disablePrecipitation().setUnusedFoliageColor(12899129);
-	public static final Biome tundra = (new Biome()).setMapColor(5762041).setName("Tundra").enableSnow().setFoliageColor(12899129);
+	public static final Biome iceDesert = (new DesertBiome()).setMapColor(16772499).setName("Ice Desert").enableSnow().disablePrecipitation().setFoliageColor(12899129);
+	public static final Biome tundra = (new Biome()).setMapColor(5762041).setName("Tundra").enableSnow().setFoliageColor(12899129);*/
 	public static final Biome nether = (new NetherBiome()).setMapColor(16711680).setName("Hell").disablePrecipitation();
 	public static final Biome sky = (new SkyBiome()).setMapColor(8421631).setName("Sky").disablePrecipitation();
+
+	// BIOME LIST
+	public static final Biome seasonalWoods = (new SeasonalWoods()).setFoliageColor(0x4dd97f).setName("Seasonal Woods").setMapColor(0x4dd97f);
+	public static final Biome grasslands = (new Grasslands()).setFoliageColor(0x77b74d).setName("Grasslands").setMapColor(0x77b74d);
+	public static final Biome nostalgicWoodlands = (new NostalgicWoodlands()).setFoliageColor(0x9dff5c).setName("Nostalgic Woodlands").setMapColor(0x9dff5c);
+	public static final Biome coniferousForest = (new ConiferousForest()).setFoliageColor(0x2bc576).setName("Coniferous Forest").setMapColor(0x2bc576);
+	public static final Biome taiga = (new Taiga()).setMapColor(3060051).setName("Taiga").enableSnow().setFoliageColor(3060051);
+	public static final Biome desert = (new Desert()).setMapColor(16421912).setName("Desert").disablePrecipitation();
+	public static final Biome swamp = (new SwamplandBiome()).setMapColor(0x446032).setFoliageColor(0x446032).setName("Swampland");
+	// BIOME LIST END
+
+	public static final Biome[] categoryCold = new Biome[]{taiga};
+	public static final Biome[] categoryColdForest = new Biome[]{taiga};
+	public static final Biome[] categoryTemperate = new Biome[]{grasslands};
+	public static final Biome[] categoryTemperateForest = new Biome[]{seasonalWoods,seasonalWoods,coniferousForest,nostalgicWoodlands};
+	public static final Biome[] categoryHot = new Biome[]{desert};
+	public static final Biome[] categoryHotForest = new Biome[]{grasslands};
+	public static final Biome[] categoryTropical = new Biome[]{swamp};
+
 	public String name;
 	public int mapColor;
-	public byte topBlock = (byte)Block.grass.blockID;
-	public byte fillerBlock = (byte)Block.dirt.blockID;
-	public int unusedFoliageColor = 5169201;
+	public int topBlock = Block.grass.blockID;
+	public int fillerBlock = Block.dirt.blockID;
+	public int foliageColor = 5169201;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
 	protected List spawnableWaterCreatureList = new ArrayList();
@@ -66,14 +92,14 @@
 	}
 
 	public static void generateBiomeLookup() {
-		for(int var0 = 0; var0 < 64; ++var0) {
+		/*for(int var0 = 0; var0 < 64; ++var0) {
 			for(int var1 = 0; var1 < 64; ++var1) {
 				biomeLookupTable[var0 + var1 * 64] = getBiome((float)var0 / 63.0F, (float)var1 / 63.0F);
 			}
-		}
+		}*/
 
-		desert.topBlock = desert.fillerBlock = (byte)Block.sand.blockID;
-		iceDesert.topBlock = iceDesert.fillerBlock = (byte)Block.sand.blockID;
+		//desert.topBlock = desert.fillerBlock = (byte)Block.sand.blockID;
+		//iceDesert.topBlock = iceDesert.fillerBlock = (byte)Block.sand.blockID;
 	}
 
 	public Feature getRandomTreeFeature(Random var1) {
@@ -90,9 +116,13 @@
 		return this;
 	}
 
-	protected Biome setUnusedFoliageColor(int var1) {
-		this.unusedFoliageColor = var1;
+	protected Biome setFoliageColor(int var1) {
+		this.foliageColor = var1;
 		return this;
+	}
+
+	public int getFoliageColor() {
+		return foliageColor;
 	}
 
 	protected Biome setMapColor(int var1) {
@@ -100,16 +130,22 @@
 		return this;
 	}
 
-	public static Biome getBiomeFromLookup(double var0, double var2) {
-		int var4 = (int)(var0 * 63.0D);
+	//public static Biome getBiomeFromLookup(double var0, double var2) {
+		/*int var4 = (int)(var0 * 63.0D);
 		int var5 = (int)(var2 * 63.0D);
-		return biomeLookupTable[var4 + var5 * 64];
-	}
+		return biomeLookupTable[var4 + var5 * 64];*/
+		//return getBiome((float)var0,(float)var2);
+	//}
 
-	public static Biome getBiome(float var0, float var1) {
+	public static Biome[] getBiomeCategory(float var0, float var1) {
 		var1 *= var0;
-		return var0 < 0.1F ? tundra : (var1 < 0.2F ? (var0 < 0.5F ? tundra : (var0 < 0.95F ? savanna : desert)) : (var1 > 0.5F && var0 < 0.7F ? swampland : (var0 < 0.5F ? taiga : (var0 < 0.97F ? (var1 < 0.35F ? shrubland : forest) : (var1 < 0.45F ? plains : (var1 < 0.9F ? seasonalForest : rainforest))))));
+		return var0 < 0.1F ? categoryCold : (var1 < 0.2F ? (var0 < 0.5F ? categoryCold : (var0 < 0.95F ? categoryHotForest : categoryHot)) : (var1 > 0.5F && var0 < 0.7F ? categoryTropical : (var0 < 0.5F ? categoryColdForest : (var0 < 0.97F ? (var1 < 0.35F ? categoryTemperate : categoryTemperateForest) : (var1 < 0.45F ? categoryTemperate : (var1 < 0.9F ? categoryTemperateForest : categoryTropical))))));
 	}
+
+	//public static Biome getBiome(float var0, float var1) {
+		/*var1 *= var0;
+		return var0 < 0.1F ? tundra : (var1 < 0.2F ? (var0 < 0.5F ? tundra : (var0 < 0.95F ? savanna : desert)) : (var1 > 0.5F && var0 < 0.7F ? swampland : (var0 < 0.5F ? taiga : (var0 < 0.97F ? (var1 < 0.35F ? shrubland : forest) : (var1 < 0.45F ? plains : (var1 < 0.9F ? seasonalForest : rainforest))))));*/
+	//}
 
 	public int getSkyColorByTemp(float var1) {
 		var1 /= 3.0F;
@@ -134,6 +170,14 @@
 
 	public boolean canSpawnLightningBolt() {
 		return this.enableSnow ? false : this.enableRain;
+	}
+
+	public int getTreeCount(int treeNoise, int treeBonus) {
+		return treeNoise + treeBonus;
+	}
+
+	public int getFlowerCount() {
+		return 0;
 	}
 
 	static {
--- net/minecraft/client/PanelCrashReport.java
+++ net/minecraft/client/PanelCrashReport.java
@@ -9,6 +9,8 @@
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.Sys;
 import org.lwjgl.opengl.GL11;
 
@@ -25,7 +27,7 @@
 		try {
 			var5 = var5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
 			var5 = var5 + "\n";
-			var5 = var5 + "Minecraft: Minecraft Beta 1.7.3\n";
+			var5 = var5 + "Minecraft: Minecraft "+ SharedConstants.VERSION;
 			var5 = var5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
 			var5 = var5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
 			var5 = var5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
--- net/minecraft/game/entity/monster/MobEntity.java
+++ net/minecraft/game/entity/monster/MobEntity.java
@@ -35,7 +35,7 @@
 
 	protected Entity findPlayerToAttack() {
 		PlayerEntity var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
-		return var1 != null && this.canEntityBeSeen(var1) ? var1 : null;
+		return var1 != null && this.canEntityBeSeen(var1) && !this.worldObj.isCreativeWorld() ? var1 : null;
 	}
 
 	public boolean hurt(Entity var1, int var2) {
--- net/minecraft/client/player/ClientPlayerEntity.java
+++ net/minecraft/client/player/ClientPlayerEntity.java
@@ -6,10 +6,7 @@
 import net.minecraft.client.Session;
 import net.minecraft.client.effect.EntityPickupFX;
 import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.gui.container.ChestScreen;
-import net.minecraft.client.gui.container.DispenserScreen;
-import net.minecraft.client.gui.container.EditSignScreen;
-import net.minecraft.client.gui.container.FurnaceScreen;
+import net.minecraft.client.gui.container.*;
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.player.PlayerEntity;
 import net.minecraft.game.item.Inventory;
@@ -34,7 +31,8 @@
 		this.mc = var1;
 		this.dimension = var4;
 		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://s3.amazonaws.com/MinecraftSkins/" + var3.username + ".png";
+			this.username = var3.username;
+			this.updateCloak();
 		}
 
 		this.username = var3.username;
@@ -100,10 +98,12 @@
 			this.ySize = 0.2F;
 		}
 
-		this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-		this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
-		this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
-		this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
+		if(!this.noClip) {
+			this.pushOutOfBlocks(this.posX - (double) this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double) this.width * 0.35D);
+			this.pushOutOfBlocks(this.posX - (double) this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double) this.width * 0.35D);
+			this.pushOutOfBlocks(this.posX + (double) this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double) this.width * 0.35D);
+			this.pushOutOfBlocks(this.posX + (double) this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double) this.width * 0.35D);
+		}
 		super.onLivingUpdate();
 	}
 
@@ -139,7 +139,7 @@
 	}
 
 	public void displayWorkbenchGUI(int var1, int var2, int var3) {
-		this.mc.displayGuiScreen(new CraftingScreen(this.inventory, this.worldObj, var1, var2, var3));
+		this.mc.displayGuiScreen(new InventoryScreen(this, true));
 	}
 
 	public void displayGUIFurnace(FurnaceTileEntity var1) {
@@ -267,5 +267,16 @@
 		}
 
 		return false;
+	}
+
+	public boolean isRunning() {
+		return this.movementInput.sprint && (this.movementInput.moveForward > 0.0F || this.noClip);
+	}
+
+	public float getFOVBoost() {
+		float fovBoost = 1.0F;
+		if (this.noClip) fovBoost *= 1.1F;
+		if (this.isRunning()) fovBoost *= 1.0F + Math.min((this.damageSprintRecover/200.0F) * 0.1F, 0.25F);
+		return fovBoost;
 	}
 }
--- net/minecraft/game/item/recipe/CraftingManager.java
+++ net/minecraft/game/item/recipe/CraftingManager.java
@@ -5,13 +5,16 @@
 import java.util.HashMap;
 import java.util.List;
 import net.minecraft.game.entity.player.InventoryCrafting;
+import net.minecraft.game.entity.player.InventoryPlayer;
 import net.minecraft.game.item.Item;
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.Pair;
+import net.minecraft.util.Triplet;
 
 public class CraftingManager {
 	private static final CraftingManager instance = new CraftingManager();
-	private List recipes = new ArrayList();
+	public HashMap<String, CraftingRecipe> recipes = new HashMap<>();
 
 	public static final CraftingManager getInstance() {
 		return instance;
@@ -25,38 +28,40 @@
 		(new RecipesCrafting()).addRecipes(this);
 		(new RecipesArmor()).addRecipes(this);
 		(new RecipesDyes()).addRecipes(this);
-		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.sugarCane});
-		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
-		this.addRecipe(new ItemStack(Block.noteBlock, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Block.bookshelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
-		this.addRecipe(new ItemStack(Block.snow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
-		this.addRecipe(new ItemStack(Block.clayBlock, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
-		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.glowstone, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.glowstoneDust});
-		this.addRecipe(new ItemStack(Block.wool, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.string});
-		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stoneSlab, 3, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.stoneSlab, 3, 0), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.stoneSlab, 3, 1), new Object[]{"###", Character.valueOf('#'), Block.sandstone});
-		this.addRecipe(new ItemStack(Block.stoneSlab, 3, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.ladder, 2), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.door, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.trapdoor, 2), new Object[]{"###", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.ironDoor, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ironIngot});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Item.cake, 1), new Object[]{"AAA", "BEB", "CCC", Character.valueOf('A'), Item.milkBucket, Character.valueOf('B'), Item.sugar, Character.valueOf('C'), Item.wheat, Character.valueOf('E'), Item.egg});
-		this.addRecipe(new ItemStack(Item.sugar, 1), new Object[]{"#", Character.valueOf('#'), Item.sugarCane});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.log});
-		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", Character.valueOf('X'), new ItemStack(Item.coal, 1, 1), Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.rail, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ironIngot, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.poweredRail, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.goldIngot, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.detectorRail, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.ironIngot, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Block.stonePressurePlate});
-		this.addRecipe(new ItemStack(Item.minecart, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ironIngot});
+		r("planks.oak",true,new ItemStack(Block.planks, 4, 0), new ItemStack(Block.log,1,0));
+		r("planks.spruce",true,new ItemStack(Block.planks, 4, 4), new ItemStack(Block.log,1,1));
+		r("planks.birch",true,new ItemStack(Block.planks, 4, 16), new ItemStack(Block.log,1,2));
+
+		r("paper",false,new ItemStack(Item.paper, 3),new ItemStack(Item.sugarCane,3));
+		r("book",false,new ItemStack(Item.book),new ItemStack(Item.paper,3));
+
+		r("fence",false,new ItemStack(Block.fence, 2),new ItemStack(Item.stick,6));
+		r("bookshelf",false,new ItemStack(Block.bookshelf),new ItemStack(Block.planks,6,-1),new ItemStack(Item.book,3));
+		r("snow",true,new ItemStack(Block.snow),new ItemStack(Item.snowball,4));
+		r("clayBlock",true,new ItemStack(Block.clayBlock),new ItemStack(Item.clay,4));
+		r("brick",true,new ItemStack(Block.brick),new ItemStack(Item.brick,4));
+		r("glowstone",true,new ItemStack(Block.glowstone),new ItemStack(Item.glowstoneDust,4));
+		r("wool.fromString",true,new ItemStack(Block.wool),new ItemStack(Item.string,4));
+		r("tnt",false,new ItemStack(Block.tnt),new ItemStack(Item.gunpowder,5),new ItemStack(Block.sand,4));
+		r("slab.cobble",false,new ItemStack(Block.stoneSlab, 3, 3),new ItemStack(Block.cobblestone,3,-1));
+		r("slab.stone",false,new ItemStack(Block.stoneSlab, 3, 0),new ItemStack(Block.stone,3));
+		r("slab.sandstone",false,new ItemStack(Block.stoneSlab, 3, 1),new ItemStack(Block.sandstone,3));
+		r("slab.planks",false,new ItemStack(Block.stoneSlab, 3, 2),new ItemStack(Block.planks,3,-1));
+		r("ladder",false,new ItemStack(Block.ladder, 2),new ItemStack(Item.stick,7));
+		r("door",false,new ItemStack(Item.door),new ItemStack(Block.planks,6,-1));
+		r("trapdoor",false,new ItemStack(Block.trapdoor,2),new ItemStack(Block.planks,6,-1));
+		r("ironDoor",false,new ItemStack(Item.ironDoor),new ItemStack(Item.ironIngot,6));
+		r("sign",false,new ItemStack(Item.sign),new ItemStack(Block.planks,6,-1),new ItemStack(Item.stick));
+		r("sugar",true,new ItemStack(Item.sugar),new ItemStack(Item.sugarCane));
+		r("stick",true,new ItemStack(Item.stick,4),new ItemStack(Block.planks,2,-1));
+		r("bowl",false,new ItemStack(Item.bowlEmpty,4), new ItemStack(Block.planks,3,-1));
+		r("torch",true,new ItemStack(Block.torch,4), new ItemStack(Item.stick), new ItemStack(Item.coal,1,-1));
+		r("rail",false,new ItemStack(Block.rail,16), new ItemStack(Item.ironIngot,6), new ItemStack(Item.stick));
+		r("poweredRail",false,new ItemStack(Block.poweredRail,6), new ItemStack(Item.goldIngot,6), new ItemStack(Item.stick), new ItemStack(Item.redstone));
+		r("detectorRail",false,new ItemStack(Block.detectorRail,6), new ItemStack(Item.ironIngot,6), new ItemStack(Item.stick), new ItemStack(Block.stonePressurePlate));
+		r("minecart",false,new ItemStack(Item.minecart), new ItemStack(Item.ironIngot,6));
+		r("boat",false,new ItemStack(Item.boat), new ItemStack(Block.planks,6,-1));
+		/*
 		this.addRecipe(new ItemStack(Block.jackOLantern, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.pumpkin, Character.valueOf('B'), Block.torch});
 		this.addRecipe(new ItemStack(Item.minecartWithChest, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecart});
 		this.addRecipe(new ItemStack(Item.minecartWithFurnace, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.furnace, Character.valueOf('B'), Item.minecart});
@@ -81,12 +86,16 @@
 		this.addRecipe(new ItemStack(Block.dispenser, 1), new Object[]{"###", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.bow, Character.valueOf('R'), Item.redstone});
 		this.addRecipe(new ItemStack(Block.piston, 1), new Object[]{"TTT", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.ironIngot, Character.valueOf('R'), Item.redstone, Character.valueOf('T'), Block.planks});
 		this.addRecipe(new ItemStack(Block.stickyPiston, 1), new Object[]{"S", "P", Character.valueOf('S'), Item.slimeBall, Character.valueOf('P'), Block.piston});
-		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.wool, Character.valueOf('X'), Block.planks});
-		Collections.sort(this.recipes, new RecipeSorter(this));
+		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.wool, Character.valueOf('X'), Block.planks});*/
+		//Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
 
-	void addRecipe(ItemStack var1, Object... var2) {
+	public void r(String name, boolean hand, ItemStack o, ItemStack... i) {
+		recipes.put(name, new CraftingRecipe(hand,o,i));
+	}
+
+	/*void addRecipe(ItemStack var1, Object... var2) {
 		String var3 = "";
 		int var4 = 0;
 		int var5 = 0;
@@ -174,5 +183,39 @@
 
 	public List getRecipeList() {
 		return this.recipes;
+	}*/
+
+	public static long stackHash(int id, int damage) {
+		return (Integer.toUnsignedLong(damage) << 32) | Integer.toUnsignedLong(id);
+	}
+
+	public List<Triplet<String, Boolean, CraftingRecipe>> getAvailableRecipes(InventoryPlayer player, boolean extended) {
+		HashMap<Long, Integer> items = new HashMap<>();
+		for(ItemStack playerSlot : player.mainInventory) {
+			if(playerSlot == null) continue;
+			long key = stackHash(playerSlot.getItem().itemID,playerSlot.getItemDamage());
+			long genericKey = stackHash(playerSlot.getItem().itemID,-1);
+			items.put(key,items.getOrDefault(key,0)+playerSlot.count);
+			items.put(genericKey,items.getOrDefault(genericKey,0)+playerSlot.count);
+		}
+
+		List<Triplet<String, Boolean, CraftingRecipe>> out = new ArrayList<>();
+		for(String key : recipes.keySet()) {
+			CraftingRecipe recipe = recipes.get(key);
+			int partialCount = 0;
+			int count = 0;
+			if(!recipe.byHand && !extended) continue;
+			for (ItemStack item : recipe.inputs) {
+				int c = items.getOrDefault(stackHash(item.getItem().itemID,item.getItemDamage()),0);
+				if(c > 0)
+					partialCount++;
+				if(c >= item.count)
+					count++;
+			}
+			if(partialCount > 0) {
+				out.add(new Triplet<>(key,count == recipe.inputs.size(),recipe));
+			}
+		}
+		return out;
 	}
 }
--- net/minecraft/game/world/terrain/feature/BirchTreeFeature.java
+++ net/minecraft/game/world/terrain/feature/BirchTreeFeature.java
@@ -3,12 +3,13 @@
 import java.util.Random;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 
 public class BirchTreeFeature extends Feature {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		int var6 = var2.nextInt(3) + 5;
 		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+		if(var4 >= 1 && var4 + var6 + 1 <= SharedConstants.CHUNK_HEIGHT) {
 			int var8;
 			int var10;
 			int var11;
@@ -25,7 +26,7 @@
 
 				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 128) {
+						if(var8 >= 0 && var8 < SharedConstants.CHUNK_HEIGHT) {
 							var12 = var1.getBlockId(var10, var8, var11);
 							if(var12 != 0 && var12 != Block.leaves.blockID) {
 								var7 = false;
@@ -41,7 +42,7 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < SharedConstants.CHUNK_HEIGHT - var6 - 1) {
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 					int var16;
--- /dev/null
+++ net/minecraft/util/AdvMathUtil.java
@@ -1,0 +1,59 @@
+package net.minecraft.util;
+
+public class AdvMathUtil {
+    public static void nearestNeighbor3DPoints(DoubleArray3D src, DoubleArray3D dst) {
+        double xRatio = ((double)src.width) / ((double)dst.width);
+        double yRatio = ((double)src.height) / ((double)dst.height);
+        double zRatio = ((double)src.length) / ((double)dst.length);
+        for(int i=0; i < dst.length; i++) {
+            for (int j = 0; j < dst.width; j++) {
+                for (int k = 0; k < dst.height; k++) {
+                    int finalX = (int)Math.floor(j*xRatio);
+                    int finalY = (int)Math.floor(k*yRatio);
+                    int finalZ = (int)Math.floor(i*zRatio);
+                    dst.set(j,k,i,src.get(finalX,finalY,finalZ));
+                }
+            }
+        }
+    }
+
+    public static void lerp3DPoints(DoubleArray3D src, DoubleArray3D dst, int rh, int rv) {
+        double[] srcArr = src.getArray();
+        int sw = src.width;
+        int sh = src.height;
+        int sl = src.length;
+        int shl = sh * sl;
+        int s2hl = sh * sl + sh;
+        for (int x = 0; x < dst.width / rh; x++) {
+            for (int y = 0; y < dst.height / rv; y++) {
+                for (int z = 0; z < dst.length / rh; z++) {
+                    int i = (x * sl + z) * sh + y;
+                    double n000 = srcArr[i];
+                    double n010 = srcArr[i + 1];
+                    double n001 = srcArr[i + sh];
+                    double n011 = srcArr[i + sh + 1];
+                    double nL00 = srcArr[i + shl] - n000;
+                    double nL10 = srcArr[i + shl + 1] - n010;
+                    double nL01 = srcArr[i + s2hl] - n001;
+                    double nL11 = srcArr[i + s2hl + 1] - n011;
+                    for (int lx = 0; lx < rh; lx++) {
+                        double lxlerp = lx / (double)rh;
+                        double n00 = n000 + nL00 * lxlerp;
+                        double n01 = n001 + nL01 * lxlerp;
+                        double nL0 = n010 + nL10 * lxlerp - n00;
+                        double nL1 = n011 + nL11 * lxlerp - n01;
+                        for (int ly = 0; ly < rv; ly++) {
+                            double lylerp = ly / (double)rv;
+                            double n0 = n00 + nL0 * lylerp;
+                            double nL = n01 + nL1 * lylerp - n0;
+                            for (int lz = 0; lz < rh; lz++) {
+                                double n = n0 + nL * (lz / (double)rh);
+                                dst.set(x * rh + lx, y * rv + ly, z * rh + lz, n);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
--- net/minecraft/game/world/block/FurnaceBlock.java
+++ net/minecraft/game/world/block/FurnaceBlock.java
@@ -12,6 +12,8 @@
 import net.minecraft.game.world.material.Material;
 import net.minecraft.util.MathHelper;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class FurnaceBlock extends ContainerBlock {
 	private Random random = new Random();
 	private final boolean isActive;
@@ -20,7 +22,7 @@
 	protected FurnaceBlock(int var1, boolean var2) {
 		super(var1, Material.stone);
 		this.isActive = var2;
-		this.textureIndex = 45;
+		this.textureIndex = getAtlasTexture(30,1);
 	}
 
 	public int idDropped(int var1, Random var2) {
@@ -61,12 +63,12 @@
 
 	public int getBlockTexture(BlockAccess var1, int var2, int var3, int var4, int var5) {
 		if(var5 == 1) {
-			return this.textureIndex + 17;
+			return this.textureIndex + 33;
 		} else if(var5 == 0) {
-			return this.textureIndex + 17;
+			return this.textureIndex + 33;
 		} else {
 			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var5 != var6 ? this.textureIndex : (this.isActive ? this.textureIndex + 16 : this.textureIndex - 1);
+			return var5 != var6 ? this.textureIndex : (this.isActive ? this.textureIndex + 32 : this.textureIndex - 1);
 		}
 	}
 
@@ -96,7 +98,7 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.textureIndex + 17 : (var1 == 0 ? this.textureIndex + 17 : (var1 == 3 ? this.textureIndex - 1 : this.textureIndex));
+		return var1 == 1 ? this.textureIndex + 33 : (var1 == 0 ? this.textureIndex + 33 : (var1 == 3 ? this.textureIndex - 1 : this.textureIndex));
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, PlayerEntity var5) {
--- net/minecraft/client/effect/EntityDiggingFX.java
+++ net/minecraft/client/effect/EntityDiggingFX.java
@@ -35,10 +35,10 @@
 	}
 
 	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
-		float var9 = var8 + 0.999F / 64.0F;
-		float var10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
-		float var11 = var10 + 0.999F / 64.0F;
+		float var8 = ((float)(this.particleTextureIndex % 32) + this.particleTextureJitterX / 4.0F) / 32.0F;
+		float var9 = var8 + 0.999F / 128.0F;
+		float var10 = ((float)(this.particleTextureIndex / 32) + this.particleTextureJitterY / 4.0F) / 32.0F;
+		float var11 = var10 + 0.999F / 128.0F;
 		float var12 = 0.1F * this.particleScale;
 		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
 		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
--- net/minecraft/client/render/WorldRenderer.java
+++ net/minecraft/client/render/WorldRenderer.java
@@ -38,10 +38,13 @@
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL15;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class WorldRenderer implements WorldAccess {
 	public List tileEntities = new ArrayList();
 	private World worldObj;
@@ -231,7 +234,7 @@
 		}
 
 		this.renderChunksWide = var1 / 16 + 1;
-		this.renderChunksTall = 8;
+		this.renderChunksTall = SharedConstants.CHUNK_HEIGHT / 16;
 		this.renderChunksDeep = var1 / 16 + 1;
 		this.worldRenderers = new ChunkRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
 		this.sortedWorldRenderers = new ChunkRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
@@ -314,14 +317,14 @@
 
 			for(var6 = 0; var6 < var5.size(); ++var6) {
 				var7 = (Entity)var5.get(var6);
-				if(var7.isInRangeToRenderVec3D(var1) && (var7.ignoreFrustumCheck || var2.isBoundingBoxInFrustum(var7.boundingBox)) && (var7 != this.mc.renderViewEntity || this.mc.gameSettings.thirdPersonView || this.mc.renderViewEntity.isPlayerSleeping())) {
+				if(var7.isInRangeToRenderVec3D(var1) && (var7.ignoreFrustumCheck || var2.isBoundingBoxInFrustum(var7.boundingBox)) && (var7 != this.mc.renderViewEntity || this.mc.gameSettings.thirdPersonView > 0 || this.mc.renderViewEntity.isPlayerSleeping())) {
 					int var8 = MathHelper.floor(var7.posY);
 					if(var8 < 0) {
 						var8 = 0;
 					}
 
-					if(var8 >= 128) {
-						var8 = 127;
+					if(var8 >= SharedConstants.CHUNK_HEIGHT) {
+						var8 = SharedConstants.CHUNK_HEIGHT - 1;
 					}
 
 					if(this.worldObj.blockExists(MathHelper.floor(var7.posX), var8, MathHelper.floor(var7.posZ))) {
@@ -626,7 +629,9 @@
 	}
 
 	public void updateClouds() {
-		++this.cloudOffsetX;
+		if(!SharedConstants.PANORAMA_SCREENSHOT_MODE) {
+			++this.cloudOffsetX;
+		}
 	}
 
 	public void renderSky(float var1) {
@@ -1127,7 +1132,7 @@
 				var6.startDrawingQuads();
 				var6.setTranslationD(-var10, -var12, -var14);
 				var6.disableColor();
-				this.globalRenderBlocks.renderBlockUsingTexture(var9, var2.blockX, var2.blockY, var2.blockZ, 240 + (int)(this.damagePartialTime * 10.0F));
+				this.globalRenderBlocks.renderBlockUsingTexture(var9, var2.blockX, var2.blockY, var2.blockZ, getAtlasTexture(0,31) + (int)(this.damagePartialTime * 10.0F));
 				var6.draw();
 				var6.setTranslationD(0.0D, 0.0D, 0.0D);
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
@@ -1176,6 +1181,9 @@
 	}
 
 	public void drawSelectionBox(PlayerEntity var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
+		if(SharedConstants.PANORAMA_SCREENSHOT_MODE) {
+			return;
+		}
 		if(var3 == 0 && var2.typeOfHit == MovingObjectType.BLOCK) {
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
@@ -1190,7 +1198,7 @@
 				double var8 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
 				double var10 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
 				double var12 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.worldObj, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.worldObj, var2.blockX, var2.blockY, var2.blockZ).expand((double) var6, (double) var6, (double) var6).getOffsetBoundingBox(-var8, -var10, -var12));
 			}
 
 			GL11.glDepthMask(true);
@@ -1348,7 +1356,7 @@
 	}
 
 	public void obtainEntitySkin(Entity var1) {
-		var1.updateCloak();
+		//var1.updateCloak();
 		if(var1.skinUrl != null) {
 			this.textureRegistry.obtainImageData(var1.skinUrl, new ImageBufferDownload());
 		}
@@ -1401,7 +1409,7 @@
 			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "random.bow", 1.0F, 1.2F);
 			break;
 		case 1003:
-			if(Math.random() < 0.5D) {
+			if(var6 == 0) {
 				this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "random.door_open", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
 			} else {
 				this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
@@ -1437,13 +1445,14 @@
 
 			return;
 		case 2001:
-			var16 = var6 & 255;
-			if(var16 > 0) {
+		case 2002:
+			var16 = var6 & 0xFFFF;
+			if(var16 > 0 && var2 != 2002) {
 				Block var17 = Block.blocksList[var16];
 				this.mc.sndManager.playSound(var17.stepSound.stepSoundDir(), (float)var3 + 0.5F, (float)var4 + 0.5F, (float)var5 + 0.5F, (var17.stepSound.getVolume() + 1.0F) / 2.0F, var17.stepSound.getPitch() * 0.8F);
 			}
 
-			this.mc.effectRenderer.addBlockDestroyEffects(var3, var4, var5, var6 & 255, var6 >> 8 & 255);
+			this.mc.effectRenderer.addBlockDestroyEffects(var3, var4, var5, var6 & 0xFFFF, var6 >> 16 & 0xFFFF);
 		}
 
 	}
--- net/minecraft/game/world/chunk/Chunk.java
+++ net/minecraft/game/world/chunk/Chunk.java
@@ -1,5 +1,8 @@
 package net.minecraft.game.world.chunk;
 
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.ShortBuffer;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -14,17 +17,19 @@
 import net.minecraft.game.world.block.ContainerBlock;
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.MetadataByteArray;
 import net.minecraft.util.NibbleArray;
+import net.minecraft.util.SharedConstants;
 
 public class Chunk {
 	public static boolean isLit;
-	public byte[] blocks;
+	public short[] blocks;
 	public boolean isChunkLoaded;
 	public World worldObj;
-	public NibbleArray data;
+	public MetadataByteArray data;
 	public NibbleArray skylightMap;
 	public NibbleArray blocklightMap;
-	public byte[] heightMap;
+	public int[] heightMap;
 	public int lowestBlockHeight;
 	public final int xPosition;
 	public final int zPosition;
@@ -38,7 +43,7 @@
 
 	public Chunk(World var1, int var2, int var3) {
 		this.chunkTileEntityMap = new HashMap();
-		this.entities = new List[8];
+		this.entities = new List[SharedConstants.CHUNK_HEIGHT / 16];
 		this.isTerrainPopulated = false;
 		this.isModified = false;
 		this.hasEntities = false;
@@ -46,7 +51,7 @@
 		this.worldObj = var1;
 		this.xPosition = var2;
 		this.zPosition = var3;
-		this.heightMap = new byte[256];
+		this.heightMap = new int[256];
 
 		for(int var4 = 0; var4 < this.entities.length; ++var4) {
 			this.entities[var4] = new ArrayList();
@@ -54,10 +59,10 @@
 
 	}
 
-	public Chunk(World var1, byte[] var2, int var3, int var4) {
+	public Chunk(World var1, short[] var2, int var3, int var4) {
 		this(var1, var3, var4);
 		this.blocks = var2;
-		this.data = new NibbleArray(var2.length);
+		this.data = new MetadataByteArray(var2.length);
 		this.skylightMap = new NibbleArray(var2.length);
 		this.blocklightMap = new NibbleArray(var2.length);
 	}
@@ -67,23 +72,23 @@
 	}
 
 	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+		return this.heightMap[var2 << 4 | var1];
 	}
 
 	public void doNothing1() {
 	}
 
 	public void generateHeightMap() {
-		int var1 = 127;
+		int var1 = SharedConstants.CHUNK_HEIGHT - 1;
 
 		for(int var2 = 0; var2 < 16; ++var2) {
 			for(int var3 = 0; var3 < 16; ++var3) {
-				int var4 = 127;
+				int var4 = SharedConstants.CHUNK_HEIGHT - 1;
 
-				for(int var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
+				for(int var5 = var2 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1]] == 0; --var4) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
+				this.heightMap[var3 << 4 | var2] = var4;
 				if(var4 < var1) {
 					var1 = var4;
 				}
@@ -95,29 +100,29 @@
 	}
 
 	public void generateSkylightMap() {
-		int var1 = 127;
+		int var1 = SharedConstants.CHUNK_HEIGHT - 1;
 
 		int var2;
 		int var3;
 		for(var2 = 0; var2 < 16; ++var2) {
 			for(var3 = 0; var3 < 16; ++var3) {
-				int var4 = 127;
+				int var4 = SharedConstants.CHUNK_HEIGHT - 1;
 
 				int var5;
-				for(var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
+				for(var5 = var2 << (SharedConstants.CHUNK_BIT_OFFSET + 4) | var3 << SharedConstants.CHUNK_BIT_OFFSET; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1]] == 0; --var4) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
+				this.heightMap[var3 << 4 | var2] = var4;
 				if(var4 < var1) {
 					var1 = var4;
 				}
 
 				if(!this.worldObj.dimension.hasNoSky) {
 					int var6 = 15;
-					int var7 = 127;
+					int var7 = SharedConstants.CHUNK_HEIGHT - 1;
 
 					do {
-						var6 -= Block.lightOpacity[this.blocks[var5 + var7] & 255];
+						var6 -= Block.lightOpacity[this.blocks[var5 + var7]];
 						if(var6 > 0) {
 							this.skylightMap.setNibble(var2, var7, var3, var6);
 						}
@@ -165,30 +170,30 @@
 	}
 
 	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
+		int var4 = this.heightMap[var3 << 4 | var1];
 		int var5 = var4;
 		if(var2 > var4) {
 			var5 = var2;
 		}
 
-		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1] & 255] == 0; --var5) {
+		for(int var6 = var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
 		}
 
 		if(var5 != var4) {
 			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
+			this.heightMap[var3 << 4 | var1] = var5;
 			int var7;
 			int var8;
 			int var9;
 			if(var5 < this.lowestBlockHeight) {
 				this.lowestBlockHeight = var5;
 			} else {
-				var7 = 127;
+				var7 = SharedConstants.CHUNK_HEIGHT - 1;
 
 				for(var8 = 0; var8 < 16; ++var8) {
 					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
+						if((this.heightMap[var9 << 4 | var8]) < var7) {
+							var7 = this.heightMap[var9 << 4 | var8];
 						}
 					}
 				}
@@ -239,26 +244,26 @@
 	}
 
 	public int getBlockID(int var1, int var2, int var3) {
-		return this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
+		return this.blocks[var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2];
 	}
 
 	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		byte var6 = (byte)var4;
-		int var7 = this.heightMap[var3 << 4 | var1] & 255;
-		int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var8 == var4 && this.data.getNibble(var1, var2, var3) == var5) {
+		short var6 = (short)var4;
+		int var7 = this.heightMap[var3 << 4 | var1];
+		int var8 = this.blocks[var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2];
+		if(var8 == var4 && this.data.getByte(var1, var2, var3) == var5) {
 			return false;
 		} else {
 			int var9 = this.xPosition * 16 + var1;
 			int var10 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = (byte)(var6 & 255);
+			this.blocks[var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2] = var6;
 			if(var8 != 0 && !this.worldObj.remoteWorld) {
 				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
 			}
 
-			this.data.setNibble(var1, var2, var3, var5);
+			this.data.setByte(var1, var2, var3, var5);
 			if(!this.worldObj.dimension.hasNoSky) {
-				if(Block.lightOpacity[var6 & 255] != 0) {
+				if(Block.lightOpacity[var6] != 0) {
 					if(var2 >= var7) {
 						this.relightBlock(var1, var2 + 1, var3);
 					}
@@ -271,7 +276,7 @@
 
 			this.worldObj.scheduleLightingUpdate(LightType.BLOCK, var9, var2, var10, var9, var2, var10);
 			this.updateSkylight_do(var1, var3);
-			this.data.setNibble(var1, var2, var3, var5);
+			this.data.setByte(var1, var2, var3, var5);
 			if(var4 != 0) {
 				Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
 			}
@@ -282,21 +287,21 @@
 	}
 
 	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		byte var5 = (byte)var4;
-		int var6 = this.heightMap[var3 << 4 | var1] & 255;
-		int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
+		short var5 = (short)var4;
+		int var6 = this.heightMap[var3 << 4 | var1];
+		int var7 = this.blocks[var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2];
 		if(var7 == var4) {
 			return false;
 		} else {
 			int var8 = this.xPosition * 16 + var1;
 			int var9 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = (byte)(var5 & 255);
+			this.blocks[var1 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2] = var5;
 			if(var7 != 0) {
 				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
 			}
 
-			this.data.setNibble(var1, var2, var3, 0);
-			if(Block.lightOpacity[var5 & 255] != 0) {
+			this.data.setByte(var1, var2, var3, 0);
+			if(Block.lightOpacity[var5] != 0) {
 				if(var2 >= var6) {
 					this.relightBlock(var1, var2 + 1, var3);
 				}
@@ -317,12 +322,12 @@
 	}
 
 	public int getBlockMetadata(int var1, int var2, int var3) {
-		return this.data.getNibble(var1, var2, var3);
+		return this.data.getByte(var1, var2, var3);
 	}
 
 	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
 		this.isModified = true;
-		this.data.setNibble(var1, var2, var3, var4);
+		this.data.setByte(var1, var2, var3, var4);
 	}
 
 	public int getSavedLightValue(LightType var1, int var2, int var3, int var4) {
@@ -400,7 +405,7 @@
 	}
 
 	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
+		return var2 >= (this.heightMap[var3 << 4 | var1]);
 	}
 
 	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
@@ -555,92 +560,79 @@
 	}
 
 	public int getChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9 = var5 - var2;
-		int var10 = var6 - var3;
-		int var11 = var7 - var4;
-		if(var9 * var10 * var11 == this.blocks.length) {
-			System.arraycopy(this.blocks, 0, var1, var8, this.blocks.length);
-			var8 += this.blocks.length;
-			System.arraycopy(this.data.data, 0, var1, var8, this.data.data.length);
-			var8 += this.data.data.length;
-			System.arraycopy(this.blocklightMap.data, 0, var1, var8, this.blocklightMap.data.length);
-			var8 += this.blocklightMap.data.length;
-			System.arraycopy(this.skylightMap.data, 0, var1, var8, this.skylightMap.data.length);
-			var8 += this.skylightMap.data.length;
-			return var8;
-		} else {
-			int var12;
-			int var13;
-			int var14;
-			int var15;
-			for(var12 = var2; var12 < var5; ++var12) {
-				for(var13 = var4; var13 < var7; ++var13) {
-					var14 = var12 << 11 | var13 << 7 | var3;
-					var15 = var6 - var3;
-					System.arraycopy(this.blocks, var14, var1, var8, var15);
-					var8 += var15;
-				}
-			}
-
-			for(var12 = var2; var12 < var5; ++var12) {
-				for(var13 = var4; var13 < var7; ++var13) {
-					var14 = (var12 << 11 | var13 << 7 | var3) >> 1;
-					var15 = (var6 - var3) / 2;
-					System.arraycopy(this.data.data, var14, var1, var8, var15);
-					var8 += var15;
-				}
-			}
-
-			for(var12 = var2; var12 < var5; ++var12) {
-				for(var13 = var4; var13 < var7; ++var13) {
-					var14 = (var12 << 11 | var13 << 7 | var3) >> 1;
-					var15 = (var6 - var3) / 2;
-					System.arraycopy(this.blocklightMap.data, var14, var1, var8, var15);
-					var8 += var15;
-				}
-			}
-
-			for(var12 = var2; var12 < var5; ++var12) {
-				for(var13 = var4; var13 < var7; ++var13) {
-					var14 = (var12 << 11 | var13 << 7 | var3) >> 1;
-					var15 = (var6 - var3) / 2;
-					System.arraycopy(this.skylightMap.data, var14, var1, var8, var15);
-					var8 += var15;
-				}
-			}
-
-			return var8;
-		}
+		int height = var6 - var3;
+
+		ByteBuffer byteBuffer = ByteBuffer.allocate(this.blocks.length * 2);
+		byteBuffer.asShortBuffer().put(this.blocks);
+
+		int var9;
+		int var10;
+		int var11;
+		int var12;
+		for(var9 = var2; var9 < var5; ++var9) {
+			for(var10 = var4; var10 < var7; ++var10) {
+				var11 = var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3;
+				System.arraycopy(byteBuffer.array(), var11 * 2, var1, var8, height * 2);
+				var8 += height * 2;
+			}
+		}
+		for(var9 = var2; var9 < var5; ++var9) {
+			for(var10 = var4; var10 < var7; ++var10) {
+				var11 = var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3;
+				System.arraycopy(this.data.data, var11, var1, var8, height);
+				var8 += height;
+			}
+		}
+		for(var9 = var2; var9 < var5; ++var9) {
+			for(var10 = var4; var10 < var7; ++var10) {
+				var11 = (var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3) >> 1;
+				System.arraycopy(this.blocklightMap.data, var11, var1, var8, height / 2);
+				var8 += height / 2;
+			}
+		}
+		for(var9 = var2; var9 < var5; ++var9) {
+			for(var10 = var4; var10 < var7; ++var10) {
+				var11 = (var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3) >> 1;
+				System.arraycopy(this.skylightMap.data, var11, var1, var8, height / 2);
+				var8 += height / 2;
+			}
+		}
+
+		return var8;
 	}
 
 	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
+		ByteBuffer byteBuffer = ByteBuffer.allocate(this.blocks.length * 2);
+		byteBuffer.asShortBuffer().put(this.blocks);
+
 		int var9;
 		int var10;
 		int var11;
 		int var12;
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = var9 << 11 | var10 << 7 | var3;
+				var11 = var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3;
 				var12 = var6 - var3;
-				System.arraycopy(var1, var8, this.blocks, var11, var12);
-				var8 += var12;
+				System.arraycopy(var1, var8, byteBuffer.array(), var11 * 2, var12 * 2);
+				var8 += var12 * 2;
 			}
 		}
 
+		ShortBuffer.wrap(this.blocks).put(byteBuffer.asShortBuffer());
 		this.generateHeightMap();
 
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
+				var11 = var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3;
+				var12 = var6 - var3;
 				System.arraycopy(var1, var8, this.data.data, var11, var12);
 				var8 += var12;
 			}
 		}
 
 		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
+			for (var10 = var4; var10 < var7; ++var10) {
+				var11 = (var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3) >> 1;
 				var12 = (var6 - var3) / 2;
 				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
 				var8 += var12;
@@ -648,14 +640,15 @@
 		}
 
 		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
+			for (var10 = var4; var10 < var7; ++var10) {
+				var11 = (var9 << SharedConstants.CHUNK_BIT_OFFSET + 4 | var10 << SharedConstants.CHUNK_BIT_OFFSET | var3) >> 1;
 				var12 = (var6 - var3) / 2;
 				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
 				var8 += var12;
 			}
 		}
 
+
 		return var8;
 	}
 
@@ -668,6 +661,6 @@
 	}
 
 	public void updateBlockMapData() {
-		ChunkBlockMap.setBlockData(this.blocks);
+		//ChunkBlockMap.setBlockData(this.blocks);
 	}
 }
--- net/minecraft/client/gui/SelectWorldScreen.java
+++ net/minecraft/client/gui/SelectWorldScreen.java
@@ -135,6 +135,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
+		drawDefaultBackground(var3);
 		this.worldSlotContainer.drawScreen(var1, var2, var3);
 		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/game/item/BedItem.java
+++ net/minecraft/game/item/BedItem.java
@@ -39,7 +39,8 @@
 			if(var3.isAirBlock(var4, var5, var6) && var3.isAirBlock(var4 + var10, var5, var6 + var11) && var3.isBlockNormalCube(var4, var5 - 1, var6) && var3.isBlockNormalCube(var4 + var10, var5 - 1, var6 + var11)) {
 				var3.setBlockAndMetadataWithNotify(var4, var5, var6, var8.blockID, var9);
 				var3.setBlockAndMetadataWithNotify(var4 + var10, var5, var6 + var11, var8.blockID, var9 + 8);
-				--var1.count;
+				if(!var3.isCreativeWorld())
+					--var1.count;
 				return true;
 			} else {
 				return false;
--- net/minecraft/client/gui/container/EditSignScreen.java
+++ net/minecraft/client/gui/container/EditSignScreen.java
@@ -69,7 +69,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 40, 16777215);
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)(this.width / 2), 0.0F, 50.0F);
--- net/minecraft/network/NetHandler.java
+++ net/minecraft/network/NetHandler.java
@@ -1,56 +1,6 @@
 package net.minecraft.network;
 
-import net.minecraft.network.packet.Packet;
-import net.minecraft.network.packet.Packet100OpenWindow;
-import net.minecraft.network.packet.Packet101CloseWindow;
-import net.minecraft.network.packet.Packet102WindowClick;
-import net.minecraft.network.packet.Packet103SetSlot;
-import net.minecraft.network.packet.Packet104WindowItems;
-import net.minecraft.network.packet.Packet105UpdateProgressbar;
-import net.minecraft.network.packet.Packet106Transaction;
-import net.minecraft.network.packet.Packet10Flying;
-import net.minecraft.network.packet.Packet130UpdateSign;
-import net.minecraft.network.packet.Packet131MapData;
-import net.minecraft.network.packet.Packet14BlockDig;
-import net.minecraft.network.packet.Packet15Place;
-import net.minecraft.network.packet.Packet16BlockItemSwitch;
-import net.minecraft.network.packet.Packet17Sleep;
-import net.minecraft.network.packet.Packet18Animation;
-import net.minecraft.network.packet.Packet19EntityAction;
-import net.minecraft.network.packet.Packet1Login;
-import net.minecraft.network.packet.Packet200Statistic;
-import net.minecraft.network.packet.Packet20NamedEntitySpawn;
-import net.minecraft.network.packet.Packet21PickupSpawn;
-import net.minecraft.network.packet.Packet22Collect;
-import net.minecraft.network.packet.Packet23VehicleSpawn;
-import net.minecraft.network.packet.Packet24MobSpawn;
-import net.minecraft.network.packet.Packet255KickDisconnect;
-import net.minecraft.network.packet.Packet25EntityPainting;
-import net.minecraft.network.packet.Packet27Position;
-import net.minecraft.network.packet.Packet28EntityVelocity;
-import net.minecraft.network.packet.Packet29DestroyEntity;
-import net.minecraft.network.packet.Packet2Handshake;
-import net.minecraft.network.packet.Packet30Entity;
-import net.minecraft.network.packet.Packet34EntityTeleport;
-import net.minecraft.network.packet.Packet38EntityStatus;
-import net.minecraft.network.packet.Packet39AttachEntity;
-import net.minecraft.network.packet.Packet3Chat;
-import net.minecraft.network.packet.Packet40EntityMetadata;
-import net.minecraft.network.packet.Packet4UpdateTime;
-import net.minecraft.network.packet.Packet50PreChunk;
-import net.minecraft.network.packet.Packet51MapChunk;
-import net.minecraft.network.packet.Packet52MultiBlockChange;
-import net.minecraft.network.packet.Packet53BlockChange;
-import net.minecraft.network.packet.Packet54PlayNoteBlock;
-import net.minecraft.network.packet.Packet5PlayerInventory;
-import net.minecraft.network.packet.Packet60Explosion;
-import net.minecraft.network.packet.Packet61DoorChange;
-import net.minecraft.network.packet.Packet6SpawnPosition;
-import net.minecraft.network.packet.Packet70Bed;
-import net.minecraft.network.packet.Packet71Weather;
-import net.minecraft.network.packet.Packet7UseEntity;
-import net.minecraft.network.packet.Packet8UpdateHealth;
-import net.minecraft.network.packet.Packet9Respawn;
+import net.minecraft.network.packet.*;
 
 public abstract class NetHandler {
 	public abstract boolean isServerHandler();
@@ -257,6 +207,18 @@
 	}
 
 	public void handleDoorChange(Packet61DoorChange var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleCreativeSetSlot(Packet107CreativeSetSlot var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleNoClip(Packet108NoClip var1) {
+		this.registerPacket(var1);
+	}
+
+	public void handleCraft(Packet109Craft var1) {
 		this.registerPacket(var1);
 	}
 }
--- net/minecraft/game/entity/vehicle/BoatEntity.java
+++ net/minecraft/game/entity/vehicle/BoatEntity.java
@@ -80,14 +80,16 @@
 					this.riddenByEntity.mountEntity(this);
 				}
 
-				int var3;
+				/*int var3;
 				for(var3 = 0; var3 < 3; ++var3) {
 					this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
 				}
 
 				for(var3 = 0; var3 < 2; ++var3) {
 					this.dropItemWithOffset(Item.stick.itemID, 1, 0.0F);
-				}
+				}*/
+
+				this.dropItemWithOffset(Item.boat.itemID,1,0.0F);
 
 				this.setEntityDead();
 			}
@@ -202,8 +204,8 @@
 			}
 
 			if(this.riddenByEntity != null) {
-				this.motionX += this.riddenByEntity.motionX * 0.2D;
-				this.motionZ += this.riddenByEntity.motionZ * 0.2D;
+				this.motionX += this.riddenByEntity.motionX * 0.4D;
+				this.motionZ += this.riddenByEntity.motionZ * 0.4D;
 			}
 
 			var21 = 0.4D;
@@ -253,7 +255,7 @@
 			}
 
 			if(this.isCollidedHorizontally && var6 > 0.15D) {
-				if(!this.worldObj.remoteWorld) {
+				/*if(!this.worldObj.remoteWorld) {
 					this.setEntityDead();
 
 					int var22;
@@ -264,7 +266,7 @@
 					for(var22 = 0; var22 < 2; ++var22) {
 						this.dropItemWithOffset(Item.stick.itemID, 1, 0.0F);
 					}
-				}
+				}*/
 			} else {
 				this.motionX *= (double)0.99F;
 				this.motionY *= (double)0.95F;
--- net/minecraft/client/gui/container/InventoryScreen.java
+++ net/minecraft/client/gui/container/InventoryScreen.java
@@ -3,74 +3,210 @@
 import net.minecraft.client.gui.AchievementScreen;
 import net.minecraft.client.gui.component.GuiButton;
 import net.minecraft.client.gui.stats.StatsScreen;
+import net.minecraft.client.player.ClientNetPlayerEntity;
 import net.minecraft.client.render.RenderHelper;
 import net.minecraft.client.render.RenderManager;
+import net.minecraft.client.render.entity.RenderItem;
+import net.minecraft.game.entity.player.ArmorSlot;
+import net.minecraft.game.entity.player.PlayerContainerCreative;
 import net.minecraft.game.entity.player.PlayerEntity;
+import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.item.recipe.CraftingManager;
+import net.minecraft.game.item.recipe.CraftingRecipe;
+import net.minecraft.game.item.slot.CreativeSlot;
+import net.minecraft.game.item.slot.Slot;
 import net.minecraft.game.stats.achievement.AchievementList;
+import net.minecraft.game.world.block.Block;
+import net.minecraft.network.packet.Packet107CreativeSetSlot;
+import net.minecraft.network.packet.Packet109Craft;
+import net.minecraft.util.Pair;
+import net.minecraft.util.StringTranslate;
+import net.minecraft.util.Triplet;
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import java.util.List;
+
 public class InventoryScreen extends ContainerScreen {
 	private float xSize_lo;
 	private float ySize_lo;
 
-	public InventoryScreen(PlayerEntity var1) {
+	public GuiButton lastPageButton;
+	public GuiButton nextPageButton;
+
+	public boolean extendedCrafting;
+	private List<Triplet<String, Boolean, CraftingRecipe>> recipes;
+
+	public int selectedInterface;
+	public int craftScroll = 0;
+	public boolean craftDrag = false;
+
+	private static final RenderItem ITEM_RENDERER = new RenderItem();
+
+	public InventoryScreen(PlayerEntity var1, boolean extendedCrafting) {
 		super(var1.inventorySlots);
 		this.field_948_f = true;
 		var1.addStat(AchievementList.openInventory, 1);
+		this.extendedCrafting = extendedCrafting;
+		this.selectedInterface = extendedCrafting ? 1 : 0;
+		this.updateArmorSlots();
 	}
 
 	public void initGui() {
+		Mouse.getDWheel();
 		this.controlList.clear();
+		int var3 = (this.width - this.xSize) / 2;
+		int var4 = (this.height - this.ySize) / 2;
+		if(this.mc.theWorld.isCreativeWorld()) {
+			this.controlList.add(this.lastPageButton = new GuiButton(500, var3 + 7 + this.xSize, var4 + 6, 20, 20, "<"));
+			this.controlList.add(this.nextPageButton = new GuiButton(501, var3 + 7 + this.xSize + 88, var4 + 6, 20, 20, ">"));
+		}
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 86, 16, 4210752);
+		//this.fontRenderer.drawString("Crafting", 86, 16, 4210752);
+		int var3 = (this.width - this.xSize) / 2;
+		int var4 = (this.height - this.ySize) / 2;
+		if(extendedCrafting) {
+			this.fontRenderer.drawString("+",(-17)+11,(7+24)+10,0xff58f967);
+			GL11.glColor4f(1F,1F,1F,1F);
+		}
+		if(inventorySlots instanceof PlayerContainerCreative) {
+			int pages = (int)Math.ceil(PlayerContainerCreative.creativeItems.size()/36.0);
+			String s = (((PlayerContainerCreative) inventorySlots).page+1)+"/"+pages;
+			this.fontRenderer.drawString(s, (this.xSize + (122/2)) - (this.fontRenderer.getStringWidth(s)/2), 12, 4210752);
+		}
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
 		super.drawScreen(var1, var2, var3);
+		int var4 = (this.width - this.xSize) / 2;
+		int var5 = (this.height - this.ySize) / 2;
+		StringBuilder tooltip = new StringBuilder();
 		this.xSize_lo = (float)var1;
 		this.ySize_lo = (float)var2;
+		if(selectedInterface == 1) {
+			recipes = CraftingManager.getInstance().getAvailableRecipes(this.mc.thePlayer.inventory,extendedCrafting);
+			GL11.glPushMatrix();
+			GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
+			RenderHelper.enableStandardItemLighting();
+			GL11.glPopMatrix();
+			GL11.glPushMatrix();
+			GL11.glTranslatef((float)var4, (float)var5, 0.0F);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+			for(int i=0; i < Math.min(16,recipes.size()); i++) {
+				if(i + getInterfaceOffset() >= recipes.size()) break;
+				Triplet<String, Boolean, CraftingRecipe> recipe = recipes.get(i+getInterfaceOffset());
+				if(recipe == null) break;
+				int x = ((i%4)*18)+53;
+				int y = 8+((i/4)*18);
+				ITEM_RENDERER.renderItemIntoGUI(this.fontRenderer,this.mc.textureRegistry,recipe.right.result,x,y);
+				ITEM_RENDERER.renderItemOverlayIntoGUI(this.mc.fontRenderer, this.mc.textureRegistry, recipe.right.result,x,y);
+				if(var1 >= var4+x-1 && var1 <= var4+x+16 && var2 >= var5+y-1 && var2 <= var5+y+16) {
+					if(recipe.middle) {
+						GL11.glDisable(GL11.GL_DEPTH_TEST);
+						GL11.glDisable(GL11.GL_LIGHTING);
+						this.drawGradientRect(x, y, x + 16, y + 16, -2130706433, -2130706433);
+						GL11.glEnable(GL11.GL_LIGHTING);
+						GL11.glEnable(GL11.GL_DEPTH_TEST);
+					}
+					tooltip = new StringBuilder(StringTranslate.getInstance().translateNamedKey(recipe.right.result.getItemName()) + "\nRequires:\n");
+					for(ItemStack item : recipe.right.inputs) {
+						tooltip.append(" ").append(item.count).append("x ").append(StringTranslate.getInstance().translateNamedKey(item.getItemName())).append("\n");
+					}
+				}
+				if(!recipe.middle) {
+					GL11.glDisable(GL11.GL_DEPTH_TEST);
+					GL11.glDisable(GL11.GL_LIGHTING);
+					this.drawRect(x,y,x+16,y+16,0x80000000);
+					GL11.glEnable(GL11.GL_LIGHTING);
+					GL11.glEnable(GL11.GL_DEPTH_TEST);
+				}
+			}
+			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+			RenderHelper.disableStandardItemLighting();
+			GL11.glDisable(GL11.GL_LIGHTING);
+			GL11.glDisable(GL11.GL_DEPTH_TEST);
+			GL11.glPopMatrix();
+		}
+		if(tooltip.length() > 0) {
+			String s = tooltip.toString();
+			if(s.endsWith("\n"))
+				s = s.substring(0,s.length()-1);
+			drawTooltip(var1,var2, s);
+		}
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.textureRegistry.getTexture("/gui/inventory.png");
+		int wheel = Math.min(1,Math.max(-1,Mouse.getDWheel()));
+		if (wheel != 0) {
+			if(selectedInterface == 0 && inventorySlots instanceof PlayerContainerCreative) {
+				((PlayerContainerCreative) inventorySlots).setPage(((PlayerContainerCreative) inventorySlots).page - wheel);
+			} else if(selectedInterface == 1) {
+				this.craftScroll = Math.min(getScrollMax(),Math.max(0,this.craftScroll-wheel));
+			}
+		}
+		int var2 = selectedInterface == 0 ? this.mc.textureRegistry.getTexture("/gui/inventory.png") : this.mc.textureRegistry.getTexture("/gui/crafting.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.textureRegistry.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedRect(var3, var4, 0, 0, this.xSize, this.ySize);
+		int creativeTexture = this.mc.textureRegistry.getTexture("/gui/creative.png");
+		this.mc.textureRegistry.bindTexture(creativeTexture);
+		if(inventorySlots instanceof PlayerContainerCreative) {
+			this.drawTexturedRect(var3 + this.xSize, var4, 0, 0, 122, this.ySize);
+		}
+		this.drawTexturedRect(var3-22,var4+3,122,0,22 + (selectedInterface == 0 ? 4 : 0),24);
+		this.drawTexturedRect(var3-22,var4+3+24,122,0,22 + (selectedInterface == 1 ? 4 : 0),24);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		GL11.glEnable(GL11.GL_COLOR_MATERIAL);
+
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(var3 + 51), (float)(var4 + 75), 50.0F);
-		float var5 = 30.0F;
-		GL11.glScalef(-var5, var5, var5);
-		GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
-		float var6 = this.mc.thePlayer.renderYawOffset;
-		float var7 = this.mc.thePlayer.rotationYaw;
-		float var8 = this.mc.thePlayer.rotationPitch;
-		float var9 = (float)(var3 + 51) - this.xSize_lo;
-		float var10 = (float)(var4 + 75 - 50) - this.ySize_lo;
-		GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
-		GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(-((float)Math.atan((double)(var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
-		this.mc.thePlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
-		this.mc.thePlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
-		this.mc.thePlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
-		this.mc.thePlayer.entityBrightness = 1.0F;
-		GL11.glTranslatef(0.0F, this.mc.thePlayer.yOffset, 0.0F);
-		RenderManager.instance.playerViewY = 180.0F;
-		RenderManager.instance.renderEntityWithPosYaw(this.mc.thePlayer, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
-		this.mc.thePlayer.entityBrightness = 0.0F;
-		this.mc.thePlayer.renderYawOffset = var6;
-		this.mc.thePlayer.rotationYaw = var7;
-		this.mc.thePlayer.rotationPitch = var8;
 		GL11.glPopMatrix();
+		ITEM_RENDERER.renderItemIntoGUI(this.fontRenderer,this.mc.textureRegistry,new ItemStack(Block.chest),var3-17,var4+7);
+		ITEM_RENDERER.renderItemIntoGUI(this.fontRenderer,this.mc.textureRegistry,new ItemStack(Block.workbench),var3-17,var4+7+24);
 		RenderHelper.disableStandardItemLighting();
-		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+
+		if(selectedInterface == 0) {
+			GL11.glPushMatrix();
+			GL11.glTranslatef((float) (var3 + 51), (float) (var4 + 75), 50.0F);
+			float var5 = 30.0F;
+			GL11.glScalef(-var5, var5, var5);
+			GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
+			float var6 = this.mc.thePlayer.renderYawOffset;
+			float var7 = this.mc.thePlayer.rotationYaw;
+			float var8 = this.mc.thePlayer.rotationPitch;
+			float var9 = (float) (var3 + 51) - this.xSize_lo;
+			float var10 = (float) (var4 + 75 - 50) - this.ySize_lo;
+			GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
+			RenderHelper.enableStandardItemLighting();
+			GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-((float) Math.atan((double) (var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
+			this.mc.thePlayer.renderYawOffset = (float) Math.atan((double) (var9 / 40.0F)) * 20.0F;
+			this.mc.thePlayer.rotationYaw = (float) Math.atan((double) (var9 / 40.0F)) * 40.0F;
+			this.mc.thePlayer.rotationPitch = -((float) Math.atan((double) (var10 / 40.0F))) * 20.0F;
+			this.mc.thePlayer.entityBrightness = 1.0F;
+			GL11.glTranslatef(0.0F, this.mc.thePlayer.yOffset, 0.0F);
+			RenderManager.instance.playerViewY = 180.0F;
+			RenderManager.instance.renderEntityWithPosYaw(this.mc.thePlayer, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
+			this.mc.thePlayer.entityBrightness = 0.0F;
+			this.mc.thePlayer.renderYawOffset = var6;
+			this.mc.thePlayer.rotationYaw = var7;
+			this.mc.thePlayer.rotationPitch = var8;
+			GL11.glPopMatrix();
+			RenderHelper.disableStandardItemLighting();
+			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+		} else if(selectedInterface == 1) {
+			// 8,72
+			float divider = getScrollMax() == 0 ? 0F : 64F/(float)getScrollMax();
+			this.drawGradientRect(var3 + 124,var4 + 7 + Math.round(craftScroll * divider),(var3 + 124) + 8,(var4 + 7 + Math.round(craftScroll * divider)) + 8,0xffe8e8e8,0xffe8e8e8);
+		}
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -82,5 +218,150 @@
 			this.mc.displayGuiScreen(new StatsScreen(this, this.mc.statFileWriter));
 		}
 
+		if(var1.id == 500) {
+			if(inventorySlots instanceof PlayerContainerCreative) {
+				((PlayerContainerCreative) inventorySlots).setPage(((PlayerContainerCreative) inventorySlots).page-1);
+			}
+		}
+		if(var1.id == 501) {
+			if(inventorySlots instanceof PlayerContainerCreative) {
+				((PlayerContainerCreative) inventorySlots).setPage(((PlayerContainerCreative) inventorySlots).page+1);
+			}
+		}
+
+	}
+
+	public void updateArmorSlots() {
+		for(int i=36; i <= 39; i++) {
+			Slot s = inventorySlots.getSlot(i);
+			if(s instanceof ArmorSlot) {
+				((ArmorSlot) s).visible = selectedInterface == 0;
+			}
+		}
+	}
+
+	@Override
+	protected void mouseClicked(int var1, int var2, int button) {
+		int var3 = (this.width - this.xSize) / 2;
+		int var4 = (this.height - this.ySize) / 2;
+		// var3 + 124,var4 + 7 + craftScroll,(var3 + 124) + 8,(var4 + 7 + craftScroll) + 7
+		if(selectedInterface == 1) {
+			float divider = getScrollMax() == 0 ? 0F : 64F/(float)getScrollMax();
+			if (var1 >= var3 + 124 && var1 < (var3 + 124) + 8 && var2 >= var4 + 7 + (craftScroll*divider) && var2 <= (var4 + 7 + (craftScroll*divider)) + 7) {
+				craftDrag = true;
+				return;
+			}
+			if(recipes != null) {
+				for (int i = 0; i < Math.min(16, recipes.size()); i++) {
+					if(i + getInterfaceOffset() >= recipes.size()) break;
+					Triplet<String, Boolean, CraftingRecipe> recipe = recipes.get(i + getInterfaceOffset());
+					if (recipe == null) break;
+					int x = ((i % 4) * 18) + 53;
+					int y = 8 + ((i / 4) * 18);
+					if (var1 >= var3 + x - 1 && var1 <= var3 + x + 16 && var2 >= var4 + y - 1 && var2 <= var4 + y + 16) {
+						if (recipe.middle)
+							craft(recipe.left, recipe.right);
+						break;
+					}
+				}
+			}
+		}
+		if(var1 >= var3-22 && var1 < var3 && var2 >= var4+3) {
+			if(var2 < var4+3+24) {
+				this.selectedInterface = 0;
+				updateArmorSlots();
+				return;
+			} else if(var2 < var4+3+(24*2)) {
+				this.selectedInterface = 1;
+				updateArmorSlots();
+				return;
+			}
+		}
+		if(this.mc.theWorld.isCreativeWorld()) {
+			if (inventorySlots instanceof PlayerContainerCreative) {
+				int start = ((PlayerContainerCreative) inventorySlots).creativeSlotsStart;
+				Slot s = this.getSlotAtPosition(var1, var2);
+				if (s instanceof CreativeSlot) {
+					if (Keyboard.isKeyDown(Keyboard.KEY_RSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {
+						if (this.mc.thePlayer.inventory.getItemStack() == null || this.mc.thePlayer.inventory.getItemStack().isItemEqual(s.getStack())) {
+							ItemStack stack = new ItemStack(((CreativeSlot) s).item.getItem(),((CreativeSlot) s).item.getItem().getItemStackLimit(),((CreativeSlot) s).item.getItemDamage());
+							this.mc.thePlayer.inventory.setItemStack(stack);
+							if(this.mc.theWorld.remoteWorld) {
+								ItemStack st = this.mc.thePlayer.inventory.getItemStack();
+								((ClientNetPlayerEntity)this.mc.thePlayer).sendQueue.addToSendQueue(new Packet107CreativeSetSlot(-1,st));
+							}
+						}
+						return;
+					}
+					if (this.mc.thePlayer.inventory.getItemStack() == null) {
+						this.mc.thePlayer.inventory.setItemStack(s.decrStackSize(1));
+						if(this.mc.theWorld.remoteWorld) {
+							ItemStack stack = this.mc.thePlayer.inventory.getItemStack();
+							((ClientNetPlayerEntity)this.mc.thePlayer).sendQueue.addToSendQueue(new Packet107CreativeSetSlot(-1,stack));
+						}
+						return;
+					} else if (this.mc.thePlayer.inventory.getItemStack().isItemEqual(s.getStack())) {
+						ItemStack stack = this.mc.thePlayer.inventory.getItemStack();
+						if (stack.count + 1 <= stack.getMaxStackSize()) stack.count += 1;
+						if(this.mc.theWorld.remoteWorld) {
+							((ClientNetPlayerEntity)this.mc.thePlayer).sendQueue.addToSendQueue(new Packet107CreativeSetSlot(-1,stack));
+						}
+						return;
+					} else {
+						this.mc.thePlayer.inventory.setItemStack(null);
+						if(this.mc.theWorld.remoteWorld) {
+							((ClientNetPlayerEntity)this.mc.thePlayer).sendQueue.addToSendQueue(new Packet107CreativeSetSlot(-1,null));
+						}
+						return;
+					}
+				}
+			}
+		}
+		super.mouseClicked(var1, var2, button);
+	}
+
+	protected void mouseMovedOrUp(int var1, int var2, int var3) {
+		int var4 = (this.width - this.xSize) / 2;
+		int var5 = (this.height - this.ySize) / 2;
+		if(var3 == 0) {
+			this.craftDrag = false;
+		} else if(this.craftDrag){
+			int offset = var2 - (var5 + 7) - 4;
+			float divider = getScrollMax() == 0 ? 0F : 64F/(float)getScrollMax();
+			this.craftScroll = Math.min(getScrollMax(),Math.max(0,Math.round(offset/divider)));
+		}
+		super.mouseMovedOrUp(var1, var2, var3);
+	}
+
+	private int getInterfaceOffset() {
+		return craftScroll*4;
+	}
+
+	public void craft(String name, CraftingRecipe recipe) {
+		if(this.mc.thePlayer.inventory.getItemStack() != null) {
+			if (this.mc.thePlayer.inventory.getItemStack().id != recipe.result.id) return;
+			if (this.mc.thePlayer.inventory.getItemStack().count + recipe.result.count > recipe.result.getItem().getItemStackLimit())
+				return;
+		}
+		for(ItemStack stack : recipe.inputs) {
+			for(int i=0; i < stack.count; i++) {
+				this.mc.thePlayer.inventory.consumeInventoryItem(stack.id,stack.getItemDamage());
+			}
+		}
+		if(this.mc.thePlayer.inventory.getItemStack() == null)
+			this.mc.thePlayer.inventory.setItemStack(recipe.result.copy());
+		else {
+			ItemStack stack = this.mc.thePlayer.inventory.getItemStack().copy();
+			stack.count += recipe.result.count;
+			this.mc.thePlayer.inventory.setItemStack(stack);
+		}
+		if(this.mc.theWorld.remoteWorld) {
+			((ClientNetPlayerEntity)this.mc.thePlayer).sendQueue.addToSendQueue(new Packet109Craft(name));
+		}
+	}
+
+	public int getScrollMax() {
+		if(recipes == null) return 0;
+		return (int)Math.ceil((float)Math.max(0,recipes.size()-16)/4F);
 	}
 }
--- net/minecraft/game/item/HoeItem.java
+++ net/minecraft/game/item/HoeItem.java
@@ -1,5 +1,6 @@
 package net.minecraft.game.item;
 
+import net.minecraft.game.entity.misc.ItemEntity;
 import net.minecraft.game.entity.player.PlayerEntity;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
@@ -24,6 +25,18 @@
 			} else {
 				var3.setBlockWithNotify(var4, var5, var6, var10.blockID);
 				var1.damageItem(1, var2);
+				if(var3.rand.nextInt(4) == 0 && var8 == Block.grass.blockID) {
+					byte var11 = 1;
+
+					for(int var12 = 0; var12 < var11; ++var12) {
+						float var13 = 0.7F;
+						float var14 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
+						float var16 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
+						ItemEntity var17 = new ItemEntity(var3, (double)((float)var4 + var14), (double)((float)var5 + 1.2), (double)((float)var6 + var16), new ItemStack(Item.seeds));
+						var17.delayBeforeCanPickup = 10;
+						var3.entityJoinedWorld(var17);
+					}
+				}
 				return true;
 			}
 		}
--- net/minecraft/game/item/PickaxeItem.java
+++ net/minecraft/game/item/PickaxeItem.java
@@ -4,7 +4,7 @@
 import net.minecraft.game.world.material.Material;
 
 public class PickaxeItem extends ToolItem {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.doubleStoneSlab, Block.stoneSlab, Block.stone, Block.sandstone, Block.mossyCobblestone, Block.ironOre, Block.ironBlock, Block.coalOre, Block.goldBlock, Block.goldOre, Block.diamondOre, Block.diamondBlock, Block.ice, Block.netherrack, Block.lapisOre, Block.lapisBlock};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.doubleStoneSlab, Block.stoneSlab, Block.stone, Block.sandstone, Block.mossyCobblestone, Block.ironOre, Block.ironBlock, Block.coalOre, Block.goldBlock, Block.goldOre, Block.diamondOre, Block.diamondBlock, Block.ice, Block.netherrack, Block.lapisOre, Block.lapisBlock, Block.limestone, Block.granite};
 
 	protected PickaxeItem(int var1, ToolMaterial var2) {
 		super(var1, 2, var2, blocksEffectiveAgainst);
--- net/minecraft/game/entity/player/InventoryPlayer.java
+++ net/minecraft/game/entity/player/InventoryPlayer.java
@@ -28,6 +28,17 @@
 		return 9;
 	}
 
+	private int getInventorySlotContainItem(int var1, int metadata) {
+		if(metadata == -1) return getInventorySlotContainItem(var1);
+		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
+			if(this.mainInventory[var2] != null && this.mainInventory[var2].id == var1 && this.mainInventory[var2].getItemDamage() == metadata) {
+				return var2;
+			}
+		}
+
+		return -1;
+	}
+
 	private int getInventorySlotContainItem(int var1) {
 		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
 			if(this.mainInventory[var2] != null && this.mainInventory[var2].id == var1) {
@@ -140,6 +151,19 @@
 		}
 	}
 
+	public boolean consumeInventoryItem(int var1, int metadata) {
+		int var2 = this.getInventorySlotContainItem(var1,metadata);
+		if(var2 < 0) {
+			return false;
+		} else {
+			if(--this.mainInventory[var2].count <= 0) {
+				this.mainInventory[var2] = null;
+			}
+
+			return true;
+		}
+	}
+
 	public boolean addItemStackToInventory(ItemStack var1) {
 		int var2;
 		if(var1.isItemDamaged()) {
@@ -271,7 +295,7 @@
 	}
 
 	public int getStackLimit() {
-		return 64;
+		return 100;
 	}
 
 	public int getDamageVsEntity(Entity var1) {
--- net/minecraft/game/world/block/FireBlock.java
+++ net/minecraft/game/world/block/FireBlock.java
@@ -5,10 +5,11 @@
 import net.minecraft.game.world.BlockAccess;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
+import net.minecraft.util.SharedConstants;
 
 public class FireBlock extends Block {
-	private int[] chanceToEncourageFire = new int[256];
-	private int[] abilityToCatchFire = new int[256];
+	private int[] chanceToEncourageFire = new int[SharedConstants.BLOCK_LIMIT];
+	private int[] abilityToCatchFire = new int[SharedConstants.BLOCK_LIMIT];
 
 	protected FireBlock(int var1, int var2) {
 		super(var1, var2, Material.fire);
--- net/minecraft/game/world/terrain/feature/DungeonFeature.java
+++ net/minecraft/game/world/terrain/feature/DungeonFeature.java
@@ -1,6 +1,7 @@
 package net.minecraft.game.world.terrain.feature;
 
 import java.util.Random;
+
 import net.minecraft.game.item.Item;
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.game.world.World;
--- net/minecraft/game/world/terrain/generate/TerrainGenerator.java
+++ net/minecraft/game/world/terrain/generate/TerrainGenerator.java
@@ -8,7 +8,7 @@
 	protected int range = 8;
 	protected Random rand = new Random();
 
-	public void generate(ChunkProvider var1, World var2, int var3, int var4, byte[] var5) {
+	public void generate(ChunkProvider var1, World var2, int var3, int var4, short[] var5) {
 		int var6 = this.range;
 		this.rand.setSeed(var2.getRandomSeed());
 		long var7 = this.rand.nextLong() / 2L * 2L + 1L;
@@ -23,6 +23,6 @@
 
 	}
 
-	protected void generateRecursive(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void generateRecursive(World var1, int var2, int var3, int var4, int var5, short[] var6) {
 	}
 }
--- net/minecraft/game/item/FoodItem.java
+++ net/minecraft/game/item/FoodItem.java
@@ -11,12 +11,13 @@
 		super(var1);
 		this.healAmount = var2;
 		this.isWolfsFavoriteMeat = var3;
-		this.maxStackSize = 1;
+		this.maxStackSize = 4;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, PlayerEntity var3) {
 		--var1.count;
 		var3.heal(this.healAmount);
+		var3.damageSprintRecover = 0;
 		return var1;
 	}
 
--- net/minecraft/client/render/texture/TextureFlamesFX.java
+++ net/minecraft/client/render/texture/TextureFlamesFX.java
@@ -7,7 +7,7 @@
 	protected float[] field_1132_h = new float[320];
 
 	public TextureFlamesFX(int var1) {
-		super(Block.fire.textureIndex + var1 * 16);
+		super(Block.fire.textureIndex + var1 * 32);
 	}
 
 	public void onTick() {
--- net/minecraft/game/item/recipe/RecipesCrafting.java
+++ net/minecraft/game/item/recipe/RecipesCrafting.java
@@ -5,9 +5,13 @@
 
 public class RecipesCrafting {
 	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
+		/*var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
 		var1.addRecipe(new ItemStack(Block.furnace), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
 		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.sandstone), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});
+		var1.addRecipe(new ItemStack(Block.sandstone), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});*/
+		var1.r("workbench",true,new ItemStack(Block.workbench),new ItemStack(Block.planks,4,-1));
+		var1.r("furnace",false,new ItemStack(Block.furnace),new ItemStack(Block.cobblestone,8,-1));
+		var1.r("chest",false,new ItemStack(Block.chest),new ItemStack(Block.planks,8,-1));
+		var1.r("sandstone",true,new ItemStack(Block.sandstone),new ItemStack(Block.sand,4));
 	}
 }
--- net/minecraft/network/packet/Packet51MapChunk.java
+++ net/minecraft/network/packet/Packet51MapChunk.java
@@ -33,7 +33,7 @@
 		this.chunkSize = var1.readInt();
 		byte[] var2 = new byte[this.chunkSize];
 		var1.readFully(var2);
-		this.chunk = new byte[this.xSize * this.ySize * this.zSize * 5 / 2];
+		this.chunk = new byte[this.xSize * this.ySize * this.zSize * 8 / 2];
 		Inflater var3 = new Inflater();
 		var3.setInput(var2);
 
@@ -80,7 +80,7 @@
 		try {
 			var9.setInput(var8);
 			var9.finish();
-			this.chunk = new byte[var4 * var5 * var6 * 5 / 2];
+			this.chunk = new byte[var4 * var5 * var6 * 8 / 2];
 			this.chunkSize = var9.deflate(this.chunk);
 		} finally {
 			var9.end();
--- net/minecraft/game/entity/animal/CowEntity.java
+++ net/minecraft/game/entity/animal/CowEntity.java
@@ -11,6 +11,7 @@
 		super(var1);
 		this.texture = "/mob/cow.png";
 		this.setSize(0.9F, 1.3F);
+		this.scoreValue = 5;
 	}
 
 	public void writeEntityToNBT(CompoundTag var1) {
@@ -37,9 +38,28 @@
 		return 0.4F;
 	}
 
-	protected int getDropItemId() {
+	protected void dropFewItems() {
+		int var2 = this.rand.nextInt(3);
+
+		int var3;
+		for(var3 = 0; var3 < var2; ++var3) {
+			this.dropItem(Item.leather.itemID, 1);
+		}
+
+		var2 = this.rand.nextInt(3) + 1;
+
+		for(var3 = 0; var3 < var2; ++var3) {
+			if(this.fire > 0) {
+				this.dropItem(Item.cookedBeef.itemID, 1);
+			} else {
+				this.dropItem(Item.rawBeef.itemID, 1);
+			}
+		}
+	}
+
+	/*protected int getDropItemId() {
 		return Item.leather.itemID;
-	}
+	}*/
 
 	public boolean onInteract(PlayerEntity var1) {
 		ItemStack var2 = var1.inventory.getCurrentItem();
--- /dev/null
+++ net/minecraft/game/entity/player/PlayerContainerCreative.java
@@ -1,0 +1,90 @@
+package net.minecraft.game.entity.player;
+
+import net.minecraft.game.item.Item;
+import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.item.slot.CreativeSlot;
+import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PlayerContainerCreative extends PlayerContainer {
+    public static List<ItemStack> creativeItems = new ArrayList();
+    public int creativeSlotsStart;
+    public int page = 0;
+
+    public PlayerContainerCreative(InventoryPlayer var1) {
+        this(var1, true);
+    }
+
+    public ItemStack getItem(int i) {
+        if(i >= creativeItems.size())
+            return null;
+        return creativeItems.get(i);
+    }
+
+    public PlayerContainerCreative(InventoryPlayer var1, boolean var2) {
+        super(var1, var2);
+        this.creativeSlotsStart = this.inventorySlots.size();
+        if(creativeItems.isEmpty()) {
+            // Construct Creative List
+            try {
+                BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/item/creative.txt")));
+                while(true) {
+                    String line = reader.readLine();
+                    if(line == null) {
+                        break;
+                    }
+                    if(line.startsWith("tile.")) {
+                        String name = line.contains(":") ? line.substring(0,line.indexOf(":")) : line;
+                        int metadata = line.contains(":") ? Integer.valueOf(line.substring(line.indexOf(":")+1)) : 0;
+                        boolean found = false;
+                        for(int i=0; i < SharedConstants.BLOCK_LIMIT; i++) {
+                            if(Block.blocksList[i] == null || Block.blocksList[i].getName() == null)
+                                continue;
+                            if(Block.blocksList[i].getName().equals(name)) {
+                                creativeItems.add(new ItemStack(Block.blocksList[i],1,metadata));
+                                found = true;
+                                break;
+                            }
+                        }
+                        if(!found)
+                            throw new RuntimeException("Tile "+line+" in the creative menu list is invalid!");
+                    } else {
+                        throw new RuntimeException("Item "+line+" in the creative menu list is invalid!");
+                    }
+                }
+                reader.close();
+            } catch(IOException e) {
+                throw new RuntimeException(e);
+            }
+            for(int i=SharedConstants.BLOCK_LIMIT; i < 32768; i++) {
+                if(Item.itemsList[i] != null) {
+                    int[] damages = Item.itemsList[i].getCreativeDamageValues();
+                    for(int j=0; j < damages.length; j++) {
+                        creativeItems.add(new ItemStack(Item.itemsList[i], 1, damages[j]));
+                    }
+                }
+            }
+        }
+        for(int i = 0; i < 36; ++i) {
+            int x = i % 6;
+            int y = i / 6;
+            this.addSlot(new CreativeSlot(var1, this.creativeSlotsStart + i, 184 + x * 18, 30 + y * 18, getItem(i)));
+        }
+    }
+
+    public void setPage(int newPage) {
+        if(newPage < 0) return;
+        if(newPage > (creativeItems.size()/36)) return;
+        page = newPage;
+        for(int i = 0; i < 36; ++i) {
+            ((CreativeSlot)this.getSlot(this.creativeSlotsStart + i)).item = getItem(i+(page*36));
+        }
+    }
+}
--- net/minecraft/game/item/DyeItem.java
+++ net/minecraft/game/item/DyeItem.java
@@ -20,7 +20,7 @@
 	}
 
 	public int getTextureFromDamage(int var1) {
-		return this.textureIndex + var1 % 8 * 16 + var1 / 8;
+		return this.textureIndex + var1 % 8 * 32 + var1 / 8;
 	}
 
 	public String getNameFromStack(ItemStack var1) {
@@ -33,7 +33,8 @@
 			if(var8 == Block.sapling.blockID) {
 				if(!var3.remoteWorld) {
 					((SaplingBlock)Block.sapling).growTree(var3, var4, var5, var6, var3.rand);
-					--var1.count;
+					if(!var3.isCreativeWorld())
+						--var1.count;
 				}
 
 				return true;
@@ -42,7 +43,8 @@
 			if(var8 == Block.crops.blockID) {
 				if(!var3.remoteWorld) {
 					((CropsBlock)Block.crops).fertilize(var3, var4, var5, var6);
-					--var1.count;
+					if(!var3.isCreativeWorld())
+						--var1.count;
 				}
 
 				return true;
@@ -50,7 +52,8 @@
 
 			if(var8 == Block.grass.blockID) {
 				if(!var3.remoteWorld) {
-					--var1.count;
+					if(!var3.isCreativeWorld())
+						--var1.count;
 
 					label53:
 					for(int var9 = 0; var9 < 128; ++var9) {
@@ -92,9 +95,14 @@
 			int var4 = WoolBlock.funkyMetaStuffA(var1.getItemDamage());
 			if(!var3.getSheared() && var3.getFleeceColor() != var4) {
 				var3.setFleeceColor(var4);
-				--var1.count;
+				if(!var3.worldObj.isCreativeWorld())
+					--var1.count;
 			}
 		}
 
+	}
+
+	public int[] getCreativeDamageValues() {
+		return new int[]{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 	}
 }
--- /dev/null
+++ net/minecraft/client/gui/CreditsScreen.java
@@ -1,0 +1,67 @@
+package net.minecraft.client.gui;
+
+import net.minecraft.util.SharedConstants;
+import org.lwjgl.opengl.GL11;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+public class CreditsScreen extends GuiScreen {
+    private final List<String> lines = new ArrayList<>();
+    private int updateCounter;
+    private final GuiScreen parent;
+
+    public CreditsScreen(GuiScreen parent) {
+        this.parent = parent;
+        try {
+            BufferedReader creditsReader = new BufferedReader(
+                    new InputStreamReader(
+                            Objects.requireNonNull(
+                                    CreditsScreen.class.getResourceAsStream("/title/credits.txt"))));
+            String line;
+            while ((line = creditsReader.readLine()) != null) {
+                lines.add(line.replace("%version%", SharedConstants.SHORTENED_VERSION));
+            }
+        } catch (IOException e) {
+            System.err.println("Couldn't retrieve credits!");
+            e.printStackTrace();
+        }
+    }
+
+    protected void keyTyped(char var1, int var2) {
+        this.mc.displayGuiScreen(parent);
+    }
+
+    protected void mouseClicked(int var1, int var2, int var3) {
+        this.mc.displayGuiScreen(parent);
+    }
+
+    public void updateScreen() {
+        super.updateScreen();
+        this.updateCounter++;
+        ScaledResolution res = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+        if ((this.height + this.lines.size() * 10 - this.updateCounter) * res.scaleFactor < 0) {
+            this.mc.displayGuiScreen(parent);
+        }
+    }
+
+
+    public void drawScreen(int var1, int var2, float var3) {
+        float progress = this.updateCounter + var3;
+        this.mc.sndManager.playMenuMusic();
+        this.drawDefaultBackground(var3);
+        this.drawGradientRect(0,0,width,height,0x7F000000,0x00000000);
+        this.drawGradientRect(0,0,width,height,0x00000000,0x7F000000);
+        GL11.glTranslatef(0.0F, -progress, 0.0F);
+        int y = 0;
+        for (String line : this.lines) {
+            this.drawCenteredString(this.fontRenderer, line, this.width / 2, this.height + y, 0xFFFFFF);
+            y += 10;
+        }
+        GL11.glTranslatef(0.0F, progress, 0.0F);
+    }
+}
--- net/minecraft/game/world/block/WoolBlock.java
+++ net/minecraft/game/world/block/WoolBlock.java
@@ -2,18 +2,15 @@
 
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class WoolBlock extends Block {
 	public WoolBlock() {
-		super(35, 64, Material.cloth);
+		super(35, getAtlasTexture(31,10), Material.cloth);
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		if(var2 == 0) {
-			return this.textureIndex;
-		} else {
-			var2 = ~(var2 & 15);
-			return 113 + ((var2 & 8) >> 3) + (var2 & 7) * 16;
-		}
+		return getAtlasTexture(31,10 + var2);
 	}
 
 	protected int damageDropped(int var1) {
--- /dev/null
+++ net/minecraft/game/item/recipe/CraftingRecipe.java
@@ -1,0 +1,23 @@
+package net.minecraft.game.item.recipe;
+
+import net.minecraft.game.entity.player.InventoryCrafting;
+import net.minecraft.game.item.ItemStack;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class CraftingRecipe {
+    public ItemStack result;
+    public List<ItemStack> inputs;
+    public boolean byHand;
+
+    public CraftingRecipe(boolean hand, ItemStack result, ItemStack... inputs) {
+        this(hand,result, Arrays.asList(inputs));
+    }
+
+    public CraftingRecipe(boolean hand, ItemStack result, List<ItemStack> inputs) {
+        this.byHand = hand;
+        this.result = result;
+        this.inputs = inputs;
+    }
+}
--- /dev/null
+++ net/minecraft/client/model/mechanical/WindMillModel.java
@@ -1,0 +1,41 @@
+package net.minecraft.client.model.mechanical;
+
+import net.minecraft.client.model.EntityModel;
+import net.minecraft.client.model.ModelRenderer;
+
+public class WindMillModel extends EntityModel {
+    public ModelRenderer windMillComponents[];
+
+    public WindMillModel()
+    {
+        windMillComponents = new ModelRenderer[8];
+        for(int i = 0; i < 4; i++)
+        {
+            windMillComponents[i] = new ModelRenderer(0, 0);
+            windMillComponents[i].addBox(2.5F, -2F, -2F, 97, 4, 4);
+            windMillComponents[i].setRotationPoint(0.0F, 0.0F, 0.0F);
+            windMillComponents[i].rotateAngleZ = (3.141593F * (float)(i - 4)) / 2.0F;
+        }
+
+        for(int j = 4; j < 8; j++)
+        {
+            windMillComponents[j] = new ModelRenderer(0, 15);
+            windMillComponents[j].addBox(15F, 1.75F, 1.0F, 84, 16, 1);
+            windMillComponents[j].setRotationPoint(0.0F, 0.0F, 0.0F);
+            //windMillComponents[j].rotateAngleY = -0.2617994F;
+            windMillComponents[j].rotateAngleZ = (3.141593F * (float)j) / 2.0F;
+        }
+
+    }
+
+    public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
+        for(int i = 0; i < 4; i++)
+        {
+            windMillComponents[i].render(var6);
+        }
+        for(int j = 4; j < 8; j++)
+        {
+            windMillComponents[j].render(var6);
+        }
+    }
+}
--- net/minecraft/game/entity/projectile/ArrowEntity.java
+++ net/minecraft/game/entity/projectile/ArrowEntity.java
@@ -268,7 +268,7 @@
 
 	public void onCollideWithPlayer(PlayerEntity var1) {
 		if(!this.worldObj.remoteWorld) {
-			if(this.inGround && this.doesArrowBelongToPlayer && this.arrowShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow, 1))) {
+			if(this.inGround && this.doesArrowBelongToPlayer && this.arrowShake <= 0 && (this.worldObj.isCreativeWorld() || var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow, 1)))) {
 				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
 				var1.onItemPickup(this, 1);
 				this.setEntityDead();
--- net/minecraft/network/NetLoginHandler.java
+++ net/minecraft/network/NetLoginHandler.java
@@ -97,7 +97,7 @@
 			WorldServer var3 = this.mcServer.getWorldManager(var2.dimension);
 			BlockPos var4 = var3.getSpawnPoint();
 			NetServerHandler var5 = new NetServerHandler(this.mcServer, this.netManager, var2);
-			var5.sendPacket(new Packet1Login("", var2.entityId, var3.getRandomSeed(), (byte)var3.dimension.worldType));
+			var5.sendPacket(new Packet1Login("", var2.entityId, var3.getRandomSeed(), (byte)var3.dimension.worldType, var3.getWorldInfo().isCreative()));
 			var5.sendPacket(new Packet6SpawnPosition(var4.x, var4.y, var4.z));
 			this.mcServer.configManager.func_28170_a(var2, var3);
 			this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + var2.username + " joined the game."));
--- net/minecraft/server/MinecraftServer.java
+++ net/minecraft/server/MinecraftServer.java
@@ -52,6 +52,7 @@
 	public boolean spawnPeacefulMobs;
 	public boolean pvpOn;
 	public boolean allowFlight;
+	public boolean creativeMode;
 
 	public MinecraftServer() {
 		new ThreadSleepForever(this);
@@ -76,6 +77,7 @@
 		this.spawnPeacefulMobs = this.propertyManagerObj.getBooleanProperty("spawn-animals", true);
 		this.pvpOn = this.propertyManagerObj.getBooleanProperty("pvp", true);
 		this.allowFlight = this.propertyManagerObj.getBooleanProperty("allow-flight", false);
+		this.creativeMode = this.propertyManagerObj.getBooleanProperty("creative-mode", false);
 		InetAddress var3 = null;
 		if(var2.length() > 0) {
 			var3 = InetAddress.getByName(var2);
@@ -140,6 +142,7 @@
 			this.worldMngr[var6].addWorldAccess(new WorldManager(this, this.worldMngr[var6]));
 			this.worldMngr[var6].difficultySetting = this.propertyManagerObj.getBooleanProperty("spawn-monsters", true) ? 1 : 0;
 			this.worldMngr[var6].setAllowedSpawnTypes(this.propertyManagerObj.getBooleanProperty("spawn-monsters", true), this.spawnPeacefulMobs);
+			this.worldMngr[var6].getWorldInfo().setCreative(creativeMode);
 			this.configManager.setPlayerManager(this.worldMngr);
 		}
 
--- net/minecraft/game/world/terrain/SkyChunkProvider.java
+++ net/minecraft/game/world/terrain/SkyChunkProvider.java
@@ -61,7 +61,7 @@
 		this.treeNoise = new PerlinNoiseOctaves(this.rand, 8);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3, Biome[] var4, double[] var5) {
+	public void generateTerrain(int var1, int var2, short[] var3, Biome[] var4, double[] var5) {
 		byte var6 = 2;
 		int var7 = var6 + 1;
 		byte var8 = 33;
@@ -101,7 +101,7 @@
 									var52 = Block.stone.blockID;
 								}
 
-								var3[var43] = (byte)var52;
+								var3[var43] = (short)var52;
 								var43 += var44;
 								var47 += var49;
 							}
@@ -121,7 +121,7 @@
 
 	}
 
-	public void generateSurface(int var1, int var2, byte[] var3, Biome[] var4) {
+	public void generateSurface(int var1, int var2, short[] var3, Biome[] var4) {
 		double var5 = 1.0D / 32.0D;
 		this.sandNoiseArray = this.beachNoise.generateNoiseArray3D(this.sandNoiseArray, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
 		this.gravelNoiseArray = this.beachNoise.generateNoiseArray3D(this.gravelNoiseArray, (double)(var1 * 16), 109.0134D, (double)(var2 * 16), 16, 1, 16, var5, 1.0D, var5);
@@ -132,19 +132,19 @@
 				Biome var9 = var4[var7 + var8 * 16];
 				int var10 = (int)(this.erosionNoiseArray[var7 + var8 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
 				int var11 = -1;
-				byte var12 = var9.topBlock;
-				byte var13 = var9.fillerBlock;
+				short var12 = (short)var9.topBlock;
+				short var13 = (short)var9.fillerBlock;
 
 				for(int var14 = 127; var14 >= 0; --var14) {
 					int var15 = (var8 * 16 + var7) * 128 + var14;
-					byte var16 = var3[var15];
+					short var16 = var3[var15];
 					if(var16 == 0) {
 						var11 = -1;
 					} else if(var16 == Block.stone.blockID) {
 						if(var11 == -1) {
 							if(var10 <= 0) {
 								var12 = 0;
-								var13 = (byte)Block.stone.blockID;
+								var13 = (short)Block.stone.blockID;
 							}
 
 							var11 = var10;
@@ -158,7 +158,7 @@
 							var3[var15] = var13;
 							if(var11 == 0 && var13 == Block.sand.blockID) {
 								var11 = this.rand.nextInt(4);
-								var13 = (byte)Block.sandstone.blockID;
+								var13 = (short)Block.sandstone.blockID;
 							}
 						}
 					}
@@ -174,7 +174,7 @@
 
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
+		short[] var3 = new short[32768];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.biomesForGeneration = this.worldObj.getBiomeSource().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
 		double[] var5 = this.worldObj.getBiomeSource().temperature;
@@ -335,45 +335,45 @@
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(128);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.dirt.blockID, 32, false)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 10; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(128);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.gravel.blockID, 32, false)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 20; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(128);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.coalOre.blockID, 16)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.coalOre.blockID, 16, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 20; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(64);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.ironOre.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.ironOre.blockID, 8, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 2; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(32);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.goldOre.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.goldOre.blockID, 8, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 8; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(16);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.redstoneOre.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.redstoneOre.blockID, 7, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
-		for(var13 = 0; var13 < 1; ++var13) {
+		/*for(var13 = 0; var13 < 1; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(16);
 			var16 = var5 + this.rand.nextInt(16);
@@ -385,7 +385,7 @@
 			var15 = this.rand.nextInt(16) + this.rand.nextInt(16);
 			var16 = var5 + this.rand.nextInt(16);
 			(new OreFeature(Block.lapisOre.blockID, 6)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
+		}*/
 
 		var11 = 0.5D;
 		var13 = (int)((this.treeNoise.generateNoise2D((double)var4 * var11, (double)var5 * var11) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
@@ -394,7 +394,7 @@
 			++var14;
 		}
 
-		if(var6 == Biome.forest) {
+		/*if(var6 == Biome.forest) {
 			var14 += var13 + 5;
 		}
 
@@ -420,7 +420,7 @@
 
 		if(var6 == Biome.plains) {
 			var14 -= 20;
-		}
+		}*/
 
 		int var17;
 		for(var15 = 0; var15 < var14; ++var15) {
@@ -475,9 +475,9 @@
 		}
 
 		var15 = 0;
-		if(var6 == Biome.desert) {
+		/*if(var6 == Biome.desert) {
 			var15 += 10;
-		}
+		}*/
 
 		int var19;
 		for(var16 = 0; var16 < var15; ++var16) {
--- net/minecraft/network/NetServerHandler.java
+++ net/minecraft/network/NetServerHandler.java
@@ -7,31 +7,14 @@
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.player.InventoryPlayer;
 import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.item.recipe.CraftingManager;
+import net.minecraft.game.item.recipe.CraftingRecipe;
 import net.minecraft.game.item.slot.Slot;
 import net.minecraft.game.physics.AxisAlignedBB;
 import net.minecraft.game.world.BlockPos;
 import net.minecraft.game.world.block.tileentity.SignTileEntity;
 import net.minecraft.game.world.block.tileentity.TileEntity;
-import net.minecraft.network.packet.Packet;
-import net.minecraft.network.packet.Packet0KeepAlive;
-import net.minecraft.network.packet.Packet101CloseWindow;
-import net.minecraft.network.packet.Packet102WindowClick;
-import net.minecraft.network.packet.Packet103SetSlot;
-import net.minecraft.network.packet.Packet106Transaction;
-import net.minecraft.network.packet.Packet10Flying;
-import net.minecraft.network.packet.Packet130UpdateSign;
-import net.minecraft.network.packet.Packet13PlayerLookMove;
-import net.minecraft.network.packet.Packet14BlockDig;
-import net.minecraft.network.packet.Packet15Place;
-import net.minecraft.network.packet.Packet16BlockItemSwitch;
-import net.minecraft.network.packet.Packet18Animation;
-import net.minecraft.network.packet.Packet19EntityAction;
-import net.minecraft.network.packet.Packet255KickDisconnect;
-import net.minecraft.network.packet.Packet27Position;
-import net.minecraft.network.packet.Packet3Chat;
-import net.minecraft.network.packet.Packet53BlockChange;
-import net.minecraft.network.packet.Packet7UseEntity;
-import net.minecraft.network.packet.Packet9Respawn;
+import net.minecraft.network.packet.*;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.command.ICommandListener;
 import net.minecraft.server.player.ServerPlayerEntity;
@@ -213,7 +196,7 @@
 			var17 = var9 - this.playerEntity.posZ;
 			var19 = var13 * var13 + var15 * var15 + var17 * var17;
 			boolean var23 = false;
-			if(var19 > 1.0D / 16.0D && !this.playerEntity.isPlayerSleeping()) {
+			if(var19 > 1.0D / 16.0D && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.worldObj.isCreativeWorld()) {
 				var23 = true;
 				logger.warning(this.playerEntity.username + " moved wrongly!");
 				System.out.println("Got position " + var5 + ", " + var7 + ", " + var9);
@@ -228,7 +211,7 @@
 			}
 
 			AxisAlignedBB var25 = this.playerEntity.boundingBox.copy().expand((double)var21, (double)var21, (double)var21).addCoord(0.0D, -0.55D, 0.0D);
-			if(!this.mcServer.allowFlight && !var2.getIsAny(var25)) {
+			if((!this.mcServer.allowFlight && !(this.playerEntity.noClip && this.playerEntity.worldObj.isCreativeWorld())) && !var2.getIsAny(var25)) {
 				if(var15 >= -0.03125D) {
 					++this.playerInAirTime;
 					if(this.playerInAirTime > 80) {
@@ -608,6 +591,38 @@
 			}
 		}
 
+	}
+
+	public void handleCreativeSetSlot(Packet107CreativeSetSlot packet) {
+		if(!this.playerEntity.worldObj.isCreativeWorld()) {
+			logger.warning("Player " + this.playerEntity.username + "attempted to use the CreativeSetSlot packet to retrieve an item in a non creative world (hacking?)");
+			return;
+		}
+		if(packet.slotId == -1) {
+			this.playerEntity.inventory.setItemStack(packet.stack);
+		} else {
+			this.playerEntity.inventorySlots.getSlot(packet.slotId).putStack(packet.stack);
+		}
+	}
+
+	public void handleNoClip(Packet108NoClip packet) {
+		this.playerEntity.noClip = packet.noClip;
+	}
+
+	public void handleCraft(Packet109Craft packet) {
+		CraftingRecipe recipe = CraftingManager.getInstance().recipes.get(packet.name);
+		for(ItemStack stack : recipe.inputs) {
+			for(int i=0; i < stack.count; i++) {
+				this.playerEntity.inventory.consumeInventoryItem(stack.id,stack.getItemDamage());
+			}
+		}
+		if(this.playerEntity.inventory.getItemStack() == null)
+			this.playerEntity.inventory.setItemStack(recipe.result.copy());
+		else {
+			ItemStack stack = this.playerEntity.inventory.getItemStack().copy();
+			stack.count += recipe.result.count;
+			this.playerEntity.inventory.setItemStack(stack);
+		}
 	}
 
 	public boolean isServerHandler() {
--- net/minecraft/client/ThreadCheckHasPaid.java
+++ net/minecraft/client/ThreadCheckHasPaid.java
@@ -13,12 +13,12 @@
 	public void run() {
 		try {
 			HttpURLConnection var1 = (HttpURLConnection)(new URL("https://login.minecraft.net/session?name=" + this.field_28146_a.session.username + "&session=" + this.field_28146_a.session.sessionId)).openConnection();
-			var1.connect();
+			//var1.connect();
 			if(var1.getResponseCode() == 400) {
 				Minecraft.hasPaidCheckTime = System.currentTimeMillis();
 			}
 
-			var1.disconnect();
+			//var1.disconnect();
 		} catch (Exception var2) {
 			var2.printStackTrace();
 		}
--- /dev/null
+++ com/mojang/nbt/ShortArrayTag.java
@@ -1,0 +1,50 @@
+package com.mojang.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.util.Arrays;
+
+public class ShortArrayTag extends NBTBaseTag {
+    public short[] shortArray;
+
+    public ShortArrayTag() {
+    }
+
+    public ShortArrayTag(short[] var1) {
+        this.shortArray = var1;
+    }
+
+    protected void writeTagContents(DataOutput var1) throws IOException {
+        var1.writeInt(this.shortArray.length);
+        ByteBuffer buffer = ByteBuffer.allocate(this.shortArray.length * 2);
+        buffer.order(ByteOrder.BIG_ENDIAN);
+        buffer.asShortBuffer().put(this.shortArray);
+        byte[] bytes = buffer.array();
+        var1.write(bytes);
+    }
+
+    protected void readTagContents(DataInput var1) throws IOException {
+        int var2 = var1.readInt();
+        this.shortArray = new short[var2];
+        byte[] byteArray = new byte[var2 * 2];
+        var1.readFully(byteArray);
+        ByteBuffer buffer = ByteBuffer.wrap(byteArray);
+        buffer.order(ByteOrder.BIG_ENDIAN);
+        buffer.asShortBuffer().get(this.shortArray);
+    }
+
+    public byte getType() {
+        return (byte)13;
+    }
+
+    public String toString() {
+        return "[" + this.shortArray.length + " shorts]";
+    }
+
+    public NBTBaseTag copy() {
+        return new ShortArrayTag(Arrays.copyOf(this.shortArray, this.shortArray.length)).setKey(this.getKey());
+    }
+}
--- /dev/null
+++ net/minecraft/util/FastNoiseLite.java
@@ -1,0 +1,2610 @@
+// MIT License
+//
+// Copyright(c) 2023 Jordan Peck (jordan.me2@gmail.com)
+// Copyright(c) 2023 Contributors
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files(the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions :
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+//
+// .'',;:cldxkO00KKXXNNWWWNNXKOkxdollcc::::::;:::ccllloooolllllllllooollc:,'...        ...........',;cldxkO000Okxdlc::;;;,,;;;::cclllllll
+// ..',;:ldxO0KXXNNNNNNNNXXK0kxdolcc::::::;;;,,,,,,;;;;;;;;;;:::cclllllc:;'....       ...........',;:ldxO0KXXXK0Okxdolc::;;;;::cllodddddo
+// ...',:loxO0KXNNNNNXXKK0Okxdolc::;::::::::;;;,,'''''.....''',;:clllllc:;,'............''''''''',;:loxO0KXNNNNNXK0Okxdollccccllodxxxxxxd
+// ....';:ldkO0KXXXKK00Okxdolcc:;;;;;::cclllcc:;;,''..... ....',;clooddolcc:;;;;,,;;;;;::::;;;;;;:cloxk0KXNWWWWWWNXKK0Okxddoooddxxkkkkkxx
+// .....';:ldxkOOOOOkxxdolcc:;;;,,,;;:cllooooolcc:;'...      ..,:codxkkkxddooollloooooooollcc:::::clodkO0KXNWWWWWWNNXK00Okxxxxxxxxkkkkxxx
+// . ....';:cloddddo___________,,,,;;:clooddddoolc:,...      ..,:ldx__00OOOkkk___kkkkkkxxdollc::::cclodkO0KXXNNNNNNXXK0OOkxxxxxxxxxxxxddd
+// .......',;:cccc:|           |,,,;;:cclooddddoll:;'..     ..';cox|  \KKK000|   |KK00OOkxdocc___;::clldxxkO0KKKKK00Okkxdddddddddddddddoo
+// .......'',,,,,''|   ________|',,;;::cclloooooolc:;'......___:ldk|   \KK000|   |XKKK0Okxolc|   |;;::cclodxxkkkkxxdoolllcclllooodddooooo
+// ''......''''....|   |  ....'',,,,;;;::cclloooollc:;,''.'|   |oxk|    \OOO0|   |KKK00Oxdoll|___|;;;;;::ccllllllcc::;;,,;;;:cclloooooooo
+// ;;,''.......... |   |_____',,;;;____:___cllo________.___|   |___|     \xkk|   |KK_______ool___:::;________;;;_______...'',;;:ccclllloo
+// c:;,''......... |         |:::/     '   |lo/        |           |      \dx|   |0/       \d|   |cc/        |'/       \......',,;;:ccllo
+// ol:;,'..........|    _____|ll/    __    |o/   ______|____    ___|   |   \o|   |/   ___   \|   |o/   ______|/   ___   \ .......'',;:clo
+// dlc;,...........|   |::clooo|    /  |   |x\___   \KXKKK0|   |dol|   |\   \|   |   |   |   |   |d\___   \..|   |  /   /       ....',:cl
+// xoc;'...  .....'|   |llodddd|    \__|   |_____\   \KKK0O|   |lc:|   |'\       |   |___|   |   |_____\   \.|   |_/___/...      ...',;:c
+// dlc;'... ....',;|   |oddddddo\          |          |Okkx|   |::;|   |..\      |\         /|   |          | \         |...    ....',;:c
+// ol:,'.......',:c|___|xxxddollc\_____,___|_________/ddoll|___|,,,|___|...\_____|:\ ______/l|___|_________/...\________|'........',;::cc
+// c:;'.......';:codxxkkkkxxolc::;::clodxkOO0OOkkxdollc::;;,,''''',,,,''''''''''',,'''''',;:loxkkOOkxol:;,'''',,;:ccllcc:;,'''''',;::ccll
+// ;,'.......',:codxkOO0OOkxdlc:;,,;;:cldxxkkxxdolc:;;,,''.....'',;;:::;;,,,'''''........,;cldkO0KK0Okdoc::;;::cloodddoolc:;;;;;::ccllooo
+// .........',;:lodxOO0000Okdoc:,,',,;:clloddoolc:;,''.......'',;:clooollc:;;,,''.......',:ldkOKXNNXX0Oxdolllloddxxxxxxdolccccccllooodddd
+// .    .....';:cldxkO0000Okxol:;,''',,;::cccc:;,,'.......'',;:cldxxkkxxdolc:;;,'.......';coxOKXNWWWNXKOkxddddxxkkkkkkxdoollllooddxxxxkkk
+//       ....',;:codxkO000OOxdoc:;,''',,,;;;;,''.......',,;:clodkO00000Okxolc::;,,''..',;:ldxOKXNWWWNNK0OkkkkkkkkkkkxxddooooodxxkOOOOO000
+//       ....',;;clodxkkOOOkkdolc:;,,,,,,,,'..........,;:clodxkO0KKXKK0Okxdolcc::;;,,,;;:codkO0XXNNNNXKK0OOOOOkkkkxxdoollloodxkO0KKKXXXXX
+//
+// VERSION: 1.1.1
+// https://github.com/Auburn/FastNoiseLite
+
+// To switch between using floats or doubles for input position,
+// perform a file-wide replace on the following strings (including /*FNLfloat*/)
+// /*FNLfloat*/ float
+// /*FNLfloat*/ double
+package net.minecraft.util;
+
+public class FastNoiseLite
+{
+    public enum NoiseType
+    {
+        OpenSimplex2,
+        OpenSimplex2S,
+        Cellular,
+        Perlin,
+        ValueCubic,
+        Value
+    };
+
+    public enum RotationType3D
+    {
+        None,
+        ImproveXYPlanes,
+        ImproveXZPlanes
+    };
+
+    public enum FractalType
+    {
+        None,
+        FBm,
+        Ridged,
+        PingPong,
+        DomainWarpProgressive,
+        DomainWarpIndependent
+    };
+
+    public enum CellularDistanceFunction
+    {
+        Euclidean,
+        EuclideanSq,
+        Manhattan,
+        Hybrid
+    };
+
+    public enum CellularReturnType
+    {
+        CellValue,
+        Distance,
+        Distance2,
+        Distance2Add,
+        Distance2Sub,
+        Distance2Mul,
+        Distance2Div
+    };
+
+    public enum DomainWarpType
+    {
+        OpenSimplex2,
+        OpenSimplex2Reduced,
+        BasicGrid
+    };
+
+    private enum TransformType3D
+    {
+        None,
+        ImproveXYPlanes,
+        ImproveXZPlanes,
+        DefaultOpenSimplex2
+    };
+
+    private int mSeed = 1337;
+    private float mFrequency = 0.01f;
+    private NoiseType mNoiseType = NoiseType.OpenSimplex2;
+    private RotationType3D mRotationType3D = RotationType3D.None;
+    private TransformType3D mTransformType3D = TransformType3D.DefaultOpenSimplex2;
+
+    private FractalType mFractalType = FractalType.None;
+    private int mOctaves = 3;
+    private float mLacunarity = 2.0f;
+    private float mGain = 0.5f;
+    private float mWeightedStrength = 0.0f;
+    private float mPingPongStrength = 2.0f;
+
+    private float mFractalBounding = 1 / 1.75f;
+
+    private CellularDistanceFunction mCellularDistanceFunction = CellularDistanceFunction.EuclideanSq;
+    private CellularReturnType mCellularReturnType = CellularReturnType.Distance;
+    private float mCellularJitterModifier = 1.0f;
+
+    private DomainWarpType mDomainWarpType = DomainWarpType.OpenSimplex2;
+    private TransformType3D mWarpTransformType3D = TransformType3D.DefaultOpenSimplex2;
+    private float mDomainWarpAmp = 1.0f;
+
+    /// <summary>
+    /// Create new FastNoise object with default seed
+    /// </summary>
+    public FastNoiseLite() { }
+
+    /// <summary>
+    /// Create new FastNoise object with specified seed
+    /// </summary>
+    public FastNoiseLite(int seed)
+    {
+        SetSeed(seed);
+    }
+
+    /// <summary>
+    /// Sets seed used for all noise types
+    /// </summary>
+    /// <remarks>
+    /// Default: 1337
+    /// </remarks>
+    public void SetSeed(int seed) { mSeed = seed; }
+
+    /// <summary>
+    /// Sets frequency for all noise types
+    /// </summary>
+    /// <remarks>
+    /// Default: 0.01
+    /// </remarks>
+    public void SetFrequency(float frequency) { mFrequency = frequency; }
+
+    /// <summary>
+    /// Sets noise algorithm used for GetNoise(...)
+    /// </summary>
+    /// <remarks>
+    /// Default: OpenSimplex2
+    /// </remarks>
+    public void SetNoiseType(NoiseType noiseType)
+    {
+        mNoiseType = noiseType;
+        UpdateTransformType3D();
+    }
+
+    /// <summary>
+    /// Sets domain rotation type for 3D Noise and 3D DomainWarp.
+    /// Can aid in reducing directional artifacts when sampling a 2D plane in 3D
+    /// </summary>
+    /// <remarks>
+    /// Default: None
+    /// </remarks>
+    public void SetRotationType3D(RotationType3D rotationType3D)
+    {
+        mRotationType3D = rotationType3D;
+        UpdateTransformType3D();
+        UpdateWarpTransformType3D();
+    }
+
+    /// <summary>
+    /// Sets method for combining octaves in all fractal noise types
+    /// </summary>
+    /// <remarks>
+    /// Default: None
+    /// Note: FractalType.DomainWarp... only affects DomainWarp(...)
+    /// </remarks>
+    public void SetFractalType(FractalType fractalType) { mFractalType = fractalType; }
+
+    /// <summary>
+    /// Sets octave count for all fractal noise types 
+    /// </summary>
+    /// <remarks>
+    /// Default: 3
+    /// </remarks>
+    public void SetFractalOctaves(int octaves)
+    {
+        mOctaves = octaves;
+        CalculateFractalBounding();
+    }
+
+    /// <summary>
+    /// Sets octave lacunarity for all fractal noise types
+    /// </summary>
+    /// <remarks>
+    /// Default: 2.0
+    /// </remarks>
+    public void SetFractalLacunarity(float lacunarity) { mLacunarity = lacunarity; }
+
+    /// <summary>
+    /// Sets octave gain for all fractal noise types
+    /// </summary>
+    /// <remarks>
+    /// Default: 0.5
+    /// </remarks>
+    public void SetFractalGain(float gain)
+    {
+        mGain = gain;
+        CalculateFractalBounding();
+    }
+
+    /// <summary>
+    /// Sets octave weighting for all none DomainWarp fratal types
+    /// </summary>
+    /// <remarks>
+    /// Default: 0.0
+    /// Note: Keep between 0...1 to maintain -1...1 output bounding
+    /// </remarks>
+    public void SetFractalWeightedStrength(float weightedStrength) { mWeightedStrength = weightedStrength; }
+
+    /// <summary>
+    /// Sets strength of the fractal ping pong effect
+    /// </summary>
+    /// <remarks>
+    /// Default: 2.0
+    /// </remarks>
+    public void SetFractalPingPongStrength(float pingPongStrength) { mPingPongStrength = pingPongStrength; }
+
+
+    /// <summary>
+    /// Sets distance function used in cellular noise calculations
+    /// </summary>
+    /// <remarks>
+    /// Default: Distance
+    /// </remarks>
+    public void SetCellularDistanceFunction(CellularDistanceFunction cellularDistanceFunction) { mCellularDistanceFunction = cellularDistanceFunction; }
+
+    /// <summary>
+    /// Sets return type from cellular noise calculations
+    /// </summary>
+    /// <remarks>
+    /// Default: EuclideanSq
+    /// </remarks>
+    public void SetCellularReturnType(CellularReturnType cellularReturnType) { mCellularReturnType = cellularReturnType; }
+
+    /// <summary>
+    /// Sets the maximum distance a cellular point can move from it's grid position
+    /// </summary>
+    /// <remarks>
+    /// Default: 1.0
+    /// Note: Setting this higher than 1 will cause artifacts
+    /// </remarks> 
+    public void SetCellularJitter(float cellularJitter) { mCellularJitterModifier = cellularJitter; }
+
+
+    /// <summary>
+    /// Sets the warp algorithm when using DomainWarp(...)
+    /// </summary>
+    /// <remarks>
+    /// Default: OpenSimplex2
+    /// </remarks>
+    public void SetDomainWarpType(DomainWarpType domainWarpType)
+    {
+        mDomainWarpType = domainWarpType;
+        UpdateWarpTransformType3D();
+    }
+
+
+    /// <summary>
+    /// Sets the maximum warp distance from original position when using DomainWarp(...)
+    /// </summary>
+    /// <remarks>
+    /// Default: 1.0
+    /// </remarks>
+    public void SetDomainWarpAmp(float domainWarpAmp) { mDomainWarpAmp = domainWarpAmp; }
+
+
+    /// <summary>
+    /// 2D noise at given position using current settings
+    /// </summary>
+    /// <returns>
+    /// Noise output bounded between -1...1
+    /// </returns>
+    public float GetNoise(/*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        x *= mFrequency;
+        y *= mFrequency;
+
+        switch (mNoiseType)
+        {
+            case OpenSimplex2:
+            case OpenSimplex2S:
+            {
+                final /*FNLfloat*/ float SQRT3 = (/*FNLfloat*/ float)1.7320508075688772935274463415059;
+                final /*FNLfloat*/ float F2 = 0.5f * (SQRT3 - 1);
+                /*FNLfloat*/ float t = (x + y) * F2;
+                x += t;
+                y += t;
+            }
+            break;
+            default:
+                break;
+        }
+
+        switch (mFractalType)
+        {
+            default:
+                return GenNoiseSingle(mSeed, x, y);
+            case FBm:
+                return GenFractalFBm(x, y);
+            case Ridged:
+                return GenFractalRidged(x, y);
+            case PingPong:
+                return GenFractalPingPong(x, y);
+        }
+    }
+
+    /// <summary>
+    /// 3D noise at given position using current settings
+    /// </summary>
+    /// <returns>
+    /// Noise output bounded between -1...1
+    /// </returns>
+    public float GetNoise(/*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        x *= mFrequency;
+        y *= mFrequency;
+        z *= mFrequency;
+
+        switch (mTransformType3D)
+        {
+            case ImproveXYPlanes:
+            {
+                /*FNLfloat*/ float xy = x + y;
+                /*FNLfloat*/ float s2 = xy * -(/*FNLfloat*/ float)0.211324865405187;
+                z *= (/*FNLfloat*/ float)0.577350269189626;
+                x += s2 - z;
+                y = y + s2 - z;
+                z += xy * (/*FNLfloat*/ float)0.577350269189626;
+            }
+            break;
+            case ImproveXZPlanes:
+            {
+                /*FNLfloat*/ float xz = x + z;
+                /*FNLfloat*/ float s2 = xz * -(/*FNLfloat*/ float)0.211324865405187;
+                y *= (/*FNLfloat*/ float)0.577350269189626;
+                x += s2 - y;
+                z += s2 - y;
+                y += xz * (/*FNLfloat*/ float)0.577350269189626;
+            }
+            break;
+            case DefaultOpenSimplex2:
+            {
+                final /*FNLfloat*/ float R3 = (/*FNLfloat*/ float)(2.0 / 3.0);
+                /*FNLfloat*/ float r = (x + y + z) * R3; // Rotation, not skew
+                x = r - x;
+                y = r - y;
+                z = r - z;
+            }
+            break;
+            default:
+                break;
+        }
+
+        switch (mFractalType)
+        {
+            default:
+                return GenNoiseSingle(mSeed, x, y, z);
+            case FBm:
+                return GenFractalFBm(x, y, z);
+            case Ridged:
+                return GenFractalRidged(x, y, z);
+            case PingPong:
+                return GenFractalPingPong(x, y, z);
+        }
+    }
+
+
+    /// <summary>
+    /// 2D warps the input position using current domain warp settings
+    /// </summary>
+    /// <example>
+    /// Example usage with GetNoise
+    /// <code>DomainWarp(coord)
+    /// noise = GetNoise(x, y)</code>
+    /// </example>
+    public void DomainWarp(Vector2 coord)
+    {
+        switch (mFractalType)
+        {
+            default:
+                DomainWarpSingle(coord);
+                break;
+            case DomainWarpProgressive:
+                DomainWarpFractalProgressive(coord);
+                break;
+            case DomainWarpIndependent:
+                DomainWarpFractalIndependent(coord);
+                break;
+        }
+    }
+
+    /// <summary>
+    /// 3D warps the input position using current domain warp settings
+    /// </summary>
+    /// <example>
+    /// Example usage with GetNoise
+    /// <code>DomainWarp(coord)
+    /// noise = GetNoise(x, y, z)</code>
+    /// </example>
+    public void DomainWarp(Vector3 coord)
+    {
+        switch (mFractalType)
+        {
+            default:
+                DomainWarpSingle(coord);
+                break;
+            case DomainWarpProgressive:
+                DomainWarpFractalProgressive(coord);
+                break;
+            case DomainWarpIndependent:
+                DomainWarpFractalIndependent(coord);
+                break;
+        }
+    }
+
+
+    private static final float[] Gradients2D = {
+            0.130526192220052f,  0.99144486137381f,   0.38268343236509f,   0.923879532511287f,  0.608761429008721f,  0.793353340291235f,  0.793353340291235f,  0.608761429008721f,
+            0.923879532511287f,  0.38268343236509f,   0.99144486137381f,   0.130526192220051f,  0.99144486137381f,  -0.130526192220051f,  0.923879532511287f, -0.38268343236509f,
+            0.793353340291235f, -0.60876142900872f,   0.608761429008721f, -0.793353340291235f,  0.38268343236509f,  -0.923879532511287f,  0.130526192220052f, -0.99144486137381f,
+            -0.130526192220052f, -0.99144486137381f,  -0.38268343236509f,  -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
+            -0.923879532511287f, -0.38268343236509f,  -0.99144486137381f,  -0.130526192220052f, -0.99144486137381f,   0.130526192220051f, -0.923879532511287f,  0.38268343236509f,
+            -0.793353340291235f,  0.608761429008721f, -0.608761429008721f,  0.793353340291235f, -0.38268343236509f,   0.923879532511287f, -0.130526192220052f,  0.99144486137381f,
+            0.130526192220052f,  0.99144486137381f,   0.38268343236509f,   0.923879532511287f,  0.608761429008721f,  0.793353340291235f,  0.793353340291235f,  0.608761429008721f,
+            0.923879532511287f,  0.38268343236509f,   0.99144486137381f,   0.130526192220051f,  0.99144486137381f,  -0.130526192220051f,  0.923879532511287f, -0.38268343236509f,
+            0.793353340291235f, -0.60876142900872f,   0.608761429008721f, -0.793353340291235f,  0.38268343236509f,  -0.923879532511287f,  0.130526192220052f, -0.99144486137381f,
+            -0.130526192220052f, -0.99144486137381f,  -0.38268343236509f,  -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
+            -0.923879532511287f, -0.38268343236509f,  -0.99144486137381f,  -0.130526192220052f, -0.99144486137381f,   0.130526192220051f, -0.923879532511287f,  0.38268343236509f,
+            -0.793353340291235f,  0.608761429008721f, -0.608761429008721f,  0.793353340291235f, -0.38268343236509f,   0.923879532511287f, -0.130526192220052f,  0.99144486137381f,
+            0.130526192220052f,  0.99144486137381f,   0.38268343236509f,   0.923879532511287f,  0.608761429008721f,  0.793353340291235f,  0.793353340291235f,  0.608761429008721f,
+            0.923879532511287f,  0.38268343236509f,   0.99144486137381f,   0.130526192220051f,  0.99144486137381f,  -0.130526192220051f,  0.923879532511287f, -0.38268343236509f,
+            0.793353340291235f, -0.60876142900872f,   0.608761429008721f, -0.793353340291235f,  0.38268343236509f,  -0.923879532511287f,  0.130526192220052f, -0.99144486137381f,
+            -0.130526192220052f, -0.99144486137381f,  -0.38268343236509f,  -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
+            -0.923879532511287f, -0.38268343236509f,  -0.99144486137381f,  -0.130526192220052f, -0.99144486137381f,   0.130526192220051f, -0.923879532511287f,  0.38268343236509f,
+            -0.793353340291235f,  0.608761429008721f, -0.608761429008721f,  0.793353340291235f, -0.38268343236509f,   0.923879532511287f, -0.130526192220052f,  0.99144486137381f,
+            0.130526192220052f,  0.99144486137381f,   0.38268343236509f,   0.923879532511287f,  0.608761429008721f,  0.793353340291235f,  0.793353340291235f,  0.608761429008721f,
+            0.923879532511287f,  0.38268343236509f,   0.99144486137381f,   0.130526192220051f,  0.99144486137381f,  -0.130526192220051f,  0.923879532511287f, -0.38268343236509f,
+            0.793353340291235f, -0.60876142900872f,   0.608761429008721f, -0.793353340291235f,  0.38268343236509f,  -0.923879532511287f,  0.130526192220052f, -0.99144486137381f,
+            -0.130526192220052f, -0.99144486137381f,  -0.38268343236509f,  -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
+            -0.923879532511287f, -0.38268343236509f,  -0.99144486137381f,  -0.130526192220052f, -0.99144486137381f,   0.130526192220051f, -0.923879532511287f,  0.38268343236509f,
+            -0.793353340291235f,  0.608761429008721f, -0.608761429008721f,  0.793353340291235f, -0.38268343236509f,   0.923879532511287f, -0.130526192220052f,  0.99144486137381f,
+            0.130526192220052f,  0.99144486137381f,   0.38268343236509f,   0.923879532511287f,  0.608761429008721f,  0.793353340291235f,  0.793353340291235f,  0.608761429008721f,
+            0.923879532511287f,  0.38268343236509f,   0.99144486137381f,   0.130526192220051f,  0.99144486137381f,  -0.130526192220051f,  0.923879532511287f, -0.38268343236509f,
+            0.793353340291235f, -0.60876142900872f,   0.608761429008721f, -0.793353340291235f,  0.38268343236509f,  -0.923879532511287f,  0.130526192220052f, -0.99144486137381f,
+            -0.130526192220052f, -0.99144486137381f,  -0.38268343236509f,  -0.923879532511287f, -0.608761429008721f, -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
+            -0.923879532511287f, -0.38268343236509f,  -0.99144486137381f,  -0.130526192220052f, -0.99144486137381f,   0.130526192220051f, -0.923879532511287f,  0.38268343236509f,
+            -0.793353340291235f,  0.608761429008721f, -0.608761429008721f,  0.793353340291235f, -0.38268343236509f,   0.923879532511287f, -0.130526192220052f,  0.99144486137381f,
+            0.38268343236509f,   0.923879532511287f,  0.923879532511287f,  0.38268343236509f,   0.923879532511287f, -0.38268343236509f,   0.38268343236509f,  -0.923879532511287f,
+            -0.38268343236509f,  -0.923879532511287f, -0.923879532511287f, -0.38268343236509f,  -0.923879532511287f,  0.38268343236509f,  -0.38268343236509f,   0.923879532511287f,
+    };
+
+    private static final float[] RandVecs2D = {
+            -0.2700222198f, -0.9628540911f, 0.3863092627f, -0.9223693152f, 0.04444859006f, -0.999011673f, -0.5992523158f, -0.8005602176f, -0.7819280288f, 0.6233687174f, 0.9464672271f, 0.3227999196f, -0.6514146797f, -0.7587218957f, 0.9378472289f, 0.347048376f,
+            -0.8497875957f, -0.5271252623f, -0.879042592f, 0.4767432447f, -0.892300288f, -0.4514423508f, -0.379844434f, -0.9250503802f, -0.9951650832f, 0.0982163789f, 0.7724397808f, -0.6350880136f, 0.7573283322f, -0.6530343002f, -0.9928004525f, -0.119780055f,
+            -0.0532665713f, 0.9985803285f, 0.9754253726f, -0.2203300762f, -0.7665018163f, 0.6422421394f, 0.991636706f, 0.1290606184f, -0.994696838f, 0.1028503788f, -0.5379205513f, -0.84299554f, 0.5022815471f, -0.8647041387f, 0.4559821461f, -0.8899889226f,
+            -0.8659131224f, -0.5001944266f, 0.0879458407f, -0.9961252577f, -0.5051684983f, 0.8630207346f, 0.7753185226f, -0.6315704146f, -0.6921944612f, 0.7217110418f, -0.5191659449f, -0.8546734591f, 0.8978622882f, -0.4402764035f, -0.1706774107f, 0.9853269617f,
+            -0.9353430106f, -0.3537420705f, -0.9992404798f, 0.03896746794f, -0.2882064021f, -0.9575683108f, -0.9663811329f, 0.2571137995f, -0.8759714238f, -0.4823630009f, -0.8303123018f, -0.5572983775f, 0.05110133755f, -0.9986934731f, -0.8558373281f, -0.5172450752f,
+            0.09887025282f, 0.9951003332f, 0.9189016087f, 0.3944867976f, -0.2439375892f, -0.9697909324f, -0.8121409387f, -0.5834613061f, -0.9910431363f, 0.1335421355f, 0.8492423985f, -0.5280031709f, -0.9717838994f, -0.2358729591f, 0.9949457207f, 0.1004142068f,
+            0.6241065508f, -0.7813392434f, 0.662910307f, 0.7486988212f, -0.7197418176f, 0.6942418282f, -0.8143370775f, -0.5803922158f, 0.104521054f, -0.9945226741f, -0.1065926113f, -0.9943027784f, 0.445799684f, -0.8951327509f, 0.105547406f, 0.9944142724f,
+            -0.992790267f, 0.1198644477f, -0.8334366408f, 0.552615025f, 0.9115561563f, -0.4111755999f, 0.8285544909f, -0.5599084351f, 0.7217097654f, -0.6921957921f, 0.4940492677f, -0.8694339084f, -0.3652321272f, -0.9309164803f, -0.9696606758f, 0.2444548501f,
+            0.08925509731f, -0.996008799f, 0.5354071276f, -0.8445941083f, -0.1053576186f, 0.9944343981f, -0.9890284586f, 0.1477251101f, 0.004856104961f, 0.9999882091f, 0.9885598478f, 0.1508291331f, 0.9286129562f, -0.3710498316f, -0.5832393863f, -0.8123003252f,
+            0.3015207509f, 0.9534596146f, -0.9575110528f, 0.2883965738f, 0.9715802154f, -0.2367105511f, 0.229981792f, 0.9731949318f, 0.955763816f, -0.2941352207f, 0.740956116f, 0.6715534485f, -0.9971513787f, -0.07542630764f, 0.6905710663f, -0.7232645452f,
+            -0.290713703f, -0.9568100872f, 0.5912777791f, -0.8064679708f, -0.9454592212f, -0.325740481f, 0.6664455681f, 0.74555369f, 0.6236134912f, 0.7817328275f, 0.9126993851f, -0.4086316587f, -0.8191762011f, 0.5735419353f, -0.8812745759f, -0.4726046147f,
+            0.9953313627f, 0.09651672651f, 0.9855650846f, -0.1692969699f, -0.8495980887f, 0.5274306472f, 0.6174853946f, -0.7865823463f, 0.8508156371f, 0.52546432f, 0.9985032451f, -0.05469249926f, 0.1971371563f, -0.9803759185f, 0.6607855748f, -0.7505747292f,
+            -0.03097494063f, 0.9995201614f, -0.6731660801f, 0.739491331f, -0.7195018362f, -0.6944905383f, 0.9727511689f, 0.2318515979f, 0.9997059088f, -0.0242506907f, 0.4421787429f, -0.8969269532f, 0.9981350961f, -0.061043673f, -0.9173660799f, -0.3980445648f,
+            -0.8150056635f, -0.5794529907f, -0.8789331304f, 0.4769450202f, 0.0158605829f, 0.999874213f, -0.8095464474f, 0.5870558317f, -0.9165898907f, -0.3998286786f, -0.8023542565f, 0.5968480938f, -0.5176737917f, 0.8555780767f, -0.8154407307f, -0.5788405779f,
+            0.4022010347f, -0.9155513791f, -0.9052556868f, -0.4248672045f, 0.7317445619f, 0.6815789728f, -0.5647632201f, -0.8252529947f, -0.8403276335f, -0.5420788397f, -0.9314281527f, 0.363925262f, 0.5238198472f, 0.8518290719f, 0.7432803869f, -0.6689800195f,
+            -0.985371561f, -0.1704197369f, 0.4601468731f, 0.88784281f, 0.825855404f, 0.5638819483f, 0.6182366099f, 0.7859920446f, 0.8331502863f, -0.553046653f, 0.1500307506f, 0.9886813308f, -0.662330369f, -0.7492119075f, -0.668598664f, 0.743623444f,
+            0.7025606278f, 0.7116238924f, -0.5419389763f, -0.8404178401f, -0.3388616456f, 0.9408362159f, 0.8331530315f, 0.5530425174f, -0.2989720662f, -0.9542618632f, 0.2638522993f, 0.9645630949f, 0.124108739f, -0.9922686234f, -0.7282649308f, -0.6852956957f,
+            0.6962500149f, 0.7177993569f, -0.9183535368f, 0.3957610156f, -0.6326102274f, -0.7744703352f, -0.9331891859f, -0.359385508f, -0.1153779357f, -0.9933216659f, 0.9514974788f, -0.3076565421f, -0.08987977445f, -0.9959526224f, 0.6678496916f, 0.7442961705f,
+            0.7952400393f, -0.6062947138f, -0.6462007402f, -0.7631674805f, -0.2733598753f, 0.9619118351f, 0.9669590226f, -0.254931851f, -0.9792894595f, 0.2024651934f, -0.5369502995f, -0.8436138784f, -0.270036471f, -0.9628500944f, -0.6400277131f, 0.7683518247f,
+            -0.7854537493f, -0.6189203566f, 0.06005905383f, -0.9981948257f, -0.02455770378f, 0.9996984141f, -0.65983623f, 0.751409442f, -0.6253894466f, -0.7803127835f, -0.6210408851f, -0.7837781695f, 0.8348888491f, 0.5504185768f, -0.1592275245f, 0.9872419133f,
+            0.8367622488f, 0.5475663786f, -0.8675753916f, -0.4973056806f, -0.2022662628f, -0.9793305667f, 0.9399189937f, 0.3413975472f, 0.9877404807f, -0.1561049093f, -0.9034455656f, 0.4287028224f, 0.1269804218f, -0.9919052235f, -0.3819600854f, 0.924178821f,
+            0.9754625894f, 0.2201652486f, -0.3204015856f, -0.9472818081f, -0.9874760884f, 0.1577687387f, 0.02535348474f, -0.9996785487f, 0.4835130794f, -0.8753371362f, -0.2850799925f, -0.9585037287f, -0.06805516006f, -0.99768156f, -0.7885244045f, -0.6150034663f,
+            0.3185392127f, -0.9479096845f, 0.8880043089f, 0.4598351306f, 0.6476921488f, -0.7619021462f, 0.9820241299f, 0.1887554194f, 0.9357275128f, -0.3527237187f, -0.8894895414f, 0.4569555293f, 0.7922791302f, 0.6101588153f, 0.7483818261f, 0.6632681526f,
+            -0.7288929755f, -0.6846276581f, 0.8729032783f, -0.4878932944f, 0.8288345784f, 0.5594937369f, 0.08074567077f, 0.9967347374f, 0.9799148216f, -0.1994165048f, -0.580730673f, -0.8140957471f, -0.4700049791f, -0.8826637636f, 0.2409492979f, 0.9705377045f,
+            0.9437816757f, -0.3305694308f, -0.8927998638f, -0.4504535528f, -0.8069622304f, 0.5906030467f, 0.06258973166f, 0.9980393407f, -0.9312597469f, 0.3643559849f, 0.5777449785f, 0.8162173362f, -0.3360095855f, -0.941858566f, 0.697932075f, -0.7161639607f,
+            -0.002008157227f, -0.9999979837f, -0.1827294312f, -0.9831632392f, -0.6523911722f, 0.7578824173f, -0.4302626911f, -0.9027037258f, -0.9985126289f, -0.05452091251f, -0.01028102172f, -0.9999471489f, -0.4946071129f, 0.8691166802f, -0.2999350194f, 0.9539596344f,
+            0.8165471961f, 0.5772786819f, 0.2697460475f, 0.962931498f, -0.7306287391f, -0.6827749597f, -0.7590952064f, -0.6509796216f, -0.907053853f, 0.4210146171f, -0.5104861064f, -0.8598860013f, 0.8613350597f, 0.5080373165f, 0.5007881595f, -0.8655698812f,
+            -0.654158152f, 0.7563577938f, -0.8382755311f, -0.545246856f, 0.6940070834f, 0.7199681717f, 0.06950936031f, 0.9975812994f, 0.1702942185f, -0.9853932612f, 0.2695973274f, 0.9629731466f, 0.5519612192f, -0.8338697815f, 0.225657487f, -0.9742067022f,
+            0.4215262855f, -0.9068161835f, 0.4881873305f, -0.8727388672f, -0.3683854996f, -0.9296731273f, -0.9825390578f, 0.1860564427f, 0.81256471f, 0.5828709909f, 0.3196460933f, -0.9475370046f, 0.9570913859f, 0.2897862643f, -0.6876655497f, -0.7260276109f,
+            -0.9988770922f, -0.047376731f, -0.1250179027f, 0.992154486f, -0.8280133617f, 0.560708367f, 0.9324863769f, -0.3612051451f, 0.6394653183f, 0.7688199442f, -0.01623847064f, -0.9998681473f, -0.9955014666f, -0.09474613458f, -0.81453315f, 0.580117012f,
+            0.4037327978f, -0.9148769469f, 0.9944263371f, 0.1054336766f, -0.1624711654f, 0.9867132919f, -0.9949487814f, -0.100383875f, -0.6995302564f, 0.7146029809f, 0.5263414922f, -0.85027327f, -0.5395221479f, 0.841971408f, 0.6579370318f, 0.7530729462f,
+            0.01426758847f, -0.9998982128f, -0.6734383991f, 0.7392433447f, 0.639412098f, -0.7688642071f, 0.9211571421f, 0.3891908523f, -0.146637214f, -0.9891903394f, -0.782318098f, 0.6228791163f, -0.5039610839f, -0.8637263605f, -0.7743120191f, -0.6328039957f,
+    };
+
+    private static final float[] Gradients3D = {
+            0, 1, 1, 0,  0,-1, 1, 0,  0, 1,-1, 0,  0,-1,-1, 0,
+            1, 0, 1, 0, -1, 0, 1, 0,  1, 0,-1, 0, -1, 0,-1, 0,
+            1, 1, 0, 0, -1, 1, 0, 0,  1,-1, 0, 0, -1,-1, 0, 0,
+            0, 1, 1, 0,  0,-1, 1, 0,  0, 1,-1, 0,  0,-1,-1, 0,
+            1, 0, 1, 0, -1, 0, 1, 0,  1, 0,-1, 0, -1, 0,-1, 0,
+            1, 1, 0, 0, -1, 1, 0, 0,  1,-1, 0, 0, -1,-1, 0, 0,
+            0, 1, 1, 0,  0,-1, 1, 0,  0, 1,-1, 0,  0,-1,-1, 0,
+            1, 0, 1, 0, -1, 0, 1, 0,  1, 0,-1, 0, -1, 0,-1, 0,
+            1, 1, 0, 0, -1, 1, 0, 0,  1,-1, 0, 0, -1,-1, 0, 0,
+            0, 1, 1, 0,  0,-1, 1, 0,  0, 1,-1, 0,  0,-1,-1, 0,
+            1, 0, 1, 0, -1, 0, 1, 0,  1, 0,-1, 0, -1, 0,-1, 0,
+            1, 1, 0, 0, -1, 1, 0, 0,  1,-1, 0, 0, -1,-1, 0, 0,
+            0, 1, 1, 0,  0,-1, 1, 0,  0, 1,-1, 0,  0,-1,-1, 0,
+            1, 0, 1, 0, -1, 0, 1, 0,  1, 0,-1, 0, -1, 0,-1, 0,
+            1, 1, 0, 0, -1, 1, 0, 0,  1,-1, 0, 0, -1,-1, 0, 0,
+            1, 1, 0, 0,  0,-1, 1, 0, -1, 1, 0, 0,  0,-1,-1, 0
+    };
+
+    private static final float[] RandVecs3D = {
+            -0.7292736885f, -0.6618439697f, 0.1735581948f, 0, 0.790292081f, -0.5480887466f, -0.2739291014f, 0, 0.7217578935f, 0.6226212466f, -0.3023380997f, 0, 0.565683137f, -0.8208298145f, -0.0790000257f, 0, 0.760049034f, -0.5555979497f, -0.3370999617f, 0, 0.3713945616f, 0.5011264475f, 0.7816254623f, 0, -0.1277062463f, -0.4254438999f, -0.8959289049f, 0, -0.2881560924f, -0.5815838982f, 0.7607405838f, 0,
+            0.5849561111f, -0.662820239f, -0.4674352136f, 0, 0.3307171178f, 0.0391653737f, 0.94291689f, 0, 0.8712121778f, -0.4113374369f, -0.2679381538f, 0, 0.580981015f, 0.7021915846f, 0.4115677815f, 0, 0.503756873f, 0.6330056931f, -0.5878203852f, 0, 0.4493712205f, 0.601390195f, 0.6606022552f, 0, -0.6878403724f, 0.09018890807f, -0.7202371714f, 0, -0.5958956522f, -0.6469350577f, 0.475797649f, 0,
+            -0.5127052122f, 0.1946921978f, -0.8361987284f, 0, -0.9911507142f, -0.05410276466f, -0.1212153153f, 0, -0.2149721042f, 0.9720882117f, -0.09397607749f, 0, -0.7518650936f, -0.5428057603f, 0.3742469607f, 0, 0.5237068895f, 0.8516377189f, -0.02107817834f, 0, 0.6333504779f, 0.1926167129f, -0.7495104896f, 0, -0.06788241606f, 0.3998305789f, 0.9140719259f, 0, -0.5538628599f, -0.4729896695f, -0.6852128902f, 0,
+            -0.7261455366f, -0.5911990757f, 0.3509933228f, 0, -0.9229274737f, -0.1782808786f, 0.3412049336f, 0, -0.6968815002f, 0.6511274338f, 0.3006480328f, 0, 0.9608044783f, -0.2098363234f, -0.1811724921f, 0, 0.06817146062f, -0.9743405129f, 0.2145069156f, 0, -0.3577285196f, -0.6697087264f, -0.6507845481f, 0, -0.1868621131f, 0.7648617052f, -0.6164974636f, 0, -0.6541697588f, 0.3967914832f, 0.6439087246f, 0,
+            0.6993340405f, -0.6164538506f, 0.3618239211f, 0, -0.1546665739f, 0.6291283928f, 0.7617583057f, 0, -0.6841612949f, -0.2580482182f, -0.6821542638f, 0, 0.5383980957f, 0.4258654885f, 0.7271630328f, 0, -0.5026987823f, -0.7939832935f, -0.3418836993f, 0, 0.3202971715f, 0.2834415347f, 0.9039195862f, 0, 0.8683227101f, -0.0003762656404f, -0.4959995258f, 0, 0.791120031f, -0.08511045745f, 0.6057105799f, 0,
+            -0.04011016052f, -0.4397248749f, 0.8972364289f, 0, 0.9145119872f, 0.3579346169f, -0.1885487608f, 0, -0.9612039066f, -0.2756484276f, 0.01024666929f, 0, 0.6510361721f, -0.2877799159f, -0.7023778346f, 0, -0.2041786351f, 0.7365237271f, 0.644859585f, 0, -0.7718263711f, 0.3790626912f, 0.5104855816f, 0, -0.3060082741f, -0.7692987727f, 0.5608371729f, 0, 0.454007341f, -0.5024843065f, 0.7357899537f, 0,
+            0.4816795475f, 0.6021208291f, -0.6367380315f, 0, 0.6961980369f, -0.3222197429f, 0.641469197f, 0, -0.6532160499f, -0.6781148932f, 0.3368515753f, 0, 0.5089301236f, -0.6154662304f, -0.6018234363f, 0, -0.1635919754f, -0.9133604627f, -0.372840892f, 0, 0.52408019f, -0.8437664109f, 0.1157505864f, 0, 0.5902587356f, 0.4983817807f, -0.6349883666f, 0, 0.5863227872f, 0.494764745f, 0.6414307729f, 0,
+            0.6779335087f, 0.2341345225f, 0.6968408593f, 0, 0.7177054546f, -0.6858979348f, 0.120178631f, 0, -0.5328819713f, -0.5205125012f, 0.6671608058f, 0, -0.8654874251f, -0.0700727088f, -0.4960053754f, 0, -0.2861810166f, 0.7952089234f, 0.5345495242f, 0, -0.04849529634f, 0.9810836427f, -0.1874115585f, 0, -0.6358521667f, 0.6058348682f, 0.4781800233f, 0, 0.6254794696f, -0.2861619734f, 0.7258696564f, 0,
+            -0.2585259868f, 0.5061949264f, -0.8227581726f, 0, 0.02136306781f, 0.5064016808f, -0.8620330371f, 0, 0.200111773f, 0.8599263484f, 0.4695550591f, 0, 0.4743561372f, 0.6014985084f, -0.6427953014f, 0, 0.6622993731f, -0.5202474575f, -0.5391679918f, 0, 0.08084972818f, -0.6532720452f, 0.7527940996f, 0, -0.6893687501f, 0.0592860349f, 0.7219805347f, 0, -0.1121887082f, -0.9673185067f, 0.2273952515f, 0,
+            0.7344116094f, 0.5979668656f, -0.3210532909f, 0, 0.5789393465f, -0.2488849713f, 0.7764570201f, 0, 0.6988182827f, 0.3557169806f, -0.6205791146f, 0, -0.8636845529f, -0.2748771249f, -0.4224826141f, 0, -0.4247027957f, -0.4640880967f, 0.777335046f, 0, 0.5257722489f, -0.8427017621f, 0.1158329937f, 0, 0.9343830603f, 0.316302472f, -0.1639543925f, 0, -0.1016836419f, -0.8057303073f, -0.5834887393f, 0,
+            -0.6529238969f, 0.50602126f, -0.5635892736f, 0, -0.2465286165f, -0.9668205684f, -0.06694497494f, 0, -0.9776897119f, -0.2099250524f, -0.007368825344f, 0, 0.7736893337f, 0.5734244712f, 0.2694238123f, 0, -0.6095087895f, 0.4995678998f, 0.6155736747f, 0, 0.5794535482f, 0.7434546771f, 0.3339292269f, 0, -0.8226211154f, 0.08142581855f, 0.5627293636f, 0, -0.510385483f, 0.4703667658f, 0.7199039967f, 0,
+            -0.5764971849f, -0.07231656274f, -0.8138926898f, 0, 0.7250628871f, 0.3949971505f, -0.5641463116f, 0, -0.1525424005f, 0.4860840828f, -0.8604958341f, 0, -0.5550976208f, -0.4957820792f, 0.667882296f, 0, -0.1883614327f, 0.9145869398f, 0.357841725f, 0, 0.7625556724f, -0.5414408243f, -0.3540489801f, 0, -0.5870231946f, -0.3226498013f, -0.7424963803f, 0, 0.3051124198f, 0.2262544068f, -0.9250488391f, 0,
+            0.6379576059f, 0.577242424f, -0.5097070502f, 0, -0.5966775796f, 0.1454852398f, -0.7891830656f, 0, -0.658330573f, 0.6555487542f, -0.3699414651f, 0, 0.7434892426f, 0.2351084581f, 0.6260573129f, 0, 0.5562114096f, 0.8264360377f, -0.0873632843f, 0, -0.3028940016f, -0.8251527185f, 0.4768419182f, 0, 0.1129343818f, -0.985888439f, -0.1235710781f, 0, 0.5937652891f, -0.5896813806f, 0.5474656618f, 0,
+            0.6757964092f, -0.5835758614f, -0.4502648413f, 0, 0.7242302609f, -0.1152719764f, 0.6798550586f, 0, -0.9511914166f, 0.0753623979f, -0.2992580792f, 0, 0.2539470961f, -0.1886339355f, 0.9486454084f, 0, 0.571433621f, -0.1679450851f, -0.8032795685f, 0, -0.06778234979f, 0.3978269256f, 0.9149531629f, 0, 0.6074972649f, 0.733060024f, -0.3058922593f, 0, -0.5435478392f, 0.1675822484f, 0.8224791405f, 0,
+            -0.5876678086f, -0.3380045064f, -0.7351186982f, 0, -0.7967562402f, 0.04097822706f, -0.6029098428f, 0, -0.1996350917f, 0.8706294745f, 0.4496111079f, 0, -0.02787660336f, -0.9106232682f, -0.4122962022f, 0, -0.7797625996f, -0.6257634692f, 0.01975775581f, 0, -0.5211232846f, 0.7401644346f, -0.4249554471f, 0, 0.8575424857f, 0.4053272873f, -0.3167501783f, 0, 0.1045223322f, 0.8390195772f, -0.5339674439f, 0,
+            0.3501822831f, 0.9242524096f, -0.1520850155f, 0, 0.1987849858f, 0.07647613266f, 0.9770547224f, 0, 0.7845996363f, 0.6066256811f, -0.1280964233f, 0, 0.09006737436f, -0.9750989929f, -0.2026569073f, 0, -0.8274343547f, -0.542299559f, 0.1458203587f, 0, -0.3485797732f, -0.415802277f, 0.840000362f, 0, -0.2471778936f, -0.7304819962f, -0.6366310879f, 0, -0.3700154943f, 0.8577948156f, 0.3567584454f, 0,
+            0.5913394901f, -0.548311967f, -0.5913303597f, 0, 0.1204873514f, -0.7626472379f, -0.6354935001f, 0, 0.616959265f, 0.03079647928f, 0.7863922953f, 0, 0.1258156836f, -0.6640829889f, -0.7369967419f, 0, -0.6477565124f, -0.1740147258f, -0.7417077429f, 0, 0.6217889313f, -0.7804430448f, -0.06547655076f, 0, 0.6589943422f, -0.6096987708f, 0.4404473475f, 0, -0.2689837504f, -0.6732403169f, -0.6887635427f, 0,
+            -0.3849775103f, 0.5676542638f, 0.7277093879f, 0, 0.5754444408f, 0.8110471154f, -0.1051963504f, 0, 0.9141593684f, 0.3832947817f, 0.131900567f, 0, -0.107925319f, 0.9245493968f, 0.3654593525f, 0, 0.377977089f, 0.3043148782f, 0.8743716458f, 0, -0.2142885215f, -0.8259286236f, 0.5214617324f, 0, 0.5802544474f, 0.4148098596f, -0.7008834116f, 0, -0.1982660881f, 0.8567161266f, -0.4761596756f, 0,
+            -0.03381553704f, 0.3773180787f, -0.9254661404f, 0, -0.6867922841f, -0.6656597827f, 0.2919133642f, 0, 0.7731742607f, -0.2875793547f, -0.5652430251f, 0, -0.09655941928f, 0.9193708367f, -0.3813575004f, 0, 0.2715702457f, -0.9577909544f, -0.09426605581f, 0, 0.2451015704f, -0.6917998565f, -0.6792188003f, 0, 0.977700782f, -0.1753855374f, 0.1155036542f, 0, -0.5224739938f, 0.8521606816f, 0.02903615945f, 0,
+            -0.7734880599f, -0.5261292347f, 0.3534179531f, 0, -0.7134492443f, -0.269547243f, 0.6467878011f, 0, 0.1644037271f, 0.5105846203f, -0.8439637196f, 0, 0.6494635788f, 0.05585611296f, 0.7583384168f, 0, -0.4711970882f, 0.5017280509f, -0.7254255765f, 0, -0.6335764307f, -0.2381686273f, -0.7361091029f, 0, -0.9021533097f, -0.270947803f, -0.3357181763f, 0, -0.3793711033f, 0.872258117f, 0.3086152025f, 0,
+            -0.6855598966f, -0.3250143309f, 0.6514394162f, 0, 0.2900942212f, -0.7799057743f, -0.5546100667f, 0, -0.2098319339f, 0.85037073f, 0.4825351604f, 0, -0.4592603758f, 0.6598504336f, -0.5947077538f, 0, 0.8715945488f, 0.09616365406f, -0.4807031248f, 0, -0.6776666319f, 0.7118504878f, -0.1844907016f, 0, 0.7044377633f, 0.312427597f, 0.637304036f, 0, -0.7052318886f, -0.2401093292f, -0.6670798253f, 0,
+            0.081921007f, -0.7207336136f, -0.6883545647f, 0, -0.6993680906f, -0.5875763221f, -0.4069869034f, 0, -0.1281454481f, 0.6419895885f, 0.7559286424f, 0, -0.6337388239f, -0.6785471501f, -0.3714146849f, 0, 0.5565051903f, -0.2168887573f, -0.8020356851f, 0, -0.5791554484f, 0.7244372011f, -0.3738578718f, 0, 0.1175779076f, -0.7096451073f, 0.6946792478f, 0, -0.6134619607f, 0.1323631078f, 0.7785527795f, 0,
+            0.6984635305f, -0.02980516237f, -0.715024719f, 0, 0.8318082963f, -0.3930171956f, 0.3919597455f, 0, 0.1469576422f, 0.05541651717f, -0.9875892167f, 0, 0.708868575f, -0.2690503865f, 0.6520101478f, 0, 0.2726053183f, 0.67369766f, -0.68688995f, 0, -0.6591295371f, 0.3035458599f, -0.6880466294f, 0, 0.4815131379f, -0.7528270071f, 0.4487723203f, 0, 0.9430009463f, 0.1675647412f, -0.2875261255f, 0,
+            0.434802957f, 0.7695304522f, -0.4677277752f, 0, 0.3931996188f, 0.594473625f, 0.7014236729f, 0, 0.7254336655f, -0.603925654f, 0.3301814672f, 0, 0.7590235227f, -0.6506083235f, 0.02433313207f, 0, -0.8552768592f, -0.3430042733f, 0.3883935666f, 0, -0.6139746835f, 0.6981725247f, 0.3682257648f, 0, -0.7465905486f, -0.5752009504f, 0.3342849376f, 0, 0.5730065677f, 0.810555537f, -0.1210916791f, 0,
+            -0.9225877367f, -0.3475211012f, -0.167514036f, 0, -0.7105816789f, -0.4719692027f, -0.5218416899f, 0, -0.08564609717f, 0.3583001386f, 0.929669703f, 0, -0.8279697606f, -0.2043157126f, 0.5222271202f, 0, 0.427944023f, 0.278165994f, 0.8599346446f, 0, 0.5399079671f, -0.7857120652f, -0.3019204161f, 0, 0.5678404253f, -0.5495413974f, -0.6128307303f, 0, -0.9896071041f, 0.1365639107f, -0.04503418428f, 0,
+            -0.6154342638f, -0.6440875597f, 0.4543037336f, 0, 0.1074204368f, -0.7946340692f, 0.5975094525f, 0, -0.3595449969f, -0.8885529948f, 0.28495784f, 0, -0.2180405296f, 0.1529888965f, 0.9638738118f, 0, -0.7277432317f, -0.6164050508f, -0.3007234646f, 0, 0.7249729114f, -0.00669719484f, 0.6887448187f, 0, -0.5553659455f, -0.5336586252f, 0.6377908264f, 0, 0.5137558015f, 0.7976208196f, -0.3160000073f, 0,
+            -0.3794024848f, 0.9245608561f, -0.03522751494f, 0, 0.8229248658f, 0.2745365933f, -0.4974176556f, 0, -0.5404114394f, 0.6091141441f, 0.5804613989f, 0, 0.8036581901f, -0.2703029469f, 0.5301601931f, 0, 0.6044318879f, 0.6832968393f, 0.4095943388f, 0, 0.06389988817f, 0.9658208605f, -0.2512108074f, 0, 0.1087113286f, 0.7402471173f, -0.6634877936f, 0, -0.713427712f, -0.6926784018f, 0.1059128479f, 0,
+            0.6458897819f, -0.5724548511f, -0.5050958653f, 0, -0.6553931414f, 0.7381471625f, 0.159995615f, 0, 0.3910961323f, 0.9188871375f, -0.05186755998f, 0, -0.4879022471f, -0.5904376907f, 0.6429111375f, 0, 0.6014790094f, 0.7707441366f, -0.2101820095f, 0, -0.5677173047f, 0.7511360995f, 0.3368851762f, 0, 0.7858573506f, 0.226674665f, 0.5753666838f, 0, -0.4520345543f, -0.604222686f, -0.6561857263f, 0,
+            0.002272116345f, 0.4132844051f, -0.9105991643f, 0, -0.5815751419f, -0.5162925989f, 0.6286591339f, 0, -0.03703704785f, 0.8273785755f, 0.5604221175f, 0, -0.5119692504f, 0.7953543429f, -0.3244980058f, 0, -0.2682417366f, -0.9572290247f, -0.1084387619f, 0, -0.2322482736f, -0.9679131102f, -0.09594243324f, 0, 0.3554328906f, -0.8881505545f, 0.2913006227f, 0, 0.7346520519f, -0.4371373164f, 0.5188422971f, 0,
+            0.9985120116f, 0.04659011161f, -0.02833944577f, 0, -0.3727687496f, -0.9082481361f, 0.1900757285f, 0, 0.91737377f, -0.3483642108f, 0.1925298489f, 0, 0.2714911074f, 0.4147529736f, -0.8684886582f, 0, 0.5131763485f, -0.7116334161f, 0.4798207128f, 0, -0.8737353606f, 0.18886992f, -0.4482350644f, 0, 0.8460043821f, -0.3725217914f, 0.3814499973f, 0, 0.8978727456f, -0.1780209141f, -0.4026575304f, 0,
+            0.2178065647f, -0.9698322841f, -0.1094789531f, 0, -0.1518031304f, -0.7788918132f, -0.6085091231f, 0, -0.2600384876f, -0.4755398075f, -0.8403819825f, 0, 0.572313509f, -0.7474340931f, -0.3373418503f, 0, -0.7174141009f, 0.1699017182f, -0.6756111411f, 0, -0.684180784f, 0.02145707593f, -0.7289967412f, 0, -0.2007447902f, 0.06555605789f, -0.9774476623f, 0, -0.1148803697f, -0.8044887315f, 0.5827524187f, 0,
+            -0.7870349638f, 0.03447489231f, 0.6159443543f, 0, -0.2015596421f, 0.6859872284f, 0.6991389226f, 0, -0.08581082512f, -0.10920836f, -0.9903080513f, 0, 0.5532693395f, 0.7325250401f, -0.396610771f, 0, -0.1842489331f, -0.9777375055f, -0.1004076743f, 0, 0.0775473789f, -0.9111505856f, 0.4047110257f, 0, 0.1399838409f, 0.7601631212f, -0.6344734459f, 0, 0.4484419361f, -0.845289248f, 0.2904925424f, 0
+    };
+
+
+    private static float FastMin(float a, float b) { return a < b ? a : b; }
+
+    private static float FastMax(float a, float b) { return a > b ? a : b; }
+
+    private static float FastAbs(float f) { return f < 0 ? -f : f; }
+
+    private static float FastSqrt(float f) { return (float)Math.sqrt(f); }
+
+    static int FastFloor(/*FNLfloat*/ float f) { return f >= 0 ? (int)f : (int)f - 1; }
+
+    private static int FastRound(/*FNLfloat*/ float f) { return f >= 0 ? (int)(f + 0.5f) : (int)(f - 0.5f); }
+
+    private static float Lerp(float a, float b, float t) { return a + t * (b - a); }
+
+    private static float InterpHermite(float t) { return t * t * (3 - 2 * t); }
+
+    private static float InterpQuintic(float t) { return t * t * t * (t * (t * 6 - 15) + 10); }
+
+    private static float CubicLerp(float a, float b, float c, float d, float t)
+    {
+        float p = (d - c) - (a - b);
+        return t * t * t * p + t * t * ((a - b) - p) + t * (c - a) + b;
+    }
+
+    private static float PingPong(float t)
+    {
+        t -= (int)(t * 0.5f) * 2;
+        return t < 1 ? t : 2 - t;
+    }
+
+    private void CalculateFractalBounding()
+    {
+        float gain = FastAbs(mGain);
+        float amp = gain;
+        float ampFractal = 1.0f;
+        for (int i = 1; i < mOctaves; i++)
+        {
+            ampFractal += amp;
+            amp *= gain;
+        }
+        mFractalBounding = 1 / ampFractal;
+    }
+
+    // Hashing
+    private static final int PrimeX = 501125321;
+    private static final int PrimeY = 1136930381;
+    private static final int PrimeZ = 1720413743;
+
+    private static int Hash(int seed, int xPrimed, int yPrimed)
+    {
+        int hash = seed ^ xPrimed ^ yPrimed;
+
+        hash *= 0x27d4eb2d;
+        return hash;
+    }
+
+    private static int Hash(int seed, int xPrimed, int yPrimed, int zPrimed)
+    {
+        int hash = seed ^ xPrimed ^ yPrimed ^ zPrimed;
+
+        hash *= 0x27d4eb2d;
+        return hash;
+    }
+
+    private static float ValCoord(int seed, int xPrimed, int yPrimed)
+    {
+        int hash = Hash(seed, xPrimed, yPrimed);
+
+        hash *= hash;
+        hash ^= hash << 19;
+        return hash * (1 / 2147483648.0f);
+    }
+
+    private static float ValCoord(int seed, int xPrimed, int yPrimed, int zPrimed)
+    {
+        int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
+
+        hash *= hash;
+        hash ^= hash << 19;
+        return hash * (1 / 2147483648.0f);
+    }
+
+    private static float GradCoord(int seed, int xPrimed, int yPrimed, float xd, float yd)
+    {
+        int hash = Hash(seed, xPrimed, yPrimed);
+        hash ^= hash >> 15;
+        hash &= 127 << 1;
+
+        float xg = Gradients2D[hash];
+        float yg = Gradients2D[hash | 1];
+
+        return xd * xg + yd * yg;
+    }
+
+    private static float GradCoord(int seed, int xPrimed, int yPrimed, int zPrimed, float xd, float yd, float zd)
+    {
+        int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
+        hash ^= hash >> 15;
+        hash &= 63 << 2;
+
+        float xg = Gradients3D[hash];
+        float yg = Gradients3D[hash | 1];
+        float zg = Gradients3D[hash | 2];
+
+        return xd * xg + yd * yg + zd * zg;
+    }
+
+
+    // Generic noise gen
+
+    private float GenNoiseSingle(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        switch (mNoiseType)
+        {
+            case OpenSimplex2:
+                return SingleSimplex(seed, x, y);
+            case OpenSimplex2S:
+                return SingleOpenSimplex2S(seed, x, y);
+            case Cellular:
+                return SingleCellular(seed, x, y);
+            case Perlin:
+                return SinglePerlin(seed, x, y);
+            case ValueCubic:
+                return SingleValueCubic(seed, x, y);
+            case Value:
+                return SingleValue(seed, x, y);
+            default:
+                return 0;
+        }
+    }
+
+    private float GenNoiseSingle(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        switch (mNoiseType)
+        {
+            case OpenSimplex2:
+                return SingleOpenSimplex2(seed, x, y, z);
+            case OpenSimplex2S:
+                return SingleOpenSimplex2S(seed, x, y, z);
+            case Cellular:
+                return SingleCellular(seed, x, y, z);
+            case Perlin:
+                return SinglePerlin(seed, x, y, z);
+            case ValueCubic:
+                return SingleValueCubic(seed, x, y, z);
+            case Value:
+                return SingleValue(seed, x, y, z);
+            default:
+                return 0;
+        }
+    }
+
+
+    // Noise Coordinate Transforms (frequency, and possible skew or rotation)
+
+    private void UpdateTransformType3D()
+    {
+        switch (mRotationType3D)
+        {
+            case ImproveXYPlanes:
+                mTransformType3D = TransformType3D.ImproveXYPlanes;
+                break;
+            case ImproveXZPlanes:
+                mTransformType3D = TransformType3D.ImproveXZPlanes;
+                break;
+            default:
+                switch (mNoiseType)
+                {
+                    case OpenSimplex2:
+                    case OpenSimplex2S:
+                        mTransformType3D = TransformType3D.DefaultOpenSimplex2;
+                        break;
+                    default:
+                        mTransformType3D = TransformType3D.None;
+                        break;
+                }
+                break;
+        }
+    }
+
+    private void UpdateWarpTransformType3D()
+    {
+        switch (mRotationType3D)
+        {
+            case ImproveXYPlanes:
+                mWarpTransformType3D = TransformType3D.ImproveXYPlanes;
+                break;
+            case ImproveXZPlanes:
+                mWarpTransformType3D = TransformType3D.ImproveXZPlanes;
+                break;
+            default:
+                switch (mDomainWarpType)
+                {
+                    case OpenSimplex2:
+                    case OpenSimplex2Reduced:
+                        mWarpTransformType3D = TransformType3D.DefaultOpenSimplex2;
+                        break;
+                    default:
+                        mWarpTransformType3D = TransformType3D.None;
+                        break;
+                }
+                break;
+        }
+    }
+
+
+    // Fractal FBm
+
+    private float GenFractalFBm(/*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int seed = mSeed;
+        float sum = 0;
+        float amp = mFractalBounding;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            float noise = GenNoiseSingle(seed++, x, y);
+            sum += noise * amp;
+            amp *= Lerp(1.0f, FastMin(noise + 1, 2) * 0.5f, mWeightedStrength);
+
+            x *= mLacunarity;
+            y *= mLacunarity;
+            amp *= mGain;
+        }
+
+        return sum;
+    }
+
+    private float GenFractalFBm(/*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int seed = mSeed;
+        float sum = 0;
+        float amp = mFractalBounding;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            float noise = GenNoiseSingle(seed++, x, y, z);
+            sum += noise * amp;
+            amp *= Lerp(1.0f, (noise + 1) * 0.5f, mWeightedStrength);
+
+            x *= mLacunarity;
+            y *= mLacunarity;
+            z *= mLacunarity;
+            amp *= mGain;
+        }
+
+        return sum;
+    }
+
+
+    // Fractal Ridged
+
+    private float GenFractalRidged(/*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int seed = mSeed;
+        float sum = 0;
+        float amp = mFractalBounding;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            float noise = FastAbs(GenNoiseSingle(seed++, x, y));
+            sum += (noise * -2 + 1) * amp;
+            amp *= Lerp(1.0f, 1 - noise, mWeightedStrength);
+
+            x *= mLacunarity;
+            y *= mLacunarity;
+            amp *= mGain;
+        }
+
+        return sum;
+    }
+
+    private float GenFractalRidged(/*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int seed = mSeed;
+        float sum = 0;
+        float amp = mFractalBounding;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            float noise = FastAbs(GenNoiseSingle(seed++, x, y, z));
+            sum += (noise * -2 + 1) * amp;
+            amp *= Lerp(1.0f, 1 - noise, mWeightedStrength);
+
+            x *= mLacunarity;
+            y *= mLacunarity;
+            z *= mLacunarity;
+            amp *= mGain;
+        }
+
+        return sum;
+    }
+
+
+    // Fractal PingPong 
+
+    private float GenFractalPingPong(/*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int seed = mSeed;
+        float sum = 0;
+        float amp = mFractalBounding;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            float noise = PingPong((GenNoiseSingle(seed++, x, y) + 1) * mPingPongStrength);
+            sum += (noise - 0.5f) * 2 * amp;
+            amp *= Lerp(1.0f, noise, mWeightedStrength);
+
+            x *= mLacunarity;
+            y *= mLacunarity;
+            amp *= mGain;
+        }
+
+        return sum;
+    }
+
+    private float GenFractalPingPong(/*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int seed = mSeed;
+        float sum = 0;
+        float amp = mFractalBounding;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            float noise = PingPong((GenNoiseSingle(seed++, x, y, z) + 1) * mPingPongStrength);
+            sum += (noise - 0.5f) * 2 * amp;
+            amp *= Lerp(1.0f, noise, mWeightedStrength);
+
+            x *= mLacunarity;
+            y *= mLacunarity;
+            z *= mLacunarity;
+            amp *= mGain;
+        }
+
+        return sum;
+    }
+
+
+    // Simplex/OpenSimplex2 Noise
+
+    private float SingleSimplex(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        // 2D OpenSimplex2 case uses the same algorithm as ordinary Simplex.
+
+        final float SQRT3 = 1.7320508075688772935274463415059f;
+        final float G2 = (3 - SQRT3) / 6;
+
+        /*
+         * --- Skew moved to switch statements before fractal evaluation ---
+         * final FNLfloat F2 = 0.5f * (SQRT3 - 1);
+         * FNLfloat s = (x + y) * F2;
+         * x += s; y += s;
+         */
+
+        int i = FastFloor(x);
+        int j = FastFloor(y);
+        float xi = (float)(x - i);
+        float yi = (float)(y - j);
+
+        float t = (xi + yi) * G2;
+        float x0 = (float)(xi - t);
+        float y0 = (float)(yi - t);
+
+        i *= PrimeX;
+        j *= PrimeY;
+
+        float n0, n1, n2;
+
+        float a = 0.5f - x0 * x0 - y0 * y0;
+        if (a <= 0) n0 = 0;
+        else
+        {
+            n0 = (a * a) * (a * a) * GradCoord(seed, i, j, x0, y0);
+        }
+
+        float c = (float)(2 * (1 - 2 * G2) * (1 / G2 - 2)) * t + ((float)(-2 * (1 - 2 * G2) * (1 - 2 * G2)) + a);
+        if (c <= 0) n2 = 0;
+        else
+        {
+            float x2 = x0 + (2 * (float)G2 - 1);
+            float y2 = y0 + (2 * (float)G2 - 1);
+            n2 = (c * c) * (c * c) * GradCoord(seed, i + PrimeX, j + PrimeY, x2, y2);
+        }
+
+        if (y0 > x0)
+        {
+            float x1 = x0 + (float)G2;
+            float y1 = y0 + ((float)G2 - 1);
+            float b = 0.5f - x1 * x1 - y1 * y1;
+            if (b <= 0) n1 = 0;
+            else
+            {
+                n1 = (b * b) * (b * b) * GradCoord(seed, i, j + PrimeY, x1, y1);
+            }
+        }
+        else
+        {
+            float x1 = x0 + ((float)G2 - 1);
+            float y1 = y0 + (float)G2;
+            float b = 0.5f - x1 * x1 - y1 * y1;
+            if (b <= 0) n1 = 0;
+            else
+            {
+                n1 = (b * b) * (b * b) * GradCoord(seed, i + PrimeX, j, x1, y1);
+            }
+        }
+
+        return (n0 + n1 + n2) * 99.83685446303647f;
+    }
+
+    private float SingleOpenSimplex2(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        // 3D OpenSimplex2 case uses two offset rotated cube grids.
+
+        /*
+         * --- Rotation moved to switch statements before fractal evaluation ---
+         * final FNLfloat R3 = (FNLfloat)(2.0 / 3.0);
+         * FNLfloat r = (x + y + z) * R3; // Rotation, not skew
+         * x = r - x; y = r - y; z = r - z;
+         */
+
+        int i = FastRound(x);
+        int j = FastRound(y);
+        int k = FastRound(z);
+        float x0 = (float)(x - i);
+        float y0 = (float)(y - j);
+        float z0 = (float)(z - k);
+
+        int xNSign = (int)(-1.0f - x0) | 1;
+        int yNSign = (int)(-1.0f - y0) | 1;
+        int zNSign = (int)(-1.0f - z0) | 1;
+
+        float ax0 = xNSign * -x0;
+        float ay0 = yNSign * -y0;
+        float az0 = zNSign * -z0;
+
+        i *= PrimeX;
+        j *= PrimeY;
+        k *= PrimeZ;
+
+        float value = 0;
+        float a = (0.6f - x0 * x0) - (y0 * y0 + z0 * z0);
+
+        for (int l = 0; ; l++)
+        {
+            if (a > 0)
+            {
+                value += (a * a) * (a * a) * GradCoord(seed, i, j, k, x0, y0, z0);
+            }
+
+            if (ax0 >= ay0 && ax0 >= az0)
+            {
+                float b = a + ax0 + ax0;
+                if (b > 1)
+                {
+                    b -= 1;
+                    value += (b * b) * (b * b) * GradCoord(seed, i - xNSign * PrimeX, j, k, x0 + xNSign, y0, z0);
+                }
+            }
+            else if (ay0 > ax0 && ay0 >= az0)
+            {
+                float b = a + ay0 + ay0;
+                if (b > 1)
+                {
+                    b -= 1;
+                    value += (b * b) * (b * b) * GradCoord(seed, i, j - yNSign * PrimeY, k, x0, y0 + yNSign, z0);
+                }
+            }
+            else
+            {
+                float b = a + az0 + az0;
+                if (b > 1)
+                {
+                    b -= 1;
+                    value += (b * b) * (b * b) * GradCoord(seed, i, j, k - zNSign * PrimeZ, x0, y0, z0 + zNSign);
+                }
+            }
+
+            if (l == 1) break;
+
+            ax0 = 0.5f - ax0;
+            ay0 = 0.5f - ay0;
+            az0 = 0.5f - az0;
+
+            x0 = xNSign * ax0;
+            y0 = yNSign * ay0;
+            z0 = zNSign * az0;
+
+            a += (0.75f - ax0) - (ay0 + az0);
+
+            i += (xNSign >> 1) & PrimeX;
+            j += (yNSign >> 1) & PrimeY;
+            k += (zNSign >> 1) & PrimeZ;
+
+            xNSign = -xNSign;
+            yNSign = -yNSign;
+            zNSign = -zNSign;
+
+            seed = ~seed;
+        }
+
+        return value * 32.69428253173828125f;
+    }
+
+
+    // OpenSimplex2S Noise
+
+    private float SingleOpenSimplex2S(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        // 2D OpenSimplex2S case is a modified 2D simplex noise.
+
+        final /*FNLfloat*/ float SQRT3 = (/*FNLfloat*/ float)1.7320508075688772935274463415059;
+        final /*FNLfloat*/ float G2 = (3 - SQRT3) / 6;
+
+        /*
+         * --- Skew moved to TransformNoiseCoordinate method ---
+         * final FNLfloat F2 = 0.5f * (SQRT3 - 1);
+         * FNLfloat s = (x + y) * F2;
+         * x += s; y += s;
+         */
+
+        int i = FastFloor(x);
+        int j = FastFloor(y);
+        float xi = (float)(x - i);
+        float yi = (float)(y - j);
+
+        i *= PrimeX;
+        j *= PrimeY;
+        int i1 = i + PrimeX;
+        int j1 = j + PrimeY;
+
+        float t = (xi + yi) * (float)G2;
+        float x0 = xi - t;
+        float y0 = yi - t;
+
+        float a0 = (2.0f / 3.0f) - x0 * x0 - y0 * y0;
+        float value = (a0 * a0) * (a0 * a0) * GradCoord(seed, i, j, x0, y0);
+
+        float a1 = (float)(2 * (1 - 2 * G2) * (1 / G2 - 2)) * t + ((float)(-2 * (1 - 2 * G2) * (1 - 2 * G2)) + a0);
+        float x1 = x0 - (float)(1 - 2 * G2);
+        float y1 = y0 - (float)(1 - 2 * G2);
+        value += (a1 * a1) * (a1 * a1) * GradCoord(seed, i1, j1, x1, y1);
+
+        // Nested conditionals were faster than compact bit logic/arithmetic.
+        float xmyi = xi - yi;
+        if (t > G2)
+        {
+            if (xi + xmyi > 1)
+            {
+                float x2 = x0 + (float)(3 * G2 - 2);
+                float y2 = y0 + (float)(3 * G2 - 1);
+                float a2 = (2.0f / 3.0f) - x2 * x2 - y2 * y2;
+                if (a2 > 0)
+                {
+                    value += (a2 * a2) * (a2 * a2) * GradCoord(seed, i + (PrimeX << 1), j + PrimeY, x2, y2);
+                }
+            }
+            else
+            {
+                float x2 = x0 + (float)G2;
+                float y2 = y0 + (float)(G2 - 1);
+                float a2 = (2.0f / 3.0f) - x2 * x2 - y2 * y2;
+                if (a2 > 0)
+                {
+                    value += (a2 * a2) * (a2 * a2) * GradCoord(seed, i, j + PrimeY, x2, y2);
+                }
+            }
+
+            if (yi - xmyi > 1)
+            {
+                float x3 = x0 + (float)(3 * G2 - 1);
+                float y3 = y0 + (float)(3 * G2 - 2);
+                float a3 = (2.0f / 3.0f) - x3 * x3 - y3 * y3;
+                if (a3 > 0)
+                {
+                    value += (a3 * a3) * (a3 * a3) * GradCoord(seed, i + PrimeX, j + (PrimeY << 1), x3, y3);
+                }
+            }
+            else
+            {
+                float x3 = x0 + (float)(G2 - 1);
+                float y3 = y0 + (float)G2;
+                float a3 = (2.0f / 3.0f) - x3 * x3 - y3 * y3;
+                if (a3 > 0)
+                {
+                    value += (a3 * a3) * (a3 * a3) * GradCoord(seed, i + PrimeX, j, x3, y3);
+                }
+            }
+        }
+        else
+        {
+            if (xi + xmyi < 0)
+            {
+                float x2 = x0 + (float)(1 - G2);
+                float y2 = y0 - (float)G2;
+                float a2 = (2.0f / 3.0f) - x2 * x2 - y2 * y2;
+                if (a2 > 0)
+                {
+                    value += (a2 * a2) * (a2 * a2) * GradCoord(seed, i - PrimeX, j, x2, y2);
+                }
+            }
+            else
+            {
+                float x2 = x0 + (float)(G2 - 1);
+                float y2 = y0 + (float)G2;
+                float a2 = (2.0f / 3.0f) - x2 * x2 - y2 * y2;
+                if (a2 > 0)
+                {
+                    value += (a2 * a2) * (a2 * a2) * GradCoord(seed, i + PrimeX, j, x2, y2);
+                }
+            }
+
+            if (yi < xmyi)
+            {
+                float x2 = x0 - (float)G2;
+                float y2 = y0 - (float)(G2 - 1);
+                float a2 = (2.0f / 3.0f) - x2 * x2 - y2 * y2;
+                if (a2 > 0)
+                {
+                    value += (a2 * a2) * (a2 * a2) * GradCoord(seed, i, j - PrimeY, x2, y2);
+                }
+            }
+            else
+            {
+                float x2 = x0 + (float)G2;
+                float y2 = y0 + (float)(G2 - 1);
+                float a2 = (2.0f / 3.0f) - x2 * x2 - y2 * y2;
+                if (a2 > 0)
+                {
+                    value += (a2 * a2) * (a2 * a2) * GradCoord(seed, i, j + PrimeY, x2, y2);
+                }
+            }
+        }
+
+        return value * 18.24196194486065f;
+    }
+
+    private float SingleOpenSimplex2S(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        // 3D OpenSimplex2S case uses two offset rotated cube grids.
+
+        /*
+         * --- Rotation moved to TransformNoiseCoordinate method ---
+         * final FNLfloat R3 = (FNLfloat)(2.0 / 3.0);
+         * FNLfloat r = (x + y + z) * R3; // Rotation, not skew
+         * x = r - x; y = r - y; z = r - z;
+         */
+
+        int i = FastFloor(x);
+        int j = FastFloor(y);
+        int k = FastFloor(z);
+        float xi = (float)(x - i);
+        float yi = (float)(y - j);
+        float zi = (float)(z - k);
+
+        i *= PrimeX;
+        j *= PrimeY;
+        k *= PrimeZ;
+        int seed2 = seed + 1293373;
+
+        int xNMask = (int)(-0.5f - xi);
+        int yNMask = (int)(-0.5f - yi);
+        int zNMask = (int)(-0.5f - zi);
+
+        float x0 = xi + xNMask;
+        float y0 = yi + yNMask;
+        float z0 = zi + zNMask;
+        float a0 = 0.75f - x0 * x0 - y0 * y0 - z0 * z0;
+        float value = (a0 * a0) * (a0 * a0) * GradCoord(seed,
+                i + (xNMask & PrimeX), j + (yNMask & PrimeY), k + (zNMask & PrimeZ), x0, y0, z0);
+
+        float x1 = xi - 0.5f;
+        float y1 = yi - 0.5f;
+        float z1 = zi - 0.5f;
+        float a1 = 0.75f - x1 * x1 - y1 * y1 - z1 * z1;
+        value += (a1 * a1) * (a1 * a1) * GradCoord(seed2,
+                i + PrimeX, j + PrimeY, k + PrimeZ, x1, y1, z1);
+
+        float xAFlipMask0 = ((xNMask | 1) << 1) * x1;
+        float yAFlipMask0 = ((yNMask | 1) << 1) * y1;
+        float zAFlipMask0 = ((zNMask | 1) << 1) * z1;
+        float xAFlipMask1 = (-2 - (xNMask << 2)) * x1 - 1.0f;
+        float yAFlipMask1 = (-2 - (yNMask << 2)) * y1 - 1.0f;
+        float zAFlipMask1 = (-2 - (zNMask << 2)) * z1 - 1.0f;
+
+        boolean skip5 = false;
+        float a2 = xAFlipMask0 + a0;
+        if (a2 > 0)
+        {
+            float x2 = x0 - (xNMask | 1);
+            float y2 = y0;
+            float z2 = z0;
+            value += (a2 * a2) * (a2 * a2) * GradCoord(seed,
+                    i + (~xNMask & PrimeX), j + (yNMask & PrimeY), k + (zNMask & PrimeZ), x2, y2, z2);
+        }
+        else
+        {
+            float a3 = yAFlipMask0 + zAFlipMask0 + a0;
+            if (a3 > 0)
+            {
+                float x3 = x0;
+                float y3 = y0 - (yNMask | 1);
+                float z3 = z0 - (zNMask | 1);
+                value += (a3 * a3) * (a3 * a3) * GradCoord(seed,
+                        i + (xNMask & PrimeX), j + (~yNMask & PrimeY), k + (~zNMask & PrimeZ), x3, y3, z3);
+            }
+
+            float a4 = xAFlipMask1 + a1;
+            if (a4 > 0)
+            {
+                float x4 = (xNMask | 1) + x1;
+                float y4 = y1;
+                float z4 = z1;
+                value += (a4 * a4) * (a4 * a4) * GradCoord(seed2,
+                        i + (xNMask & (PrimeX * 2)), j + PrimeY, k + PrimeZ, x4, y4, z4);
+                skip5 = true;
+            }
+        }
+
+        boolean skip9 = false;
+        float a6 = yAFlipMask0 + a0;
+        if (a6 > 0)
+        {
+            float x6 = x0;
+            float y6 = y0 - (yNMask | 1);
+            float z6 = z0;
+            value += (a6 * a6) * (a6 * a6) * GradCoord(seed,
+                    i + (xNMask & PrimeX), j + (~yNMask & PrimeY), k + (zNMask & PrimeZ), x6, y6, z6);
+        }
+        else
+        {
+            float a7 = xAFlipMask0 + zAFlipMask0 + a0;
+            if (a7 > 0)
+            {
+                float x7 = x0 - (xNMask | 1);
+                float y7 = y0;
+                float z7 = z0 - (zNMask | 1);
+                value += (a7 * a7) * (a7 * a7) * GradCoord(seed,
+                        i + (~xNMask & PrimeX), j + (yNMask & PrimeY), k + (~zNMask & PrimeZ), x7, y7, z7);
+            }
+
+            float a8 = yAFlipMask1 + a1;
+            if (a8 > 0)
+            {
+                float x8 = x1;
+                float y8 = (yNMask | 1) + y1;
+                float z8 = z1;
+                value += (a8 * a8) * (a8 * a8) * GradCoord(seed2,
+                        i + PrimeX, j + (yNMask & (PrimeY << 1)), k + PrimeZ, x8, y8, z8);
+                skip9 = true;
+            }
+        }
+
+        boolean skipD = false;
+        float aA = zAFlipMask0 + a0;
+        if (aA > 0)
+        {
+            float xA = x0;
+            float yA = y0;
+            float zA = z0 - (zNMask | 1);
+            value += (aA * aA) * (aA * aA) * GradCoord(seed,
+                    i + (xNMask & PrimeX), j + (yNMask & PrimeY), k + (~zNMask & PrimeZ), xA, yA, zA);
+        }
+        else
+        {
+            float aB = xAFlipMask0 + yAFlipMask0 + a0;
+            if (aB > 0)
+            {
+                float xB = x0 - (xNMask | 1);
+                float yB = y0 - (yNMask | 1);
+                float zB = z0;
+                value += (aB * aB) * (aB * aB) * GradCoord(seed,
+                        i + (~xNMask & PrimeX), j + (~yNMask & PrimeY), k + (zNMask & PrimeZ), xB, yB, zB);
+            }
+
+            float aC = zAFlipMask1 + a1;
+            if (aC > 0)
+            {
+                float xC = x1;
+                float yC = y1;
+                float zC = (zNMask | 1) + z1;
+                value += (aC * aC) * (aC * aC) * GradCoord(seed2,
+                        i + PrimeX, j + PrimeY, k + (zNMask & (PrimeZ << 1)), xC, yC, zC);
+                skipD = true;
+            }
+        }
+
+        if (!skip5)
+        {
+            float a5 = yAFlipMask1 + zAFlipMask1 + a1;
+            if (a5 > 0)
+            {
+                float x5 = x1;
+                float y5 = (yNMask | 1) + y1;
+                float z5 = (zNMask | 1) + z1;
+                value += (a5 * a5) * (a5 * a5) * GradCoord(seed2,
+                        i + PrimeX, j + (yNMask & (PrimeY << 1)), k + (zNMask & (PrimeZ << 1)), x5, y5, z5);
+            }
+        }
+
+        if (!skip9)
+        {
+            float a9 = xAFlipMask1 + zAFlipMask1 + a1;
+            if (a9 > 0)
+            {
+                float x9 = (xNMask | 1) + x1;
+                float y9 = y1;
+                float z9 = (zNMask | 1) + z1;
+                value += (a9 * a9) * (a9 * a9) * GradCoord(seed2,
+                        i + (xNMask & (PrimeX * 2)), j + PrimeY, k + (zNMask & (PrimeZ << 1)), x9, y9, z9);
+            }
+        }
+
+        if (!skipD)
+        {
+            float aD = xAFlipMask1 + yAFlipMask1 + a1;
+            if (aD > 0)
+            {
+                float xD = (xNMask | 1) + x1;
+                float yD = (yNMask | 1) + y1;
+                float zD = z1;
+                value += (aD * aD) * (aD * aD) * GradCoord(seed2,
+                        i + (xNMask & (PrimeX << 1)), j + (yNMask & (PrimeY << 1)), k + PrimeZ, xD, yD, zD);
+            }
+        }
+
+        return value * 9.046026385208288f;
+    }
+
+
+    // Cellular Noise
+
+    private float SingleCellular(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int xr = FastRound(x);
+        int yr = FastRound(y);
+
+        float distance0 = Float.MAX_VALUE;
+        float distance1 = Float.MAX_VALUE;
+        int closestHash = 0;
+
+        float cellularJitter = 0.43701595f * mCellularJitterModifier;
+
+        int xPrimed = (xr - 1) * PrimeX;
+        int yPrimedBase = (yr - 1) * PrimeY;
+
+        switch (mCellularDistanceFunction)
+        {
+            default:
+            case Euclidean:
+            case EuclideanSq:
+                for (int xi = xr - 1; xi <= xr + 1; xi++)
+                {
+                    int yPrimed = yPrimedBase;
+
+                    for (int yi = yr - 1; yi <= yr + 1; yi++)
+                    {
+                        int hash = Hash(seed, xPrimed, yPrimed);
+                        int idx = hash & (255 << 1);
+
+                        float vecX = (float)(xi - x) + RandVecs2D[idx] * cellularJitter;
+                        float vecY = (float)(yi - y) + RandVecs2D[idx | 1] * cellularJitter;
+
+                        float newDistance = vecX * vecX + vecY * vecY;
+
+                        distance1 = FastMax(FastMin(distance1, newDistance), distance0);
+                        if (newDistance < distance0)
+                        {
+                            distance0 = newDistance;
+                            closestHash = hash;
+                        }
+                        yPrimed += PrimeY;
+                    }
+                    xPrimed += PrimeX;
+                }
+                break;
+            case Manhattan:
+                for (int xi = xr - 1; xi <= xr + 1; xi++)
+                {
+                    int yPrimed = yPrimedBase;
+
+                    for (int yi = yr - 1; yi <= yr + 1; yi++)
+                    {
+                        int hash = Hash(seed, xPrimed, yPrimed);
+                        int idx = hash & (255 << 1);
+
+                        float vecX = (float)(xi - x) + RandVecs2D[idx] * cellularJitter;
+                        float vecY = (float)(yi - y) + RandVecs2D[idx | 1] * cellularJitter;
+
+                        float newDistance = FastAbs(vecX) + FastAbs(vecY);
+
+                        distance1 = FastMax(FastMin(distance1, newDistance), distance0);
+                        if (newDistance < distance0)
+                        {
+                            distance0 = newDistance;
+                            closestHash = hash;
+                        }
+                        yPrimed += PrimeY;
+                    }
+                    xPrimed += PrimeX;
+                }
+                break;
+            case Hybrid:
+                for (int xi = xr - 1; xi <= xr + 1; xi++)
+                {
+                    int yPrimed = yPrimedBase;
+
+                    for (int yi = yr - 1; yi <= yr + 1; yi++)
+                    {
+                        int hash = Hash(seed, xPrimed, yPrimed);
+                        int idx = hash & (255 << 1);
+
+                        float vecX = (float)(xi - x) + RandVecs2D[idx] * cellularJitter;
+                        float vecY = (float)(yi - y) + RandVecs2D[idx | 1] * cellularJitter;
+
+                        float newDistance = (FastAbs(vecX) + FastAbs(vecY)) + (vecX * vecX + vecY * vecY);
+
+                        distance1 = FastMax(FastMin(distance1, newDistance), distance0);
+                        if (newDistance < distance0)
+                        {
+                            distance0 = newDistance;
+                            closestHash = hash;
+                        }
+                        yPrimed += PrimeY;
+                    }
+                    xPrimed += PrimeX;
+                }
+                break;
+        }
+
+        if (mCellularDistanceFunction == CellularDistanceFunction.Euclidean && mCellularReturnType != CellularReturnType.CellValue)
+        {
+            distance0 = FastSqrt(distance0);
+
+            if (mCellularReturnType != CellularReturnType.Distance)
+            {
+                distance1 = FastSqrt(distance1);
+            }
+        }
+
+        switch (mCellularReturnType)
+        {
+            case CellValue:
+                return closestHash * (1 / 2147483648.0f);
+            case Distance:
+                return distance0 - 1;
+            case Distance2:
+                return distance1 - 1;
+            case Distance2Add:
+                return (distance1 + distance0) * 0.5f - 1;
+            case Distance2Sub:
+                return distance1 - distance0 - 1;
+            case Distance2Mul:
+                return distance1 * distance0 * 0.5f - 1;
+            case Distance2Div:
+                return distance0 / distance1 - 1;
+            default:
+                return 0;
+        }
+    }
+
+    private float SingleCellular(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int xr = FastRound(x);
+        int yr = FastRound(y);
+        int zr = FastRound(z);
+
+        float distance0 = Float.MAX_VALUE;
+        float distance1 = Float.MAX_VALUE;
+        int closestHash = 0;
+
+        float cellularJitter = 0.39614353f * mCellularJitterModifier;
+
+        int xPrimed = (xr - 1) * PrimeX;
+        int yPrimedBase = (yr - 1) * PrimeY;
+        int zPrimedBase = (zr - 1) * PrimeZ;
+
+        switch (mCellularDistanceFunction)
+        {
+            case Euclidean:
+            case EuclideanSq:
+                for (int xi = xr - 1; xi <= xr + 1; xi++)
+                {
+                    int yPrimed = yPrimedBase;
+
+                    for (int yi = yr - 1; yi <= yr + 1; yi++)
+                    {
+                        int zPrimed = zPrimedBase;
+
+                        for (int zi = zr - 1; zi <= zr + 1; zi++)
+                        {
+                            int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
+                            int idx = hash & (255 << 2);
+
+                            float vecX = (float)(xi - x) + RandVecs3D[idx] * cellularJitter;
+                            float vecY = (float)(yi - y) + RandVecs3D[idx | 1] * cellularJitter;
+                            float vecZ = (float)(zi - z) + RandVecs3D[idx | 2] * cellularJitter;
+
+                            float newDistance = vecX * vecX + vecY * vecY + vecZ * vecZ;
+
+                            distance1 = FastMax(FastMin(distance1, newDistance), distance0);
+                            if (newDistance < distance0)
+                            {
+                                distance0 = newDistance;
+                                closestHash = hash;
+                            }
+                            zPrimed += PrimeZ;
+                        }
+                        yPrimed += PrimeY;
+                    }
+                    xPrimed += PrimeX;
+                }
+                break;
+            case Manhattan:
+                for (int xi = xr - 1; xi <= xr + 1; xi++)
+                {
+                    int yPrimed = yPrimedBase;
+
+                    for (int yi = yr - 1; yi <= yr + 1; yi++)
+                    {
+                        int zPrimed = zPrimedBase;
+
+                        for (int zi = zr - 1; zi <= zr + 1; zi++)
+                        {
+                            int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
+                            int idx = hash & (255 << 2);
+
+                            float vecX = (float)(xi - x) + RandVecs3D[idx] * cellularJitter;
+                            float vecY = (float)(yi - y) + RandVecs3D[idx | 1] * cellularJitter;
+                            float vecZ = (float)(zi - z) + RandVecs3D[idx | 2] * cellularJitter;
+
+                            float newDistance = FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ);
+
+                            distance1 = FastMax(FastMin(distance1, newDistance), distance0);
+                            if (newDistance < distance0)
+                            {
+                                distance0 = newDistance;
+                                closestHash = hash;
+                            }
+                            zPrimed += PrimeZ;
+                        }
+                        yPrimed += PrimeY;
+                    }
+                    xPrimed += PrimeX;
+                }
+                break;
+            case Hybrid:
+                for (int xi = xr - 1; xi <= xr + 1; xi++)
+                {
+                    int yPrimed = yPrimedBase;
+
+                    for (int yi = yr - 1; yi <= yr + 1; yi++)
+                    {
+                        int zPrimed = zPrimedBase;
+
+                        for (int zi = zr - 1; zi <= zr + 1; zi++)
+                        {
+                            int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
+                            int idx = hash & (255 << 2);
+
+                            float vecX = (float)(xi - x) + RandVecs3D[idx] * cellularJitter;
+                            float vecY = (float)(yi - y) + RandVecs3D[idx | 1] * cellularJitter;
+                            float vecZ = (float)(zi - z) + RandVecs3D[idx | 2] * cellularJitter;
+
+                            float newDistance = (FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ)) + (vecX * vecX + vecY * vecY + vecZ * vecZ);
+
+                            distance1 = FastMax(FastMin(distance1, newDistance), distance0);
+                            if (newDistance < distance0)
+                            {
+                                distance0 = newDistance;
+                                closestHash = hash;
+                            }
+                            zPrimed += PrimeZ;
+                        }
+                        yPrimed += PrimeY;
+                    }
+                    xPrimed += PrimeX;
+                }
+                break;
+            default:
+                break;
+        }
+
+        if (mCellularDistanceFunction == CellularDistanceFunction.Euclidean && mCellularReturnType != CellularReturnType.CellValue)
+        {
+            distance0 = FastSqrt(distance0);
+
+            if (mCellularReturnType != CellularReturnType.Distance)
+            {
+                distance1 = FastSqrt(distance1);
+            }
+        }
+
+        switch (mCellularReturnType)
+        {
+            case CellValue:
+                return closestHash * (1 / 2147483648.0f);
+            case Distance:
+                return distance0 - 1;
+            case Distance2:
+                return distance1 - 1;
+            case Distance2Add:
+                return (distance1 + distance0) * 0.5f - 1;
+            case Distance2Sub:
+                return distance1 - distance0 - 1;
+            case Distance2Mul:
+                return distance1 * distance0 * 0.5f - 1;
+            case Distance2Div:
+                return distance0 / distance1 - 1;
+            default:
+                return 0;
+        }
+    }
+
+
+    // Perlin Noise
+
+    private float SinglePerlin(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int x0 = FastFloor(x);
+        int y0 = FastFloor(y);
+
+        float xd0 = (float)(x - x0);
+        float yd0 = (float)(y - y0);
+        float xd1 = xd0 - 1;
+        float yd1 = yd0 - 1;
+
+        float xs = InterpQuintic(xd0);
+        float ys = InterpQuintic(yd0);
+
+        x0 *= PrimeX;
+        y0 *= PrimeY;
+        int x1 = x0 + PrimeX;
+        int y1 = y0 + PrimeY;
+
+        float xf0 = Lerp(GradCoord(seed, x0, y0, xd0, yd0), GradCoord(seed, x1, y0, xd1, yd0), xs);
+        float xf1 = Lerp(GradCoord(seed, x0, y1, xd0, yd1), GradCoord(seed, x1, y1, xd1, yd1), xs);
+
+        return Lerp(xf0, xf1, ys) * 1.4247691104677813f;
+    }
+
+    private float SinglePerlin(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int x0 = FastFloor(x);
+        int y0 = FastFloor(y);
+        int z0 = FastFloor(z);
+
+        float xd0 = (float)(x - x0);
+        float yd0 = (float)(y - y0);
+        float zd0 = (float)(z - z0);
+        float xd1 = xd0 - 1;
+        float yd1 = yd0 - 1;
+        float zd1 = zd0 - 1;
+
+        float xs = InterpQuintic(xd0);
+        float ys = InterpQuintic(yd0);
+        float zs = InterpQuintic(zd0);
+
+        x0 *= PrimeX;
+        y0 *= PrimeY;
+        z0 *= PrimeZ;
+        int x1 = x0 + PrimeX;
+        int y1 = y0 + PrimeY;
+        int z1 = z0 + PrimeZ;
+
+        float xf00 = Lerp(GradCoord(seed, x0, y0, z0, xd0, yd0, zd0), GradCoord(seed, x1, y0, z0, xd1, yd0, zd0), xs);
+        float xf10 = Lerp(GradCoord(seed, x0, y1, z0, xd0, yd1, zd0), GradCoord(seed, x1, y1, z0, xd1, yd1, zd0), xs);
+        float xf01 = Lerp(GradCoord(seed, x0, y0, z1, xd0, yd0, zd1), GradCoord(seed, x1, y0, z1, xd1, yd0, zd1), xs);
+        float xf11 = Lerp(GradCoord(seed, x0, y1, z1, xd0, yd1, zd1), GradCoord(seed, x1, y1, z1, xd1, yd1, zd1), xs);
+
+        float yf0 = Lerp(xf00, xf10, ys);
+        float yf1 = Lerp(xf01, xf11, ys);
+
+        return Lerp(yf0, yf1, zs) * 0.964921414852142333984375f;
+    }
+
+
+    // Value Cubic Noise
+
+    private float SingleValueCubic(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int x1 = FastFloor(x);
+        int y1 = FastFloor(y);
+
+        float xs = (float)(x - x1);
+        float ys = (float)(y - y1);
+
+        x1 *= PrimeX;
+        y1 *= PrimeY;
+        int x0 = x1 - PrimeX;
+        int y0 = y1 - PrimeY;
+        int x2 = x1 + PrimeX;
+        int y2 = y1 + PrimeY;
+        int x3 = x1 + (PrimeX << 1);
+        int y3 = y1 + (PrimeY << 1);
+
+        return CubicLerp(
+                CubicLerp(ValCoord(seed, x0, y0), ValCoord(seed, x1, y0), ValCoord(seed, x2, y0), ValCoord(seed, x3, y0),
+                        xs),
+                CubicLerp(ValCoord(seed, x0, y1), ValCoord(seed, x1, y1), ValCoord(seed, x2, y1), ValCoord(seed, x3, y1),
+                        xs),
+                CubicLerp(ValCoord(seed, x0, y2), ValCoord(seed, x1, y2), ValCoord(seed, x2, y2), ValCoord(seed, x3, y2),
+                        xs),
+                CubicLerp(ValCoord(seed, x0, y3), ValCoord(seed, x1, y3), ValCoord(seed, x2, y3), ValCoord(seed, x3, y3),
+                        xs),
+                ys) * (1 / (1.5f * 1.5f));
+    }
+
+    private float SingleValueCubic(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int x1 = FastFloor(x);
+        int y1 = FastFloor(y);
+        int z1 = FastFloor(z);
+
+        float xs = (float)(x - x1);
+        float ys = (float)(y - y1);
+        float zs = (float)(z - z1);
+
+        x1 *= PrimeX;
+        y1 *= PrimeY;
+        z1 *= PrimeZ;
+
+        int x0 = x1 - PrimeX;
+        int y0 = y1 - PrimeY;
+        int z0 = z1 - PrimeZ;
+        int x2 = x1 + PrimeX;
+        int y2 = y1 + PrimeY;
+        int z2 = z1 + PrimeZ;
+        int x3 = x1 + (PrimeX << 1);
+        int y3 = y1 + (PrimeY << 1);
+        int z3 = z1 + (PrimeZ << 1);
+
+
+        return CubicLerp(
+                CubicLerp(
+                        CubicLerp(ValCoord(seed, x0, y0, z0), ValCoord(seed, x1, y0, z0), ValCoord(seed, x2, y0, z0), ValCoord(seed, x3, y0, z0), xs),
+                        CubicLerp(ValCoord(seed, x0, y1, z0), ValCoord(seed, x1, y1, z0), ValCoord(seed, x2, y1, z0), ValCoord(seed, x3, y1, z0), xs),
+                        CubicLerp(ValCoord(seed, x0, y2, z0), ValCoord(seed, x1, y2, z0), ValCoord(seed, x2, y2, z0), ValCoord(seed, x3, y2, z0), xs),
+                        CubicLerp(ValCoord(seed, x0, y3, z0), ValCoord(seed, x1, y3, z0), ValCoord(seed, x2, y3, z0), ValCoord(seed, x3, y3, z0), xs),
+                        ys),
+                CubicLerp(
+                        CubicLerp(ValCoord(seed, x0, y0, z1), ValCoord(seed, x1, y0, z1), ValCoord(seed, x2, y0, z1), ValCoord(seed, x3, y0, z1), xs),
+                        CubicLerp(ValCoord(seed, x0, y1, z1), ValCoord(seed, x1, y1, z1), ValCoord(seed, x2, y1, z1), ValCoord(seed, x3, y1, z1), xs),
+                        CubicLerp(ValCoord(seed, x0, y2, z1), ValCoord(seed, x1, y2, z1), ValCoord(seed, x2, y2, z1), ValCoord(seed, x3, y2, z1), xs),
+                        CubicLerp(ValCoord(seed, x0, y3, z1), ValCoord(seed, x1, y3, z1), ValCoord(seed, x2, y3, z1), ValCoord(seed, x3, y3, z1), xs),
+                        ys),
+                CubicLerp(
+                        CubicLerp(ValCoord(seed, x0, y0, z2), ValCoord(seed, x1, y0, z2), ValCoord(seed, x2, y0, z2), ValCoord(seed, x3, y0, z2), xs),
+                        CubicLerp(ValCoord(seed, x0, y1, z2), ValCoord(seed, x1, y1, z2), ValCoord(seed, x2, y1, z2), ValCoord(seed, x3, y1, z2), xs),
+                        CubicLerp(ValCoord(seed, x0, y2, z2), ValCoord(seed, x1, y2, z2), ValCoord(seed, x2, y2, z2), ValCoord(seed, x3, y2, z2), xs),
+                        CubicLerp(ValCoord(seed, x0, y3, z2), ValCoord(seed, x1, y3, z2), ValCoord(seed, x2, y3, z2), ValCoord(seed, x3, y3, z2), xs),
+                        ys),
+                CubicLerp(
+                        CubicLerp(ValCoord(seed, x0, y0, z3), ValCoord(seed, x1, y0, z3), ValCoord(seed, x2, y0, z3), ValCoord(seed, x3, y0, z3), xs),
+                        CubicLerp(ValCoord(seed, x0, y1, z3), ValCoord(seed, x1, y1, z3), ValCoord(seed, x2, y1, z3), ValCoord(seed, x3, y1, z3), xs),
+                        CubicLerp(ValCoord(seed, x0, y2, z3), ValCoord(seed, x1, y2, z3), ValCoord(seed, x2, y2, z3), ValCoord(seed, x3, y2, z3), xs),
+                        CubicLerp(ValCoord(seed, x0, y3, z3), ValCoord(seed, x1, y3, z3), ValCoord(seed, x2, y3, z3), ValCoord(seed, x3, y3, z3), xs),
+                        ys),
+                zs) * (1 / (1.5f * 1.5f * 1.5f));
+    }
+
+
+    // Value Noise
+
+    private float SingleValue(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y)
+    {
+        int x0 = FastFloor(x);
+        int y0 = FastFloor(y);
+
+        float xs = InterpHermite((float)(x - x0));
+        float ys = InterpHermite((float)(y - y0));
+
+        x0 *= PrimeX;
+        y0 *= PrimeY;
+        int x1 = x0 + PrimeX;
+        int y1 = y0 + PrimeY;
+
+        float xf0 = Lerp(ValCoord(seed, x0, y0), ValCoord(seed, x1, y0), xs);
+        float xf1 = Lerp(ValCoord(seed, x0, y1), ValCoord(seed, x1, y1), xs);
+
+        return Lerp(xf0, xf1, ys);
+    }
+
+    private float SingleValue(int seed, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+    {
+        int x0 = FastFloor(x);
+        int y0 = FastFloor(y);
+        int z0 = FastFloor(z);
+
+        float xs = InterpHermite((float)(x - x0));
+        float ys = InterpHermite((float)(y - y0));
+        float zs = InterpHermite((float)(z - z0));
+
+        x0 *= PrimeX;
+        y0 *= PrimeY;
+        z0 *= PrimeZ;
+        int x1 = x0 + PrimeX;
+        int y1 = y0 + PrimeY;
+        int z1 = z0 + PrimeZ;
+
+        float xf00 = Lerp(ValCoord(seed, x0, y0, z0), ValCoord(seed, x1, y0, z0), xs);
+        float xf10 = Lerp(ValCoord(seed, x0, y1, z0), ValCoord(seed, x1, y1, z0), xs);
+        float xf01 = Lerp(ValCoord(seed, x0, y0, z1), ValCoord(seed, x1, y0, z1), xs);
+        float xf11 = Lerp(ValCoord(seed, x0, y1, z1), ValCoord(seed, x1, y1, z1), xs);
+
+        float yf0 = Lerp(xf00, xf10, ys);
+        float yf1 = Lerp(xf01, xf11, ys);
+
+        return Lerp(yf0, yf1, zs);
+    }
+
+
+    // Domain Warp
+
+    private void DoSingleDomainWarp(int seed, float amp, float freq, /*FNLfloat*/ float x, /*FNLfloat*/ float y, Vector2 coord)
+    {
+        switch (mDomainWarpType)
+        {
+            case OpenSimplex2:
+                SingleDomainWarpSimplexGradient(seed, amp * 38.283687591552734375f, freq, x, y, coord, false);
+                break;
+            case OpenSimplex2Reduced:
+                SingleDomainWarpSimplexGradient(seed, amp * 16.0f, freq, x, y, coord, true);
+                break;
+            case BasicGrid:
+                SingleDomainWarpBasicGrid(seed, amp, freq, x, y, coord);
+                break;
+        }
+    }
+
+    private void DoSingleDomainWarp(int seed, float amp, float freq, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z, Vector3 coord)
+    {
+        switch (mDomainWarpType)
+        {
+            case OpenSimplex2:
+                SingleDomainWarpOpenSimplex2Gradient(seed, amp * 32.69428253173828125f, freq, x, y, z, coord, false);
+                break;
+            case OpenSimplex2Reduced:
+                SingleDomainWarpOpenSimplex2Gradient(seed, amp * 7.71604938271605f, freq, x, y, z, coord, true);
+                break;
+            case BasicGrid:
+                SingleDomainWarpBasicGrid(seed, amp, freq, x, y, z, coord);
+                break;
+        }
+    }
+
+
+    // Domain Warp Single Wrapper
+
+    private void DomainWarpSingle(Vector2 coord)
+    {
+        int seed = mSeed;
+        float amp = mDomainWarpAmp * mFractalBounding;
+        float freq = mFrequency;
+
+        /*FNLfloat*/ float xs = coord.x;
+        /*FNLfloat*/ float ys = coord.y;
+        switch (mDomainWarpType)
+        {
+            case OpenSimplex2:
+            case OpenSimplex2Reduced:
+            {
+                final /*FNLfloat*/ float SQRT3 = (/*FNLfloat*/ float)1.7320508075688772935274463415059;
+                final /*FNLfloat*/ float F2 = 0.5f * (SQRT3 - 1);
+                /*FNLfloat*/ float t = (xs + ys) * F2;
+                xs += t; ys += t;
+            }
+            break;
+            default:
+                break;
+        }
+
+        DoSingleDomainWarp(seed, amp, freq, xs, ys, coord);
+    }
+
+    private void DomainWarpSingle(Vector3 coord)
+    {
+        int seed = mSeed;
+        float amp = mDomainWarpAmp * mFractalBounding;
+        float freq = mFrequency;
+
+        /*FNLfloat*/ float xs = coord.x;
+        /*FNLfloat*/ float ys = coord.y;
+        /*FNLfloat*/ float zs = coord.z;
+        switch (mWarpTransformType3D)
+        {
+            case ImproveXYPlanes:
+            {
+                /*FNLfloat*/ float xy = xs + ys;
+                /*FNLfloat*/ float s2 = xy * -(/*FNLfloat*/ float)0.211324865405187;
+                zs *= (/*FNLfloat*/ float)0.577350269189626;
+                xs += s2 - zs;
+                ys = ys + s2 - zs;
+                zs += xy * (/*FNLfloat*/ float)0.577350269189626;
+            }
+            break;
+            case ImproveXZPlanes:
+            {
+                /*FNLfloat*/ float xz = xs + zs;
+                /*FNLfloat*/ float s2 = xz * -(/*FNLfloat*/ float)0.211324865405187;
+                ys *= (/*FNLfloat*/ float)0.577350269189626;
+                xs += s2 - ys; zs += s2 - ys;
+                ys += xz * (/*FNLfloat*/ float)0.577350269189626;
+            }
+            break;
+            case DefaultOpenSimplex2:
+            {
+                final /*FNLfloat*/ float R3 = (/*FNLfloat*/ float)(2.0 / 3.0);
+                /*FNLfloat*/ float r = (xs + ys + zs) * R3; // Rotation, not skew
+                xs = r - xs;
+                ys = r - ys;
+                zs = r - zs;
+            }
+            break;
+            default:
+                break;
+        }
+
+        DoSingleDomainWarp(seed, amp, freq, xs, ys, zs, coord);
+    }
+
+
+    // Domain Warp Fractal Progressive
+
+    private void DomainWarpFractalProgressive(Vector2 coord)
+    {
+        int seed = mSeed;
+        float amp = mDomainWarpAmp * mFractalBounding;
+        float freq = mFrequency;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            /*FNLfloat*/ float xs = coord.x;
+            /*FNLfloat*/ float ys = coord.y;
+            switch (mDomainWarpType)
+            {
+                case OpenSimplex2:
+                case OpenSimplex2Reduced:
+                {
+                    final /*FNLfloat*/ float SQRT3 = (/*FNLfloat*/ float)1.7320508075688772935274463415059;
+                    final /*FNLfloat*/ float F2 = 0.5f * (SQRT3 - 1);
+                    /*FNLfloat*/ float t = (xs + ys) * F2;
+                    xs += t; ys += t;
+                }
+                break;
+                default:
+                    break;
+            }
+
+            DoSingleDomainWarp(seed, amp, freq, xs, ys, coord);
+
+            seed++;
+            amp *= mGain;
+            freq *= mLacunarity;
+        }
+    }
+
+    private void DomainWarpFractalProgressive(Vector3 coord)
+    {
+        int seed = mSeed;
+        float amp = mDomainWarpAmp * mFractalBounding;
+        float freq = mFrequency;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            /*FNLfloat*/ float xs = coord.x;
+            /*FNLfloat*/ float ys = coord.y;
+            /*FNLfloat*/ float zs = coord.z;
+            switch (mWarpTransformType3D)
+            {
+                case ImproveXYPlanes:
+                {
+                    /*FNLfloat*/ float xy = xs + ys;
+                    /*FNLfloat*/ float s2 = xy * -(/*FNLfloat*/ float)0.211324865405187;
+                    zs *= (/*FNLfloat*/ float)0.577350269189626;
+                    xs += s2 - zs;
+                    ys = ys + s2 - zs;
+                    zs += xy * (/*FNLfloat*/ float)0.577350269189626;
+                }
+                break;
+                case ImproveXZPlanes:
+                {
+                    /*FNLfloat*/ float xz = xs + zs;
+                    /*FNLfloat*/ float s2 = xz * -(/*FNLfloat*/ float)0.211324865405187;
+                    ys *= (/*FNLfloat*/ float)0.577350269189626;
+                    xs += s2 - ys; zs += s2 - ys;
+                    ys += xz * (/*FNLfloat*/ float)0.577350269189626;
+                }
+                break;
+                case DefaultOpenSimplex2:
+                {
+                    final /*FNLfloat*/ float R3 = (/*FNLfloat*/ float)(2.0 / 3.0);
+                    /*FNLfloat*/ float r = (xs + ys + zs) * R3; // Rotation, not skew
+                    xs = r - xs;
+                    ys = r - ys;
+                    zs = r - zs;
+                }
+                break;
+                default:
+                    break;
+            }
+
+            DoSingleDomainWarp(seed, amp, freq, xs, ys, zs, coord);
+
+            seed++;
+            amp *= mGain;
+            freq *= mLacunarity;
+        }
+    }
+
+
+    // Domain Warp Fractal Independant
+    private void DomainWarpFractalIndependent(Vector2 coord)
+    {
+        /*FNLfloat*/ float xs = coord.x;
+        /*FNLfloat*/ float ys = coord.y;
+        switch (mDomainWarpType)
+        {
+            case OpenSimplex2:
+            case OpenSimplex2Reduced:
+            {
+                final /*FNLfloat*/ float SQRT3 = (/*FNLfloat*/ float)1.7320508075688772935274463415059;
+                final /*FNLfloat*/ float F2 = 0.5f * (SQRT3 - 1);
+                /*FNLfloat*/ float t = (xs + ys) * F2;
+                xs += t; ys += t;
+            }
+            break;
+            default:
+                break;
+        }
+
+        int seed = mSeed;
+        float amp = mDomainWarpAmp * mFractalBounding;
+        float freq = mFrequency;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            DoSingleDomainWarp(seed, amp, freq, xs, ys, coord);
+
+            seed++;
+            amp *= mGain;
+            freq *= mLacunarity;
+        }
+    }
+
+    private void DomainWarpFractalIndependent(Vector3 coord)
+    {
+        /*FNLfloat*/ float xs = coord.x;
+        /*FNLfloat*/ float ys = coord.y;
+        /*FNLfloat*/ float zs = coord.z;
+        switch (mWarpTransformType3D)
+        {
+            case ImproveXYPlanes:
+            {
+                /*FNLfloat*/ float xy = xs + ys;
+                /*FNLfloat*/ float s2 = xy * -(/*FNLfloat*/ float)0.211324865405187;
+                zs *= (/*FNLfloat*/ float)0.577350269189626;
+                xs += s2 - zs;
+                ys = ys + s2 - zs;
+                zs += xy * (/*FNLfloat*/ float)0.577350269189626;
+            }
+            break;
+            case ImproveXZPlanes:
+            {
+                /*FNLfloat*/ float xz = xs + zs;
+                /*FNLfloat*/ float s2 = xz * -(/*FNLfloat*/ float)0.211324865405187;
+                ys *= (/*FNLfloat*/ float)0.577350269189626;
+                xs += s2 - ys; zs += s2 - ys;
+                ys += xz * (/*FNLfloat*/ float)0.577350269189626;
+            }
+            break;
+            case DefaultOpenSimplex2:
+            {
+                final /*FNLfloat*/ float R3 = (/*FNLfloat*/ float)(2.0 / 3.0);
+                /*FNLfloat*/ float r = (xs + ys + zs) * R3; // Rotation, not skew
+                xs = r - xs;
+                ys = r - ys;
+                zs = r - zs;
+            }
+            break;
+            default:
+                break;
+        }
+
+        int seed = mSeed;
+        float amp = mDomainWarpAmp * mFractalBounding;
+        float freq = mFrequency;
+
+        for (int i = 0; i < mOctaves; i++)
+        {
+            DoSingleDomainWarp(seed, amp, freq, xs, ys, zs, coord);
+
+            seed++;
+            amp *= mGain;
+            freq *= mLacunarity;
+        }
+    }
+
+
+    // Domain Warp Basic Grid
+
+    private void SingleDomainWarpBasicGrid(int seed, float warpAmp, float frequency, /*FNLfloat*/ float x, /*FNLfloat*/ float y, Vector2 coord)
+    {
+        /*FNLfloat*/ float xf = x * frequency;
+        /*FNLfloat*/ float yf = y * frequency;
+
+        int x0 = FastFloor(xf);
+        int y0 = FastFloor(yf);
+
+        float xs = InterpHermite((float)(xf - x0));
+        float ys = InterpHermite((float)(yf - y0));
+
+        x0 *= PrimeX;
+        y0 *= PrimeY;
+        int x1 = x0 + PrimeX;
+        int y1 = y0 + PrimeY;
+
+        int hash0 = Hash(seed, x0, y0) & (255 << 1);
+        int hash1 = Hash(seed, x1, y0) & (255 << 1);
+
+        float lx0x = Lerp(RandVecs2D[hash0], RandVecs2D[hash1], xs);
+        float ly0x = Lerp(RandVecs2D[hash0 | 1], RandVecs2D[hash1 | 1], xs);
+
+        hash0 = Hash(seed, x0, y1) & (255 << 1);
+        hash1 = Hash(seed, x1, y1) & (255 << 1);
+
+        float lx1x = Lerp(RandVecs2D[hash0], RandVecs2D[hash1], xs);
+        float ly1x = Lerp(RandVecs2D[hash0 | 1], RandVecs2D[hash1 | 1], xs);
+
+        coord.x += Lerp(lx0x, lx1x, ys) * warpAmp;
+        coord.y += Lerp(ly0x, ly1x, ys) * warpAmp;
+    }
+
+    private void SingleDomainWarpBasicGrid(int seed, float warpAmp, float frequency, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z, Vector3 coord)
+    {
+        /*FNLfloat*/ float xf = x * frequency;
+        /*FNLfloat*/ float yf = y * frequency;
+        /*FNLfloat*/ float zf = z * frequency;
+
+        int x0 = FastFloor(xf);
+        int y0 = FastFloor(yf);
+        int z0 = FastFloor(zf);
+
+        float xs = InterpHermite((float)(xf - x0));
+        float ys = InterpHermite((float)(yf - y0));
+        float zs = InterpHermite((float)(zf - z0));
+
+        x0 *= PrimeX;
+        y0 *= PrimeY;
+        z0 *= PrimeZ;
+        int x1 = x0 + PrimeX;
+        int y1 = y0 + PrimeY;
+        int z1 = z0 + PrimeZ;
+
+        int hash0 = Hash(seed, x0, y0, z0) & (255 << 2);
+        int hash1 = Hash(seed, x1, y0, z0) & (255 << 2);
+
+        float lx0x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
+        float ly0x = Lerp(RandVecs3D[hash0 | 1], RandVecs3D[hash1 | 1], xs);
+        float lz0x = Lerp(RandVecs3D[hash0 | 2], RandVecs3D[hash1 | 2], xs);
+
+        hash0 = Hash(seed, x0, y1, z0) & (255 << 2);
+        hash1 = Hash(seed, x1, y1, z0) & (255 << 2);
+
+        float lx1x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
+        float ly1x = Lerp(RandVecs3D[hash0 | 1], RandVecs3D[hash1 | 1], xs);
+        float lz1x = Lerp(RandVecs3D[hash0 | 2], RandVecs3D[hash1 | 2], xs);
+
+        float lx0y = Lerp(lx0x, lx1x, ys);
+        float ly0y = Lerp(ly0x, ly1x, ys);
+        float lz0y = Lerp(lz0x, lz1x, ys);
+
+        hash0 = Hash(seed, x0, y0, z1) & (255 << 2);
+        hash1 = Hash(seed, x1, y0, z1) & (255 << 2);
+
+        lx0x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
+        ly0x = Lerp(RandVecs3D[hash0 | 1], RandVecs3D[hash1 | 1], xs);
+        lz0x = Lerp(RandVecs3D[hash0 | 2], RandVecs3D[hash1 | 2], xs);
+
+        hash0 = Hash(seed, x0, y1, z1) & (255 << 2);
+        hash1 = Hash(seed, x1, y1, z1) & (255 << 2);
+
+        lx1x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
+        ly1x = Lerp(RandVecs3D[hash0 | 1], RandVecs3D[hash1 | 1], xs);
+        lz1x = Lerp(RandVecs3D[hash0 | 2], RandVecs3D[hash1 | 2], xs);
+
+        coord.x += Lerp(lx0y, Lerp(lx0x, lx1x, ys), zs) * warpAmp;
+        coord.y += Lerp(ly0y, Lerp(ly0x, ly1x, ys), zs) * warpAmp;
+        coord.z += Lerp(lz0y, Lerp(lz0x, lz1x, ys), zs) * warpAmp;
+    }
+
+
+    // Domain Warp Simplex/OpenSimplex2
+    private void SingleDomainWarpSimplexGradient(int seed, float warpAmp, float frequency, /*FNLfloat*/ float x, /*FNLfloat*/ float y, Vector2 coord, boolean outGradOnly)
+    {
+        final float SQRT3 = 1.7320508075688772935274463415059f;
+        final float G2 = (3 - SQRT3) / 6;
+
+        x *= frequency;
+        y *= frequency;
+
+        /*
+         * --- Skew moved to switch statements before fractal evaluation  ---
+         * final FNLfloat F2 = 0.5f * (SQRT3 - 1);
+         * FNLfloat s = (x + y) * F2;
+         * x += s; y += s;
+         */
+
+        int i = FastFloor(x);
+        int j = FastFloor(y);
+        float xi = (float)(x - i);
+        float yi = (float)(y - j);
+
+        float t = (xi + yi) * G2;
+        float x0 = (float)(xi - t);
+        float y0 = (float)(yi - t);
+
+        i *= PrimeX;
+        j *= PrimeY;
+
+        float vx, vy;
+        vx = vy = 0;
+
+        float a = 0.5f - x0 * x0 - y0 * y0;
+        if (a > 0)
+        {
+            float aaaa = (a * a) * (a * a);
+            float xo, yo;
+            if (outGradOnly)
+            {
+                int hash = Hash(seed, i, j) & (255 << 1);
+                xo = RandVecs2D[hash];
+                yo = RandVecs2D[hash | 1];
+            }
+            else
+            {
+                int hash = Hash(seed, i, j);
+                int index1 = hash & (127 << 1);
+                int index2 = (hash >> 7) & (255 << 1);
+                float xg = Gradients2D[index1];
+                float yg = Gradients2D[index1 | 1];
+                float value = x0 * xg + y0 * yg;
+                float xgo = RandVecs2D[index2];
+                float ygo = RandVecs2D[index2 | 1];
+                xo = value * xgo;
+                yo = value * ygo;
+            }
+            vx += aaaa * xo;
+            vy += aaaa * yo;
+        }
+
+        float c = (float)(2 * (1 - 2 * G2) * (1 / G2 - 2)) * t + ((float)(-2 * (1 - 2 * G2) * (1 - 2 * G2)) + a);
+        if (c > 0)
+        {
+            float x2 = x0 + (2 * (float)G2 - 1);
+            float y2 = y0 + (2 * (float)G2 - 1);
+            float cccc = (c * c) * (c * c);
+            float xo, yo;
+            if (outGradOnly)
+            {
+                int hash = Hash(seed, i + PrimeX, j + PrimeY) & (255 << 1);
+                xo = RandVecs2D[hash];
+                yo = RandVecs2D[hash | 1];
+            }
+            else
+            {
+                int hash = Hash(seed, i + PrimeX, j + PrimeY);
+                int index1 = hash & (127 << 1);
+                int index2 = (hash >> 7) & (255 << 1);
+                float xg = Gradients2D[index1];
+                float yg = Gradients2D[index1 | 1];
+                float value = x2 * xg + y2 * yg;
+                float xgo = RandVecs2D[index2];
+                float ygo = RandVecs2D[index2 | 1];
+                xo = value * xgo;
+                yo = value * ygo;
+            }
+            vx += cccc * xo;
+            vy += cccc * yo;
+        }
+
+        if (y0 > x0)
+        {
+            float x1 = x0 + (float)G2;
+            float y1 = y0 + ((float)G2 - 1);
+            float b = 0.5f - x1 * x1 - y1 * y1;
+            if (b > 0)
+            {
+                float bbbb = (b * b) * (b * b);
+                float xo, yo;
+                if (outGradOnly)
+                {
+                    int hash = Hash(seed, i, j + PrimeY) & (255 << 1);
+                    xo = RandVecs2D[hash];
+                    yo = RandVecs2D[hash | 1];
+                }
+                else
+                {
+                    int hash = Hash(seed, i, j + PrimeY);
+                    int index1 = hash & (127 << 1);
+                    int index2 = (hash >> 7) & (255 << 1);
+                    float xg = Gradients2D[index1];
+                    float yg = Gradients2D[index1 | 1];
+                    float value = x1 * xg + y1 * yg;
+                    float xgo = RandVecs2D[index2];
+                    float ygo = RandVecs2D[index2 | 1];
+                    xo = value * xgo;
+                    yo = value * ygo;
+                }
+                vx += bbbb * xo;
+                vy += bbbb * yo;
+            }
+        }
+        else
+        {
+            float x1 = x0 + ((float)G2 - 1);
+            float y1 = y0 + (float)G2;
+            float b = 0.5f - x1 * x1 - y1 * y1;
+            if (b > 0)
+            {
+                float bbbb = (b * b) * (b * b);
+                float xo, yo;
+                if (outGradOnly)
+                {
+                    int hash = Hash(seed, i + PrimeX, j) & (255 << 1);
+                    xo = RandVecs2D[hash];
+                    yo = RandVecs2D[hash | 1];
+                }
+                else
+                {
+                    int hash = Hash(seed, i + PrimeX, j);
+                    int index1 = hash & (127 << 1);
+                    int index2 = (hash >> 7) & (255 << 1);
+                    float xg = Gradients2D[index1];
+                    float yg = Gradients2D[index1 | 1];
+                    float value = x1 * xg + y1 * yg;
+                    float xgo = RandVecs2D[index2];
+                    float ygo = RandVecs2D[index2 | 1];
+                    xo = value * xgo;
+                    yo = value * ygo;
+                }
+                vx += bbbb * xo;
+                vy += bbbb * yo;
+            }
+        }
+
+        coord.x += vx * warpAmp;
+        coord.y += vy * warpAmp;
+    }
+
+    private void SingleDomainWarpOpenSimplex2Gradient(int seed, float warpAmp, float frequency, /*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z, Vector3 coord, boolean outGradOnly)
+    {
+        x *= frequency;
+        y *= frequency;
+        z *= frequency;
+
+        /*
+         * --- Rotation moved to switch statements before fractal evaluation ---
+         * final FNLfloat R3 = (FNLfloat)(2.0 / 3.0);
+         * FNLfloat r = (x + y + z) * R3; // Rotation, not skew
+         * x = r - x; y = r - y; z = r - z;
+         */
+
+        int i = FastRound(x);
+        int j = FastRound(y);
+        int k = FastRound(z);
+        float x0 = (float)x - i;
+        float y0 = (float)y - j;
+        float z0 = (float)z - k;
+
+        int xNSign = (int)(-x0 - 1.0f) | 1;
+        int yNSign = (int)(-y0 - 1.0f) | 1;
+        int zNSign = (int)(-z0 - 1.0f) | 1;
+
+        float ax0 = xNSign * -x0;
+        float ay0 = yNSign * -y0;
+        float az0 = zNSign * -z0;
+
+        i *= PrimeX;
+        j *= PrimeY;
+        k *= PrimeZ;
+
+        float vx, vy, vz;
+        vx = vy = vz = 0;
+
+        float a = (0.6f - x0 * x0) - (y0 * y0 + z0 * z0);
+        for (int l = 0; ; l++)
+        {
+            if (a > 0)
+            {
+                float aaaa = (a * a) * (a * a);
+                float xo, yo, zo;
+                if (outGradOnly)
+                {
+                    int hash = Hash(seed, i, j, k) & (255 << 2);
+                    xo = RandVecs3D[hash];
+                    yo = RandVecs3D[hash | 1];
+                    zo = RandVecs3D[hash | 2];
+                }
+                else
+                {
+                    int hash = Hash(seed, i, j, k);
+                    int index1 = hash & (63 << 2);
+                    int index2 = (hash >> 6) & (255 << 2);
+                    float xg = Gradients3D[index1];
+                    float yg = Gradients3D[index1 | 1];
+                    float zg = Gradients3D[index1 | 2];
+                    float value = x0 * xg + y0 * yg + z0 * zg;
+                    float xgo = RandVecs3D[index2];
+                    float ygo = RandVecs3D[index2 | 1];
+                    float zgo = RandVecs3D[index2 | 2];
+                    xo = value * xgo;
+                    yo = value * ygo;
+                    zo = value * zgo;
+                }
+                vx += aaaa * xo;
+                vy += aaaa * yo;
+                vz += aaaa * zo;
+            }
+
+            float b = a;
+            int i1 = i;
+            int j1 = j;
+            int k1 = k;
+            float x1 = x0;
+            float y1 = y0;
+            float z1 = z0;
+
+            if (ax0 >= ay0 && ax0 >= az0)
+            {
+                x1 += xNSign;
+                b = b + ax0 + ax0;
+                i1 -= xNSign * PrimeX;
+            }
+            else if (ay0 > ax0 && ay0 >= az0)
+            {
+                y1 += yNSign;
+                b = b + ay0 + ay0;
+                j1 -= yNSign * PrimeY;
+            }
+            else
+            {
+                z1 += zNSign;
+                b = b + az0 + az0;
+                k1 -= zNSign * PrimeZ;
+            }
+
+            if (b > 1)
+            {
+                b -= 1;
+                float bbbb = (b * b) * (b * b);
+                float xo, yo, zo;
+                if (outGradOnly)
+                {
+                    int hash = Hash(seed, i1, j1, k1) & (255 << 2);
+                    xo = RandVecs3D[hash];
+                    yo = RandVecs3D[hash | 1];
+                    zo = RandVecs3D[hash | 2];
+                }
+                else
+                {
+                    int hash = Hash(seed, i1, j1, k1);
+                    int index1 = hash & (63 << 2);
+                    int index2 = (hash >> 6) & (255 << 2);
+                    float xg = Gradients3D[index1];
+                    float yg = Gradients3D[index1 | 1];
+                    float zg = Gradients3D[index1 | 2];
+                    float value = x1 * xg + y1 * yg + z1 * zg;
+                    float xgo = RandVecs3D[index2];
+                    float ygo = RandVecs3D[index2 | 1];
+                    float zgo = RandVecs3D[index2 | 2];
+                    xo = value * xgo;
+                    yo = value * ygo;
+                    zo = value * zgo;
+                }
+                vx += bbbb * xo;
+                vy += bbbb * yo;
+                vz += bbbb * zo;
+            }
+
+            if (l == 1) break;
+
+            ax0 = 0.5f - ax0;
+            ay0 = 0.5f - ay0;
+            az0 = 0.5f - az0;
+
+            x0 = xNSign * ax0;
+            y0 = yNSign * ay0;
+            z0 = zNSign * az0;
+
+            a += (0.75f - ax0) - (ay0 + az0);
+
+            i += (xNSign >> 1) & PrimeX;
+            j += (yNSign >> 1) & PrimeY;
+            k += (zNSign >> 1) & PrimeZ;
+
+            xNSign = -xNSign;
+            yNSign = -yNSign;
+            zNSign = -zNSign;
+
+            seed += 1293373;
+        }
+
+        coord.x += vx * warpAmp;
+        coord.y += vy * warpAmp;
+        coord.z += vz * warpAmp;
+    }
+
+    public static class Vector2
+    {
+        public /*FNLfloat*/ float x;
+        public /*FNLfloat*/ float y;
+        public Vector2(/*FNLfloat*/ float x, /*FNLfloat*/ float y)
+        {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    public static class Vector3
+    {
+        public /*FNLfloat*/ float x;
+        public /*FNLfloat*/ float y;
+        public /*FNLfloat*/ float z;
+        public Vector3(/*FNLfloat*/ float x, /*FNLfloat*/ float y, /*FNLfloat*/ float z)
+        {
+            this.x = x;
+            this.y = y;
+            this.z = z;
+        }
+    }
+}
--- net/minecraft/client/gui/container/CraftingScreen.java
+++ /dev/null
@@ -1,31 +1,0 @@
-package net.minecraft.client.gui.container;
-
-import net.minecraft.game.entity.player.InventoryPlayer;
-import net.minecraft.game.world.World;
-import net.minecraft.game.world.block.WorkbenchContainer;
-import org.lwjgl.opengl.GL11;
-
-public class CraftingScreen extends ContainerScreen {
-	public CraftingScreen(InventoryPlayer var1, World var2, int var3, int var4, int var5) {
-		super(new WorkbenchContainer(var1, var2, var3, var4, var5));
-	}
-
-	public void onGuiClosed() {
-		super.onGuiClosed();
-		this.inventorySlots.onCraftGuiClosed(this.mc.thePlayer);
-	}
-
-	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 28, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
-	}
-
-	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.textureRegistry.getTexture("/gui/crafting.png");
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.textureRegistry.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedRect(var3, var4, 0, 0, this.xSize, this.ySize);
-	}
-}
--- net/minecraft/client/gui/CreateWorldScreen.java
+++ net/minecraft/client/gui/CreateWorldScreen.java
@@ -4,6 +4,7 @@
 import net.minecraft.client.controller.SurvivalPlayerController;
 import net.minecraft.client.gui.component.GuiButton;
 import net.minecraft.client.gui.component.GuiTextField;
+import net.minecraft.game.entity.player.PlayerContainerCreative;
 import net.minecraft.game.world.save.SaveFormat;
 import net.minecraft.util.ChatAllowedCharacters;
 import net.minecraft.util.MathHelper;
@@ -16,12 +17,15 @@
 	private GuiTextField textboxSeed;
 	private String folderName;
 	private boolean createClicked;
+	private boolean creative = false;
+	private GuiButton modeButton;
 
 	public CreateWorldScreen(GuiScreen var1) {
 		this.field_22131_a = var1;
 	}
 
 	public void updateScreen() {
+		super.updateScreen();
 		this.textboxWorldName.updateCursorCounter();
 		this.textboxSeed.updateCursorCounter();
 	}
@@ -30,8 +34,10 @@
 		StringTranslate var1 = StringTranslate.getInstance();
 		Keyboard.enableRepeatEvents(true);
 		this.controlList.clear();
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, var1.translateKey("selectWorld.create")));
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, var1.translateKey("gui.cancel")));
+		modeButton = new GuiButton(0, this.width / 2 - 100, this.height / 4 + 72 + 8 + 12, getModeButtonName());
+		this.controlList.add(modeButton);
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 96 + 8+ 12, var1.translateKey("selectWorld.create")));
+		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 120 + 8 + 12, var1.translateKey("gui.cancel")));
 		this.textboxWorldName = new GuiTextField(this, this.fontRenderer, this.width / 2 - 100, 60, 200, 20, var1.translateKey("selectWorld.newWorld"));
 		this.textboxWorldName.isFocused = true;
 		this.textboxWorldName.setMaxStringLength(32);
@@ -70,9 +76,9 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
-			if(var1.id == 1) {
+			if(var1.id == 2) {
 				this.mc.displayGuiScreen(this.field_22131_a);
-			} else if(var1.id == 0) {
+			} else if(var1.id == 1) {
 				this.mc.displayGuiScreen((GuiScreen)null);
 				if(this.createClicked) {
 					return;
@@ -95,8 +101,14 @@
 				this.mc.playerController = new SurvivalPlayerController(this.mc);
 				this.mc.startWorld(this.folderName, this.textboxWorldName.getText(), var2);
 				this.mc.displayGuiScreen((GuiScreen)null);
+				this.mc.theWorld.getWorldInfo().setCreative(this.creative);
+				if(this.creative && this.mc.thePlayer != null) {
+					this.mc.thePlayer.inventorySlots = new PlayerContainerCreative(this.mc.thePlayer.inventory, !this.mc.theWorld.remoteWorld);
+				}
+			} else if(var1.id == 0) {
+				creative = !creative;
+				modeButton.displayString = getModeButtonName();
 			}
-
 		}
 	}
 
@@ -123,7 +135,7 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		StringTranslate var4 = StringTranslate.getInstance();
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, var4.translateKey("selectWorld.create"), this.width / 2, this.height / 4 - 60 + 20, 16777215);
 		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterName"), this.width / 2 - 100, 47, 10526880);
 		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.resultFolder") + " " + this.folderName, this.width / 2 - 100, 85, 10526880);
@@ -143,5 +155,9 @@
 			this.textboxSeed.setFocused(false);
 		}
 
+	}
+
+	public String getModeButtonName() {
+		return creative ? "Gamemode: Creative" : "Gamemode: Survival";
 	}
 }
--- net/minecraft/game/item/BoatItem.java
+++ net/minecraft/game/item/BoatItem.java
@@ -47,7 +47,8 @@
 					var2.entityJoinedWorld(new BoatEntity(var2, (double)((float)var25 + 0.5F), (double)((float)var26 + 1.0F), (double)((float)var27 + 0.5F)));
 				}
 
-				--var1.count;
+				if(!var2.isCreativeWorld())
+					--var1.count;
 			}
 
 			return var1;
--- net/minecraft/game/world/block/CactusBlock.java
+++ net/minecraft/game/world/block/CactusBlock.java
@@ -42,7 +42,7 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.textureIndex - 1 : (var1 == 0 ? this.textureIndex + 1 : this.textureIndex);
+		return var1 == 1 ? this.textureIndex : (var1 == 0 ? this.textureIndex + 64 : this.textureIndex + 32);
 	}
 
 	public boolean renderAsNormalBlock() {
--- net/minecraft/server/player/ItemInWorldManager.java
+++ net/minecraft/server/player/ItemInWorldManager.java
@@ -70,7 +70,7 @@
 			if(var5 != 0) {
 				Block var6 = Block.blocksList[var5];
 				float var7 = var6.blockStrength(this.thisPlayer) * (float)(var4 + 1);
-				if(var7 >= 0.7F) {
+				if(var7 >= 0.7F || this.thisWorld.isCreativeWorld()) {
 					this.func_325_c(var1, var2, var3);
 				} else if(!this.field_22050_k) {
 					this.field_22050_k = true;
@@ -99,7 +99,7 @@
 	public boolean func_325_c(int var1, int var2, int var3) {
 		int var4 = this.thisWorld.getBlockId(var1, var2, var3);
 		int var5 = this.thisWorld.getBlockMetadata(var1, var2, var3);
-		this.thisWorld.playAuxEffect(this.thisPlayer, 2001, var1, var2, var3, var4 + this.thisWorld.getBlockMetadata(var1, var2, var3) * 256);
+		this.thisWorld.playAuxEffect(this.thisPlayer, 2001, var1, var2, var3, var4 | (this.thisWorld.getBlockMetadata(var1, var2, var3) << 16));
 		boolean var6 = this.removeBlock(var1, var2, var3);
 		ItemStack var7 = this.thisPlayer.getCurrentEquippedItem();
 		if(var7 != null) {
--- net/minecraft/game/world/save/SaveHandlerMP.java
+++ net/minecraft/game/world/save/SaveHandlerMP.java
@@ -5,6 +5,7 @@
 import net.minecraft.game.world.WorldInfo;
 import net.minecraft.game.world.chunk.loader.ChunkLoader;
 import net.minecraft.game.world.dimension.Dimension;
+import net.minecraft.server.MPPlayerDataHandler;
 
 public class SaveHandlerMP implements SaveHandler {
 	public WorldInfo loadWorldInfo() {
@@ -22,6 +23,16 @@
 	}
 
 	public void saveWorldInfo(WorldInfo var1) {
+	}
+
+	@Override
+	public MPPlayerDataHandler getPlayerFileData() {
+		return null;
+	}
+
+	@Override
+	public void flushCache() {
+
 	}
 
 	public File getMapFile(String var1) {
--- /dev/null
+++ net/minecraft/game/item/slot/CreativeSlot.java
@@ -1,0 +1,55 @@
+package net.minecraft.game.item.slot;
+
+import net.minecraft.game.item.Inventory;
+import net.minecraft.game.item.ItemStack;
+
+public class CreativeSlot extends Slot {
+    public ItemStack item;
+
+    public CreativeSlot(Inventory var1, int var2, int var3, int var4, ItemStack item) {
+        super(var1, var2, var3, var4);
+        this.item = item;
+    }
+
+    public ItemStack decrStackSize(int i) {
+        if (this.item == null) {
+            return null;
+        } else {
+            ItemStack newStack = this.item.copy();
+            return newStack;
+        }
+    }
+
+    public boolean hasStack() {
+        return this.item != null;
+    }
+
+    public int getSlotStackLimit() {
+        return 100;
+    }
+
+    public ItemStack getStack() {
+        if (this.item == null) {
+            return null;
+        } else {
+            ItemStack newStack = this.item.copy();
+            return newStack;
+        }
+    }
+
+    public boolean isItemValid(ItemStack var1) {
+        return false;
+    }
+
+    public void onPickupFromSlot(ItemStack itemstack) {
+        if(true) {
+            throw new RuntimeException("i like boys, they're so cyoot >w<");
+        }
+    }
+
+    public void onSlotChanged() {
+    }
+
+    public void putStack(ItemStack itemstack) {
+    }
+}
--- net/minecraft/game/world/biome/RainforestBiome.java
+++ /dev/null
@@ -1,12 +1,0 @@
-package net.minecraft.game.world.biome;
-
-import java.util.Random;
-import net.minecraft.game.world.terrain.feature.BigTreeFeature;
-import net.minecraft.game.world.terrain.feature.Feature;
-import net.minecraft.game.world.terrain.feature.TreeFeature;
-
-public class RainforestBiome extends Biome {
-	public Feature getRandomTreeFeature(Random var1) {
-		return (Feature)(var1.nextInt(3) == 0 ? new BigTreeFeature() : new TreeFeature());
-	}
-}
--- net/minecraft/game/item/DoorItem.java
+++ net/minecraft/game/item/DoorItem.java
@@ -71,7 +71,8 @@
 				var3.editingBlocks = false;
 				var3.notifyBlocksOfNeighborChange(var4, var5, var6, var8.blockID);
 				var3.notifyBlocksOfNeighborChange(var4, var5 + 1, var6, var8.blockID);
-				--var1.count;
+				if(!var3.isCreativeWorld())
+					--var1.count;
 				return true;
 			}
 		}
--- net/minecraft/game/item/AltBlockItem.java
+++ net/minecraft/game/item/AltBlockItem.java
@@ -50,7 +50,8 @@
 					Block.blocksList[this.block].onBlockPlaced(var3, var4, var5, var6, var7);
 					Block.blocksList[this.block].onBlockPlacedBy(var3, var4, var5, var6, var2);
 					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.baseStepSoundDir(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.count;
+					if(!var3.isCreativeWorld())
+						--var1.count;
 				}
 			}
 
--- net/minecraft/game/item/recipe/RecipesIngots.java
+++ net/minecraft/game/item/recipe/RecipesIngots.java
@@ -8,12 +8,12 @@
 	private Object[][] recipeItems = new Object[][]{{Block.goldBlock, new ItemStack(Item.goldIngot, 9)}, {Block.ironBlock, new ItemStack(Item.ironIngot, 9)}, {Block.diamondBlock, new ItemStack(Item.diamond, 9)}, {Block.lapisBlock, new ItemStack(Item.dye, 9, 4)}};
 
 	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
+		/*for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
 			Block var3 = (Block)this.recipeItems[var2][0];
 			ItemStack var4 = (ItemStack)this.recipeItems[var2][1];
 			var1.addRecipe(new ItemStack(var3), new Object[]{"###", "###", "###", Character.valueOf('#'), var4});
 			var1.addRecipe(var4, new Object[]{"#", Character.valueOf('#'), var3});
-		}
+		}*/
 
 	}
 }
--- net/minecraft/client/gui/GuiScreen.java
+++ net/minecraft/client/gui/GuiScreen.java
@@ -4,6 +4,7 @@
 import java.awt.datatransfer.DataFlavor;
 import java.awt.datatransfer.Transferable;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.component.GuiButton;
@@ -21,6 +22,7 @@
 	protected FontRenderer fontRenderer;
 	public ParticleRenderer field_25091_h;
 	private GuiButton selectedButton = null;
+	protected static PanoramaRenderer panorama;
 
 	public void drawScreen(int var1, int var2, float var3) {
 		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
@@ -128,25 +130,38 @@
 	}
 
 	public void updateScreen() {
+		panorama.panoramaCounter++;
 	}
 
 	public void onGuiClosed() {
 	}
 
-	public void drawDefaultBackground() {
-		this.drawWorldBackground(0);
+	public void drawDefaultBackground(float delta) {
+		this.drawWorldBackground(0,delta);
 	}
 
-	public void drawWorldBackground(int var1) {
+	public void drawWorldBackground(int var, float delta) {
 		if(this.mc.theWorld != null) {
 			this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
 		} else {
-			this.drawBackground(var1);
+			this.drawBackground(var,delta);
 		}
 
 	}
 
-	public void drawBackground(int var1) {
+	public void drawBackground(int var1, float delta) {
+		if(panorama == null) {
+			panorama = new PanoramaRenderer(mc);
+		}
+		GL11.glDisable(GL11.GL_LIGHTING);
+		GL11.glDisable(GL11.GL_FOG);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		panorama.drawPanorama(mc,width,height,zLevel,delta);
+		drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
+		drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);
+		if(true) {
+			return;
+		}
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		Tessellator var2 = Tessellator.instance;
@@ -170,5 +185,18 @@
 	}
 
 	public void selectNextField() {
+	}
+
+	public void drawTooltip(int mouseX, int mouseY, String s) {
+		int var9 = mouseX + 12;
+		int var10 = mouseY - 12;
+		int var11 = this.fontRenderer.getStringWidth(Arrays.stream(s.split("\n")).max((x,y) -> this.fontRenderer.getStringWidth(x)-this.fontRenderer.getStringWidth(y)).get());
+		int var12 = (9 * s.split("\n").length) - 1;
+		this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + var12 + 3, -1073741824, -1073741824);
+		int offset = 0;
+		for(String line : s.split("\n")) {
+			this.fontRenderer.drawStringWithShadow(line, var9, var10+offset, -1);
+			offset += 9;
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/game/world/biome/OldClimaticBiomeSource.java
@@ -1,0 +1,121 @@
+package net.minecraft.game.world.biome;
+
+import net.minecraft.game.world.World;
+import net.minecraft.game.world.chunk.ChunkCoordIntPair;
+import net.minecraft.game.world.terrain.noise.SimplexNoiseOctaves;
+
+import java.util.Random;
+
+public class OldClimaticBiomeSource {
+	private SimplexNoiseOctaves temperatureNoise;
+	private SimplexNoiseOctaves humidityNoise;
+	private SimplexNoiseOctaves offsetNoise;
+	public double[] temperature;
+	public double[] humidity;
+	public double[] offset;
+	public Biome[] blockGeneratorData;
+
+	protected OldClimaticBiomeSource() {
+	}
+
+	public OldClimaticBiomeSource(World var1) {
+		this.temperatureNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 9871L), 4);
+		this.humidityNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 39811L), 4);
+		this.offsetNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 543321L), 2);
+	}
+
+	public Biome getBiomeGenAtChunkCoord(ChunkCoordIntPair var1) {
+		return this.getBiomeGenAt(var1.chunkXPos << 4, var1.chunkZPos << 4);
+	}
+
+	public Biome getBiomeGenAt(int var1, int var2) {
+		return this.getBlockGeneratorData(var1, var2, 1, 1)[0];
+	}
+
+	public double getTemperature(int var1, int var2) {
+		this.temperature = this.temperatureNoise.generateNoiseArray2D(this.temperature, (double)var1, (double)var2, 1, 1, (double)0.025F, (double)0.025F, 0.5D);
+		return this.temperature[0];
+	}
+
+	public Biome[] getBlockGeneratorData(int var1, int var2, int var3, int var4) {
+		this.blockGeneratorData = this.loadBlockGeneratorData(this.blockGeneratorData, var1, var2, var3, var4);
+		return this.blockGeneratorData;
+	}
+
+	public double[] getTemperatures(double[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new double[var4 * var5];
+		}
+
+		var1 = this.temperatureNoise.generateNoiseArray2D(var1, (double)var2, (double)var3, var4, var5, (double)0.025F, (double)0.025F, 0.25D);
+		this.offset = this.offsetNoise.generateNoiseArray2D(this.offset, (double)var2, (double)var3, var4, var5, 0.25D, 0.25D, 0.5882352941176471D);
+		int var6 = 0;
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var5; ++var8) {
+				double var9 = this.offset[var6] * 1.1D + 0.5D;
+				double var11 = 0.01D;
+				double var13 = 1.0D - var11;
+				double var15 = (var1[var6] * 0.15D + 0.7D) * var13 + var9 * var11;
+				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
+				if(var15 < 0.0D) {
+					var15 = 0.0D;
+				}
+
+				if(var15 > 1.0D) {
+					var15 = 1.0D;
+				}
+
+				var1[var6] = var15;
+				++var6;
+			}
+		}
+
+		return var1;
+	}
+
+	public Biome[] loadBlockGeneratorData(Biome[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new Biome[var4 * var5];
+		}
+
+		this.temperature = this.temperatureNoise.generateNoiseArray2D(this.temperature, (double)var2, (double)var3, var4, var4, (double)0.025F, (double)0.025F, 0.25D);
+		this.humidity = this.humidityNoise.generateNoiseArray2D(this.humidity, (double)var2, (double)var3, var4, var4, (double)0.05F, (double)0.05F, 1.0D / 3.0D);
+		this.offset = this.offsetNoise.generateNoiseArray2D(this.offset, (double)var2, (double)var3, var4, var4, 0.25D, 0.25D, 0.5882352941176471D);
+		int var6 = 0;
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var5; ++var8) {
+				double var9 = this.offset[var6] * 1.1D + 0.5D;
+				double var11 = 0.01D;
+				double var13 = 1.0D - var11;
+				double var15 = (this.temperature[var6] * 0.15D + 0.7D) * var13 + var9 * var11;
+				var11 = 0.002D;
+				var13 = 1.0D - var11;
+				double var17 = (this.humidity[var6] * 0.15D + 0.5D) * var13 + var9 * var11;
+				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
+				if(var15 < 0.0D) {
+					var15 = 0.0D;
+				}
+
+				if(var17 < 0.0D) {
+					var17 = 0.0D;
+				}
+
+				if(var15 > 1.0D) {
+					var15 = 1.0D;
+				}
+
+				if(var17 > 1.0D) {
+					var17 = 1.0D;
+				}
+
+				this.temperature[var6] = var15;
+				this.humidity[var6] = var17;
+				//var1[var6++] = Biome.getBiomeFromLookup(var15, var17);
+			}
+		}
+
+		return var1;
+	}
+}
--- net/minecraft/client/gui/ConnectionFailedScreen.java
+++ net/minecraft/client/gui/ConnectionFailedScreen.java
@@ -38,7 +38,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, this.errorMessage, this.width / 2, this.height / 2 - 50, 16777215);
 		this.drawCenteredString(this.fontRenderer, this.errorDetail, this.width / 2, this.height / 2 - 10, 16777215);
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/client/world/WorldClient.java
+++ net/minecraft/client/world/WorldClient.java
@@ -14,6 +14,7 @@
 import net.minecraft.network.NetClientHandler;
 import net.minecraft.network.packet.Packet255KickDisconnect;
 import net.minecraft.util.MCHash;
+import net.minecraft.util.SharedConstants;
 
 public class WorldClient extends World {
 	private LinkedList field_1057_z = new LinkedList();
@@ -22,12 +23,14 @@
 	private MCHash field_1055_D = new MCHash();
 	private Set field_20914_E = new HashSet();
 	private Set field_1053_F = new HashSet();
+	private boolean creative;
 
-	public WorldClient(NetClientHandler var1, long var2, int var4) {
+	public WorldClient(NetClientHandler var1, long var2, int var4, boolean creative) {
 		super(new SaveHandlerMP(), "MpServer", Dimension.getProviderForDimension(var4), var2);
 		this.sendQueue = var1;
 		this.setSpawnPoint(new BlockPos(8, 64, 8));
 		this.mapStorage = var1.field_28118_b;
+		this.creative = creative;
 	}
 
 	public void tick() {
@@ -78,7 +81,7 @@
 	}
 
 	public void setSpawnLocation() {
-		this.setSpawnPoint(new BlockPos(8, 64, 8));
+		this.setSpawnPoint(new BlockPos(8, 128, 8));
 	}
 
 	protected void updateBlocksAndPlayCaveSounds() {
@@ -99,7 +102,7 @@
 		}
 
 		if(!var3) {
-			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 128, var2 * 16 + 15);
+			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, SharedConstants.CHUNK_HEIGHT, var2 * 16 + 15);
 		}
 
 	}
@@ -119,7 +122,7 @@
 		this.field_20914_E.remove(var1);
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
+	public void obtainEntitySkin(Entity var1) {
 		super.obtainEntitySkin(var1);
 		if(this.field_1053_F.contains(var1)) {
 			this.field_1053_F.remove(var1);
@@ -248,5 +251,10 @@
 			}
 
 		}
+	}
+
+	@Override
+	public boolean isCreativeWorld() {
+		return creative;
 	}
 }
--- net/minecraft/game/world/WorldInfo.java
+++ net/minecraft/game/world/WorldInfo.java
@@ -20,6 +20,7 @@
 	private int rainTime;
 	private boolean thundering;
 	private int thunderTime;
+	private boolean creative;
 
 	public WorldInfo(CompoundTag var1) {
 		this.randomSeed = var1.getLong("RandomSeed");
@@ -35,6 +36,7 @@
 		this.raining = var1.getBoolean("raining");
 		this.thunderTime = var1.getInteger("thunderTime");
 		this.thundering = var1.getBoolean("thundering");
+		this.creative = var1.getBoolean("creative");
 		if(var1.hasKey("Player")) {
 			this.playerTag = var1.getCompoundTag("Player");
 			this.dimension = this.playerTag.getInteger("Dimension");
@@ -63,6 +65,7 @@
 		this.raining = var1.raining;
 		this.thunderTime = var1.thunderTime;
 		this.thundering = var1.thundering;
+		this.creative = var1.creative;
 	}
 
 	public CompoundTag getNBTTagCompound() {
@@ -102,6 +105,7 @@
 		var1.setBoolean("raining", this.raining);
 		var1.setInteger("thunderTime", this.thunderTime);
 		var1.setBoolean("thundering", this.thundering);
+		var1.setBoolean("creative", this.creative);
 		if(var2 != null) {
 			var1.setCompoundTag("Player", var2);
 		}
@@ -220,5 +224,13 @@
 
 	public void setRainTime(int var1) {
 		this.rainTime = var1;
+	}
+
+	public boolean isCreative() {
+		return this.creative;
+	}
+
+	public void setCreative(boolean creative) {
+		this.creative = creative;
 	}
 }
--- /dev/null
+++ net/minecraft/game/entity/mechanical/WindMillEntity.java
@@ -1,0 +1,120 @@
+package net.minecraft.game.entity.mechanical;
+
+import com.mojang.nbt.CompoundTag;
+import net.minecraft.game.entity.Entity;
+import net.minecraft.game.item.Item;
+import net.minecraft.game.physics.AxisAlignedBB;
+import net.minecraft.game.world.World;
+import net.minecraft.game.world.block.Block;
+import net.minecraft.game.world.block.mechanical.AxleBlock;
+
+public class WindMillEntity extends Entity {
+    public boolean align;
+    public float rotation = 0;
+    public boolean providingPower = false;
+
+    public WindMillEntity(World world) {
+        super(world);
+        setSize(12.8F, 12.8F);
+    }
+
+    public WindMillEntity(World world, double x, double y, double z, boolean align)
+    {
+        this(world);
+        this.setPosition(x, y, z);
+        this.align = align;
+        applyAlignment();
+    }
+
+    public void applyAlignment() {
+        if(align)
+        {
+            boundingBox.setBounds(posX - 0.40000000596046448D, posY - 6.4000000953674316D, posZ - 6.4000000953674316D, posX + 0.40000000596046448D, posY + 6.4000000953674316D, posZ + 6.4000000953674316D);
+        } else
+        {
+            boundingBox.setBounds(posX - 6.4000000953674316D, posY - 6.4000000953674316D, posZ - 0.40000000596046448D, posX + 6.4000000953674316D, posY + 6.4000000953674316D, posZ + 0.40000000596046448D);
+        }
+    }
+
+    public float getEyeHeight() {
+        return height / 2.0F;
+    }
+
+    @Override
+    public AxisAlignedBB getCollisionBox(Entity var1) {
+        return var1.getBoundingBox();
+    }
+
+    @Override
+    public AxisAlignedBB getBoundingBox() {
+        return boundingBox;
+    }
+
+    public boolean canBePushed() {
+        return false;
+    }
+
+    public boolean canBeCollidedWith()
+    {
+        return !isDead;
+    }
+
+    @Override
+    public void onUpdate() {
+        super.onUpdate();
+        rotation += 1F;
+        if(rotation > 360F) {
+            rotation -= 360F;
+        }
+        int iCenterI = (int)(posX - 0.5D);
+        int iCenterJ = (int)(posY - 0.5D);
+        int iCenterK = (int)(posZ - 0.5D);
+        if(worldObj.getBlockId(iCenterI, iCenterJ, iCenterK) == 0) {
+            hurt(null,0);
+        }
+        if(!providingPower)
+        {
+            providingPower = true;
+            ((AxleBlock) Block.axle).setPowerLevel(worldObj, iCenterI, iCenterJ, iCenterK, 4);
+        }
+    }
+
+    public boolean hurt(Entity entity, int i)
+    {
+        if(worldObj.remoteWorld || isDead)
+        {
+            return true;
+        } else if(!isDead)
+        {
+            if(providingPower)
+            {
+                int iCenterI = (int)(posX - 0.5D);
+                int iCenterJ = (int)(posY - 0.5D);
+                int iCenterK = (int)(posZ - 0.5D);
+                providingPower = false;
+                ((AxleBlock) Block.axle).setPowerLevel(worldObj, iCenterI, iCenterJ, iCenterK, 0);
+            }
+            dropItemWithOffset(Item.windMill.itemID, 1, 0.0F);
+            setEntityDead();
+        }
+        return true;
+    }
+
+    @Override
+    protected void entityInit() {
+
+    }
+
+    @Override
+    protected void readEntityFromNBT(CompoundTag var1) {
+        this.align = var1.getBoolean("WindMillAlignment");
+        this.rotation = var1.getFloat("WindMillRotation");
+        applyAlignment();
+    }
+
+    @Override
+    protected void writeEntityToNBT(CompoundTag var1) {
+        var1.setBoolean("WindMillAlignment",align);
+        var1.setFloat("WindMillRotation",rotation);
+    }
+}
--- net/minecraft/game/item/recipe/ShapedRecipes.java
+++ /dev/null
@@ -1,82 +1,0 @@
-package net.minecraft.game.item.recipe;
-
-import net.minecraft.game.entity.player.InventoryCrafting;
-import net.minecraft.game.item.ItemStack;
-
-public class ShapedRecipes implements IRecipe {
-	private int width;
-	private int height;
-	private ItemStack[] input;
-	private ItemStack output;
-	public final int outputId;
-
-	public ShapedRecipes(int var1, int var2, ItemStack[] var3, ItemStack var4) {
-		this.outputId = var4.id;
-		this.width = var1;
-		this.height = var2;
-		this.input = var3;
-		this.output = var4;
-	}
-
-	public ItemStack getRecipeOutput() {
-		return this.output;
-	}
-
-	public boolean matches(InventoryCrafting var1) {
-		for(int var2 = 0; var2 <= 3 - this.width; ++var2) {
-			for(int var3 = 0; var3 <= 3 - this.height; ++var3) {
-				if(this.slotsMatch(var1, var2, var3, true)) {
-					return true;
-				}
-
-				if(this.slotsMatch(var1, var2, var3, false)) {
-					return true;
-				}
-			}
-		}
-
-		return false;
-	}
-
-	private boolean slotsMatch(InventoryCrafting var1, int var2, int var3, boolean var4) {
-		for(int var5 = 0; var5 < 3; ++var5) {
-			for(int var6 = 0; var6 < 3; ++var6) {
-				int var7 = var5 - var2;
-				int var8 = var6 - var3;
-				ItemStack var9 = null;
-				if(var7 >= 0 && var8 >= 0 && var7 < this.width && var8 < this.height) {
-					if(var4) {
-						var9 = this.input[this.width - var7 - 1 + var8 * this.width];
-					} else {
-						var9 = this.input[var7 + var8 * this.width];
-					}
-				}
-
-				ItemStack var10 = var1.getCraftingStackInSlot(var5, var6);
-				if(var10 != null || var9 != null) {
-					if(var10 == null && var9 != null || var10 != null && var9 == null) {
-						return false;
-					}
-
-					if(var9.id != var10.id) {
-						return false;
-					}
-
-					if(var9.getItemDamage() != -1 && var9.getItemDamage() != var10.getItemDamage()) {
-						return false;
-					}
-				}
-			}
-		}
-
-		return true;
-	}
-
-	public ItemStack getCraftingResult(InventoryCrafting var1) {
-		return new ItemStack(this.output.id, this.output.count, this.output.getItemDamage());
-	}
-
-	public int getRecipeSize() {
-		return this.width * this.height;
-	}
-}
--- /dev/null
+++ net/minecraft/network/packet/Packet109Craft.java
@@ -1,0 +1,39 @@
+package net.minecraft.network.packet;
+
+import net.minecraft.network.NetHandler;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet109Craft extends Packet {
+    public String name;
+
+    public Packet109Craft() {
+
+    }
+
+    public Packet109Craft(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public void readPacketData(DataInputStream var1) throws IOException {
+        this.name = readString(var1,128);
+    }
+
+    @Override
+    public void writePacketData(DataOutputStream var1) throws IOException {
+        writeString(this.name,var1);
+    }
+
+    @Override
+    public void processPacket(NetHandler var1) {
+        var1.handleCraft(this);
+    }
+
+    @Override
+    public int getPacketSize() {
+        return this.name.length();
+    }
+}
--- net/minecraft/client/render/texture/TextureCompassFX.java
+++ net/minecraft/client/render/texture/TextureCompassFX.java
@@ -20,8 +20,8 @@
 
 		try {
 			BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
-			int var3 = this.iconIndex % 16 * 16;
-			int var4 = this.iconIndex / 16 * 16;
+			int var3 = this.iconIndex % 32 * 16;
+			int var4 = this.iconIndex / 32 * 16;
 			var2.getRGB(var3, var4, 16, 16, this.compassIconImageData, 0, 16);
 		} catch (IOException var5) {
 			var5.printStackTrace();
--- net/minecraft/client/gui/AchievementScreen.java
+++ net/minecraft/client/gui/AchievementScreen.java
@@ -104,7 +104,7 @@
 			this.field_27122_w = 0;
 		}
 
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.func_27109_b(var1, var2, var3);
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
--- /dev/null
+++ net/minecraft/game/world/biome/categories/temperate_forest/NostalgicWoodlands.java
@@ -1,0 +1,24 @@
+package net.minecraft.game.world.biome.categories.temperate_forest;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.terrain.feature.Feature;
+import net.minecraft.game.world.terrain.feature.TreeFeature;
+
+import java.util.Random;
+
+public class NostalgicWoodlands extends Biome {
+    @Override
+    public Feature getRandomTreeFeature(Random rand) {
+        return new TreeFeature();
+    }
+
+    @Override
+    public int getTreeCount(int treeNoise, int treeBonus) {
+        return treeNoise + treeBonus + 2;
+    }
+
+    @Override
+    public int getFlowerCount() {
+        return 3;
+    }
+}
--- net/minecraft/client/player/MovementInputFromOptions.java
+++ net/minecraft/client/player/MovementInputFromOptions.java
@@ -37,6 +37,10 @@
 			var3 = 5;
 		}
 
+		if(var1 == this.gameSettings.keyBindSprint.keyCode) {
+			var3 = 6;
+		}
+
 		if(var3 >= 0) {
 			this.movementKeyStates[var3] = var2;
 		}
@@ -71,6 +75,7 @@
 
 		this.jump = this.movementKeyStates[4];
 		this.sneak = this.movementKeyStates[5];
+		this.sprint = this.movementKeyStates[6];
 		if(this.sneak) {
 			this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
 			this.moveForward = (float)((double)this.moveForward * 0.3D);
--- argo/J_JsonNode.java
+++ argo/J_JsonNode.java
@@ -16,6 +16,22 @@
 		return (String)this.func_27219_a(J_JsonNodeSelectors.func_27349_a(var1), this, var1);
 	}
 
+	public final List<J_JsonNode> getArrayNode(Object... var1) {
+		return (List<J_JsonNode>)this.wrapExceptionsFor(J_JsonNodeSelectors.func_27346_b(var1), this, var1);
+	}
+
+	public final String getStringValue(Object... var1) {
+		return (String)this.wrapExceptionsFor(J_JsonNodeSelectors.func_27349_a(var1), this, var1);
+	}
+
+	private Object wrapExceptionsFor(J_JsonNodeSelector var1, J_JsonNode var2, Object[] var3) {
+		try {
+			return var1.func_27357_b(var2);
+		} catch (J_JsonNodeDoesNotMatchChainedJsonNodeSelectorException var5) {
+			throw J_JsonNodeDoesNotMatchPathElementsException.func_27319_a(var5, var3, J_JsonNodeFactories.func_27315_a(var2));
+		}
+	}
+
 	public final List func_27217_b(Object... var1) {
 		return (List)this.func_27219_a(J_JsonNodeSelectors.func_27346_b(var1), this, var1);
 	}
--- net/minecraft/game/world/chunk/EmptyChunk.java
+++ net/minecraft/game/world/chunk/EmptyChunk.java
@@ -15,7 +15,7 @@
 		this.neverSave = true;
 	}
 
-	public EmptyChunk(World var1, byte[] var2, int var3, int var4) {
+	public EmptyChunk(World var1, short[] var2, int var3, int var4) {
 		super(var1, var2, var3, var4);
 		this.neverSave = true;
 	}
--- net/minecraft/game/item/recipe/RecipeSorter.java
+++ net/minecraft/game/item/recipe/RecipeSorter.java
@@ -10,7 +10,7 @@
 	}
 
 	public int compareRecipes(IRecipe var1, IRecipe var2) {
-		return var1 instanceof ShapelessRecipes && var2 instanceof ShapedRecipes ? 1 : (var2 instanceof ShapelessRecipes && var1 instanceof ShapedRecipes ? -1 : (var2.getRecipeSize() < var1.getRecipeSize() ? -1 : (var2.getRecipeSize() > var1.getRecipeSize() ? 1 : 0)));
+		return 0;
 	}
 
 	public int compare(Object var1, Object var2) {
--- net/minecraft/client/render/entity/RenderItem.java
+++ net/minecraft/client/render/entity/RenderItem.java
@@ -11,6 +11,7 @@
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -48,7 +49,7 @@
 		float var16;
 		float var17;
 		float var18;
-		if(var10.id < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var10.id].getRenderType())) {
+		if(var10.id < SharedConstants.BLOCK_LIMIT && RenderBlocks.renderItemIn3d(Block.blocksList[var10.id].getRenderType())) {
 			GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
 			this.loadTexture("/terrain.png");
 			float var28 = 0.25F;
@@ -73,17 +74,17 @@
 		} else {
 			GL11.glScalef(0.5F, 0.5F, 0.5F);
 			int var14 = var10.getIconIndex();
-			if(var10.id < 256) {
+			if(var10.id < SharedConstants.BLOCK_LIMIT) {
 				this.loadTexture("/terrain.png");
 			} else {
 				this.loadTexture("/gui/items.png");
 			}
 
 			Tessellator var15 = Tessellator.instance;
-			var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
-			var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
-			var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
-			float var19 = (float)(var14 / 16 * 16 + 16) / 256.0F;
+			var16 = (float)(var14 % 32 * 16 + 0) / SharedConstants.ATLAS_SIZE;
+			var17 = (float)(var14 % 32 * 16 + 16) / SharedConstants.ATLAS_SIZE;
+			var18 = (float)(var14 / 32 * 16 + 0) / SharedConstants.ATLAS_SIZE;
+			float var19 = (float)(var14 / 32 * 16 + 16) / SharedConstants.ATLAS_SIZE;
 			float var20 = 1.0F;
 			float var21 = 0.5F;
 			float var22 = 0.25F;
@@ -127,7 +128,7 @@
 
 	public void drawItemIntoGui(FontRenderer var1, TextureRegistry var2, int var3, int var4, int var5, int var6, int var7) {
 		float var11;
-		if(var3 < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3].getRenderType())) {
+		if(var3 < SharedConstants.BLOCK_LIMIT && RenderBlocks.renderItemIn3d(Block.blocksList[var3].getRenderType())) {
 			var2.bindTexture(var2.getTexture("/terrain.png"));
 			Block var14 = Block.blocksList[var3];
 			GL11.glPushMatrix();
@@ -152,7 +153,7 @@
 			GL11.glPopMatrix();
 		} else if(var5 >= 0) {
 			GL11.glDisable(GL11.GL_LIGHTING);
-			if(var3 < 256) {
+			if(var3 < SharedConstants.BLOCK_LIMIT) {
 				var2.bindTexture(var2.getTexture("/terrain.png"));
 			} else {
 				var2.bindTexture(var2.getTexture("/gui/items.png"));
@@ -166,7 +167,7 @@
 				GL11.glColor4f(var9, var10, var11, 1.0F);
 			}
 
-			this.renderTexturedQuad(var6, var7, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
+			this.renderTexturedQuad(var6, var7, var5 % 32 * 16, var5 / 32 * 16, 16, 16, SharedConstants.ATLAS_SIZE, SharedConstants.ATLAS_SIZE);
 			GL11.glEnable(GL11.GL_LIGHTING);
 		}
 
@@ -223,8 +224,21 @@
 
 	public void renderTexturedQuad(int var1, int var2, int var3, int var4, int var5, int var6) {
 		float var7 = 0.0F;
-		float var8 = 0.00390625F;
-		float var9 = 0.00390625F;
+		float var8 = 1 / 256F;
+		float var9 = 1 / 256F;
+		Tessellator var10 = Tessellator.instance;
+		var10.startDrawingQuads();
+		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
+		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + var6) * var9));
+		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + 0) * var9));
+		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + 0) * var9));
+		var10.draw();
+	}
+
+	public void renderTexturedQuad(int var1, int var2, int var3, int var4, int var5, int var6, float width, float height) {
+		float var7 = 0.0F;
+		float var8 = 1 / width;
+		float var9 = 1 / height;
 		Tessellator var10 = Tessellator.instance;
 		var10.startDrawingQuads();
 		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
--- net/minecraft/client/gui/ConflictWarningScreen.java
+++ net/minecraft/client/gui/ConflictWarningScreen.java
@@ -24,7 +24,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, "Level save conflict", this.width / 2, this.height / 4 - 60 + 20, 16777215);
 		this.drawString(this.fontRenderer, "Minecraft detected a conflict in the level save data.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
 		this.drawString(this.fontRenderer, "This could be caused by two copies of the game", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
--- net/minecraft/game/world/block/tileentity/FurnaceTileEntity.java
+++ net/minecraft/game/world/block/tileentity/FurnaceTileEntity.java
@@ -10,6 +10,7 @@
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.block.FurnaceBlock;
 import net.minecraft.game.world.material.Material;
+import net.minecraft.util.SharedConstants;
 
 public class FurnaceTileEntity extends TileEntity implements Inventory {
 	private ItemStack[] furnaceItemStacks = new ItemStack[3];
@@ -94,7 +95,7 @@
 	}
 
 	public int getStackLimit() {
-		return 64;
+		return 100;
 	}
 
 	public int getCookProgressScaled(int var1) {
@@ -161,14 +162,14 @@
 		if(this.furnaceItemStacks[0] == null) {
 			return false;
 		} else {
-			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID);
+			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID,this.furnaceItemStacks[0].getItemDamage());
 			return var1 == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(var1) ? false : (this.furnaceItemStacks[2].count < this.getStackLimit() && this.furnaceItemStacks[2].count < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].count < var1.getMaxStackSize())));
 		}
 	}
 
 	public void smeltItem() {
 		if(this.canSmelt()) {
-			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID);
+			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID,this.furnaceItemStacks[0].getItemDamage());
 			if(this.furnaceItemStacks[2] == null) {
 				this.furnaceItemStacks[2] = var1.copy();
 			} else if(this.furnaceItemStacks[2].id == var1.id) {
@@ -188,7 +189,7 @@
 			return 0;
 		} else {
 			int var2 = var1.getItem().itemID;
-			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300 : (var2 == Item.stick.itemID ? 100 : (var2 == Item.coal.itemID ? 1600 : (var2 == Item.lavaBucket.itemID ? 20000 : (var2 == Block.sapling.blockID ? 100 : 0))));
+			return var2 < SharedConstants.BLOCK_LIMIT && Block.blocksList[var2].material == Material.wood ? 300 : (var2 == Item.stick.itemID ? 100 : (var2 == Item.coal.itemID ? 1600 : (var2 == Item.lavaBucket.itemID ? 20000 : (var2 == Block.sapling.blockID ? 100 : 0))));
 		}
 	}
 
--- net/minecraft/game/item/recipe/ShapelessRecipes.java
+++ /dev/null
@@ -1,58 +1,0 @@
-package net.minecraft.game.item.recipe;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import net.minecraft.game.entity.player.InventoryCrafting;
-import net.minecraft.game.item.ItemStack;
-
-public class ShapelessRecipes implements IRecipe {
-	private final ItemStack output;
-	private final List input;
-
-	public ShapelessRecipes(ItemStack var1, List var2) {
-		this.output = var1;
-		this.input = var2;
-	}
-
-	public ItemStack getRecipeOutput() {
-		return this.output;
-	}
-
-	public boolean matches(InventoryCrafting var1) {
-		ArrayList var2 = new ArrayList(this.input);
-
-		for(int var3 = 0; var3 < 3; ++var3) {
-			for(int var4 = 0; var4 < 3; ++var4) {
-				ItemStack var5 = var1.getCraftingStackInSlot(var4, var3);
-				if(var5 != null) {
-					boolean var6 = false;
-					Iterator var7 = var2.iterator();
-
-					while(var7.hasNext()) {
-						ItemStack var8 = (ItemStack)var7.next();
-						if(var5.id == var8.id && (var8.getItemDamage() == -1 || var5.getItemDamage() == var8.getItemDamage())) {
-							var6 = true;
-							var2.remove(var8);
-							break;
-						}
-					}
-
-					if(!var6) {
-						return false;
-					}
-				}
-			}
-		}
-
-		return var2.isEmpty();
-	}
-
-	public ItemStack getCraftingResult(InventoryCrafting var1) {
-		return this.output.copy();
-	}
-
-	public int getRecipeSize() {
-		return this.input.size();
-	}
-}
--- /dev/null
+++ net/minecraft/game/item/mechanical/WindMillItem.java
@@ -1,0 +1,25 @@
+package net.minecraft.game.item.mechanical;
+
+import net.minecraft.game.entity.mechanical.WindMillEntity;
+import net.minecraft.game.entity.player.PlayerEntity;
+import net.minecraft.game.item.Item;
+import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.world.World;
+import net.minecraft.game.world.block.Block;
+
+public class WindMillItem extends Item {
+    public WindMillItem(int var1) {
+        super(var1);
+    }
+
+    @Override
+    public boolean onItemUse(ItemStack var1, PlayerEntity var2, World var3, int var4, int var5, int var6, int var7) {
+        int id = var3.getBlockId(var4, var5, var6);
+        int metadata = var3.getBlockMetadata(var4,var5,var6);
+        if(id == Block.axle.blockID && !var3.remoteWorld) {
+            var3.entityJoinedWorld(new WindMillEntity(var3, (float)var4 + 0.5F, (float)var5 + 0.5F, (float)var6 + 0.5, (metadata & 3) == 2));
+            var1.count--;
+        }
+        return false;
+    }
+}
--- net/minecraft/client/gui/MultiplayerScreen.java
+++ net/minecraft/client/gui/MultiplayerScreen.java
@@ -15,6 +15,7 @@
 
 	public void updateScreen() {
 		this.field_22111_h.updateCursorCounter();
+		super.updateScreen();
 	}
 
 	public void initGui() {
@@ -90,12 +91,12 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
+		drawDefaultBackground(var3);
 		StringTranslate var4 = StringTranslate.getInstance();
-		this.drawDefaultBackground();
 		this.drawCenteredString(this.fontRenderer, var4.translateKey("multiplayer.title"), this.width / 2, this.height / 4 - 60 + 20, 16777215);
-		this.drawString(this.fontRenderer, var4.translateKey("multiplayer.info1"), this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
-		this.drawString(this.fontRenderer, var4.translateKey("multiplayer.info2"), this.width / 2 - 140, this.height / 4 - 60 + 60 + 9, 10526880);
-		this.drawString(this.fontRenderer, var4.translateKey("multiplayer.ipinfo"), this.width / 2 - 140, this.height / 4 - 60 + 60 + 36, 10526880);
+		this.drawCenteredString(this.fontRenderer, var4.translateKey("multiplayer.info1"), this.width / 2, this.height / 4 - 60 + 60 + 0, 16777215);
+		this.drawCenteredString(this.fontRenderer, var4.translateKey("multiplayer.info2"), this.width / 2, this.height / 4 - 60 + 60 + 9, 16777215);
+		this.drawCenteredString(this.fontRenderer, var4.translateKey("multiplayer.ipinfo"), this.width / 2, this.height / 4 - 60 + 60 + 36, 16777215);
 		this.field_22111_h.drawTextBox();
 		super.drawScreen(var1, var2, var3);
 	}
--- net/minecraft/game/entity/monster/GhastEntity.java
+++ net/minecraft/game/entity/monster/GhastEntity.java
@@ -24,6 +24,7 @@
 		this.texture = "/mob/ghast.png";
 		this.setSize(4.0F, 4.0F);
 		this.isImmuneToFire = true;
+		this.scoreValue = 30;
 	}
 
 	protected void entityInit() {
--- net/minecraft/client/gui/ControlsScreen.java
+++ net/minecraft/client/gui/ControlsScreen.java
@@ -58,7 +58,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
 		int var4 = this.func_20080_j();
 
--- net/minecraft/game/entity/misc/ItemEntity.java
+++ net/minecraft/game/entity/misc/ItemEntity.java
@@ -61,6 +61,9 @@
 			this.worldObj.playSoundAtEntity(this, "random.fizz", 0.4F, 2.0F + this.rand.nextFloat() * 0.4F);
 		}
 
+		double prevMotionX = this.motionX;
+		double prevMotionY = this.motionY;
+		double prevMotionZ = this.motionZ;
 		this.pushOutOfBlocks(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
 		float var1 = 0.98F;
@@ -75,8 +78,14 @@
 		this.motionX *= (double)var1;
 		this.motionY *= (double)0.98F;
 		this.motionZ *= (double)var1;
-		if(this.onGround) {
-			this.motionY *= -0.5D;
+		if(this.isCollidedVertically && Math.abs(prevMotionY) > 0.04D) {
+			this.motionY = prevMotionY * -0.5F;
+		}
+		if(this.isCollidedX) {
+			this.motionX = prevMotionX * -0.5F;
+		}
+		if(this.isCollidedZ) {
+			this.motionZ = prevMotionZ * -0.5F;
 		}
 
 		++this.itemAge;
--- net/minecraft/client/ThreadDownloadResources.java
+++ net/minecraft/client/ThreadDownloadResources.java
@@ -1,11 +1,11 @@
 package net.minecraft.client;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.*;
 import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
+import javax.swing.*;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import org.w3c.dom.Document;
@@ -17,6 +17,11 @@
 	public File resourcesFolder;
 	private Minecraft mc;
 	private boolean closing = false;
+	public static boolean titleMusicReady = false;
+	private static final String MC_RESOURCE_URL = "https://resources.download.minecraft.net/";
+
+	public static int progress = 0;
+	public static int progressMax = 0;
 
 	public ThreadDownloadResources(File var1, Minecraft var2) {
 		this.mc = var2;
@@ -30,13 +35,15 @@
 
 	public void run() {
 		try {
-			URL var1 = new URL("http://s3.amazonaws.com/MinecraftResources/");
+			URL var1 = new URL("http://betacraft.uk:11705/MinecraftResources/");
 			DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance();
 			DocumentBuilder var3 = var2.newDocumentBuilder();
 			Document var4 = var3.parse(var1.openStream());
 			NodeList var5 = var4.getElementsByTagName("Contents");
 
 			for(int var6 = 0; var6 < 2; ++var6) {
+				progress = 0;
+				progressMax = var5.getLength();
 				for(int var7 = 0; var7 < var5.getLength(); ++var7) {
 					Node var8 = var5.item(var7);
 					if(var8.getNodeType() == 1) {
@@ -50,8 +57,38 @@
 							}
 						}
 					}
+					progress++;
 				}
 			}
+			progress = -1;
+			progressMax = 0;
+
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "3f/3fe4c878450d4dc2bf3ac304e547f20d4efabad8"), "talon_creative/biomefest.ogg", 4271435, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "59/591f41a2c5f53bcc60d7ded982fe29e76223a8ca"), "talon_creative/blindspots.ogg", 3704574, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "4f/4f8c3f9b4f290f63c78bf3bbaad16906a3ccff29"), "talon_creative/hauntmuskie.ogg", 3834148, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "46/4664de25eb2bfc88ebbd638cfae6934dd968ceaa"), "talon_creative/ariamath.ogg", 3668042, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "45/45cb6cbbff2d7fc1daefbd85b031fd9dcfc70e7b"), "talon_creative/dreiton.ogg", 5532231, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "62/6254527d626a2c7d80901cc2e62dce3ba4bd81f6"), "talon_creative/taswell.ogg", 5468843, 2);
+
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain1.ogg"),"sound/ambient/weather/quiet_rain1.ogg",291497,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain2.ogg"),"sound/ambient/weather/quiet_rain2.ogg",290830,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain3.ogg"),"sound/ambient/weather/quiet_rain3.ogg",270612,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain4.ogg"),"sound/ambient/weather/quiet_rain4.ogg",268775,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain5.ogg"),"sound/ambient/weather/quiet_rain5.ogg",275679,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain6.ogg"),"sound/ambient/weather/quiet_rain6.ogg",283448,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain7.ogg"),"sound/ambient/weather/quiet_rain7.ogg",279191,0);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/sound/ambient/weather/rain8.ogg"),"sound/ambient/weather/quiet_rain8.ogg",275569,0);
+
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "c1/c157c56846f0e50620f808fecd9d069423dd6c41"), "talon_title/mutation.ogg", 1744657, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "78/783ddccf4681a0c50d3e651f4e6ac27a0f4ea76f"), "talon_title/moogcity2.ogg", 1809290, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "87/87722a59c8d488370f3d430cd4c97a3161081785"), "talon_title/beginning2.ogg", 1724614, 2);
+			this.downloadAndInstallResourceTalon(new URL(MC_RESOURCE_URL + "15/15f38314274e759c44f50ac641d11bde12474a25"), "talon_title/floatingtrees.ogg", 2017245, 2);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/music/intro.ogg"),"talon_title/intro.ogg",3724582,2);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/music/equinoxe.ogg"),"talon_title/equinoxe.ogg",1506686,2);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/music/ki.ogg"),"talon_title/ki.ogg",1185541,2);
+			downloadAndInstallResourceTalon(new URL("https://raw.githubusercontent.com/TalonFloof/OrderOfTheTalon/main/assets/music/door.ogg"),"talon_title/door.ogg",1408957,2);
+			titleMusicReady = true;
+			progress = 0;
 		} catch (Exception var13) {
 			this.loadResource(this.resourcesFolder, "");
 			var13.printStackTrace();
@@ -85,7 +122,7 @@
 			int var6 = var2.indexOf("/");
 			String var7 = var2.substring(0, var6);
 			if(!var7.equals("sound") && !var7.equals("newsound")) {
-				if(var5 != 1) {
+				if(var5 != 1 && var5 != 2) {
 					return;
 				}
 			} else if(var5 != 0) {
@@ -97,6 +134,34 @@
 				var8.getParentFile().mkdirs();
 				String var9 = var2.replaceAll(" ", "%20");
 				this.downloadResource(new URL(var1, var9), var8, var3);
+				if(this.closing) {
+					return;
+				}
+			}
+
+			this.mc.installResource(var2, var8);
+		} catch (Exception var10) {
+			var10.printStackTrace();
+		}
+
+	}
+
+	private void downloadAndInstallResourceTalon(URL var1, String var2, long var3, int var5) {
+		try {
+			int var6 = var2.indexOf("/");
+			String var7 = var2.substring(0, var6);
+			if(!var7.equals("sound") && !var7.equals("newsound")) {
+				if(var5 != 1 && var5 != 2) {
+					return;
+				}
+			} else if(var5 != 0) {
+				return;
+			}
+
+			File var8 = new File(this.resourcesFolder, var2);
+			if(!var8.exists() || var8.length() != var3) {
+				var8.getParentFile().mkdirs();
+				this.downloadResource(var1, var8, var3);
 				if(this.closing) {
 					return;
 				}
--- com/mojang/nbt/CompoundTag.java
+++ com/mojang/nbt/CompoundTag.java
@@ -79,6 +79,14 @@
 		this.tagMap.put(var1, (new ByteArrayTag(var2)).setKey(var1));
 	}
 
+	public void setShortArray(String var1, short[] var2) {
+		this.tagMap.put(var1, (new ShortArrayTag(var2)).setKey(var1));
+	}
+
+	public void setIntArray(String var1, int[] var2) {
+		this.tagMap.put(var1, (new IntArrayTag(var2)).setKey(var1));
+	}
+
 	public void setCompoundTag(String var1, CompoundTag var2) {
 		this.tagMap.put(var1, var2.setKey(var1));
 	}
@@ -121,6 +129,14 @@
 
 	public byte[] getByteArray(String var1) {
 		return !this.tagMap.containsKey(var1) ? new byte[0] : ((ByteArrayTag)this.tagMap.get(var1)).byteArray;
+	}
+
+	public short[] getShortArray(String var1) {
+		return !this.tagMap.containsKey(var1) ? new short[0] : ((ShortArrayTag)this.tagMap.get(var1)).shortArray;
+	}
+
+	public int[] getIntArray(String var1) {
+		return !this.tagMap.containsKey(var1) ? new int[0] : ((IntArrayTag)this.tagMap.get(var1)).intArray;
 	}
 
 	public CompoundTag getCompoundTag(String var1) {
--- net/minecraft/game/world/chunk/ChunkProviderClient.java
+++ net/minecraft/game/world/chunk/ChunkProviderClient.java
@@ -7,6 +7,7 @@
 import java.util.Map;
 import net.minecraft.game.world.World;
 import net.minecraft.util.ProgressUpdate;
+import net.minecraft.util.SharedConstants;
 
 public class ChunkProviderClient implements ChunkProvider {
 	private Chunk blankChunk;
@@ -15,7 +16,7 @@
 	private World worldObj;
 
 	public ChunkProviderClient(World var1) {
-		this.blankChunk = new EmptyChunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+		this.blankChunk = new EmptyChunk(var1, new short[16 * 16 * SharedConstants.CHUNK_HEIGHT], 0, 0);
 		this.worldObj = var1;
 	}
 
@@ -40,7 +41,7 @@
 
 	public Chunk prepareChunk(int var1, int var2) {
 		ChunkCoordIntPair var3 = new ChunkCoordIntPair(var1, var2);
-		byte[] var4 = new byte[-Short.MIN_VALUE];
+		short[] var4 = new short[16 * 16 * SharedConstants.CHUNK_HEIGHT];
 		Chunk var5 = new Chunk(this.worldObj, var4, var1, var2);
 		Arrays.fill(var5.skylightMap.data, (byte)-1);
 		this.chunkMapping.put(var3, var5);
--- net/minecraft/client/gui/component/GuiButton.java
+++ net/minecraft/client/gui/component/GuiButton.java
@@ -6,8 +6,8 @@
 import org.lwjgl.opengl.GL11;
 
 public class GuiButton extends Gui {
-	protected int width;
-	protected int height;
+	public int width;
+	public int height;
 	public int xPosition;
 	public int yPosition;
 	public String displayString;
--- /dev/null
+++ com/mojang/nbt/IntArrayTag.java
@@ -1,0 +1,50 @@
+package com.mojang.nbt;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.util.Arrays;
+
+public class IntArrayTag extends NBTBaseTag {
+    public int[] intArray;
+
+    public IntArrayTag() {
+    }
+
+    public IntArrayTag(int[] var1) {
+        this.intArray = var1;
+    }
+
+    protected void writeTagContents(DataOutput var1) throws IOException {
+        var1.writeInt(this.intArray.length);
+        ByteBuffer buffer = ByteBuffer.allocate(this.intArray.length * 4);
+        buffer.order(ByteOrder.BIG_ENDIAN);
+        buffer.asIntBuffer().put(this.intArray);
+        byte[] bytes = buffer.array();
+        var1.write(bytes);
+    }
+
+    protected void readTagContents(DataInput var1) throws IOException {
+        int var2 = var1.readInt();
+        this.intArray = new int[var2];
+        byte[] byteArray = new byte[var2 * 4];
+        var1.readFully(byteArray);
+        ByteBuffer buffer = ByteBuffer.wrap(byteArray);
+        buffer.order(ByteOrder.BIG_ENDIAN);
+        buffer.asIntBuffer().get(this.intArray);
+    }
+
+    public byte getType() {
+        return (byte)11;
+    }
+
+    public String toString() {
+        return "[" + this.intArray.length + " ints]";
+    }
+
+    public NBTBaseTag copy() {
+        return new IntArrayTag(Arrays.copyOf(this.intArray, this.intArray.length)).setKey(this.getKey());
+    }
+}
--- net/minecraft/game/world/block/DispenserBlock.java
+++ net/minecraft/game/world/block/DispenserBlock.java
@@ -16,12 +16,14 @@
 import net.minecraft.game.world.material.Material;
 import net.minecraft.util.MathHelper;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class DispenserBlock extends ContainerBlock {
 	private Random random = new Random();
 
 	protected DispenserBlock(int var1) {
 		super(var1, Material.stone);
-		this.textureIndex = 45;
+		this.textureIndex = getAtlasTexture(30,1);
 	}
 
 	public int tickRate() {
@@ -66,9 +68,9 @@
 
 	public int getBlockTexture(BlockAccess var1, int var2, int var3, int var4, int var5) {
 		if(var5 == 1) {
-			return this.textureIndex + 17;
+			return this.textureIndex + 33;
 		} else if(var5 == 0) {
-			return this.textureIndex + 17;
+			return this.textureIndex + 33;
 		} else {
 			int var6 = var1.getBlockMetadata(var2, var3, var4);
 			return var5 != var6 ? this.textureIndex : this.textureIndex + 1;
@@ -76,7 +78,7 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.textureIndex + 17 : (var1 == 0 ? this.textureIndex + 17 : (var1 == 3 ? this.textureIndex + 1 : this.textureIndex));
+		return var1 == 1 ? this.textureIndex + 33 : (var1 == 0 ? this.textureIndex + 33 : (var1 == 3 ? this.textureIndex + 1 : this.textureIndex));
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, PlayerEntity var5) {
--- net/minecraft/client/gui/MainMenuScreen.java
+++ net/minecraft/client/gui/MainMenuScreen.java
@@ -7,15 +7,18 @@
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
+
+import net.minecraft.client.ThreadDownloadResources;
 import net.minecraft.client.gui.component.GuiButton;
 import net.minecraft.client.render.Tessellator;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.StringTranslate;
 import org.lwjgl.opengl.GL11;
 
 public class MainMenuScreen extends GuiScreen {
 	private static final Random rand = new Random();
-	private float updateCounter = 0.0F;
+	public float updateCounter = 0.0F;
 	private String splashText = "missingno";
 	private GuiButton multiplayerButton;
 
@@ -39,11 +42,11 @@
 			}
 		} catch (Exception var4) {
 		}
-
 	}
 
 	public void updateScreen() {
 		++this.updateCounter;
+		super.updateScreen();
 	}
 
 	protected void keyTyped(char var1, int var2) {
@@ -52,12 +55,14 @@
 	public void initGui() {
 		Calendar var1 = Calendar.getInstance();
 		var1.setTime(new Date());
-		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
+		/*if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
 			this.splashText = "Happy birthday, ez!";
 		} else if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
 			this.splashText = "Happy birthday, Notch!";
+		} else */if(var1.get(2) + 1 == 5 && var1.get(5) == 29) {
+			this.splashText = "Happy birthday, Talon!";
 		} else if(var1.get(2) + 1 == 12 && var1.get(5) == 24) {
-			this.splashText = "Merry X-mas!";
+			this.splashText = "Merry Christmas!";
 		} else if(var1.get(2) + 1 == 1 && var1.get(5) == 1) {
 			this.splashText = "Happy new year!";
 		}
@@ -67,17 +72,16 @@
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.translateKey("menu.singleplayer")));
 		this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 24, var2.translateKey("menu.multiplayer")));
 		this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48, var2.translateKey("menu.mods")));
-		if(this.mc.hideQuitButton) {
+		/*if(this.mc.hideQuitButton) {
 			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72, var2.translateKey("menu.options")));
-		} else {
+		} else {*/
 			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72 + 12, 98, 20, var2.translateKey("menu.options")));
 			this.controlList.add(new GuiButton(4, this.width / 2 + 2, var4 + 72 + 12, 98, 20, var2.translateKey("menu.quit")));
-		}
+		//}
 
 		if(this.mc.session == null) {
 			this.multiplayerButton.enabled = false;
 		}
-
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -103,16 +107,26 @@
 
 	}
 
+	@Override
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+		if(var1 < this.fontRenderer.getStringWidth(SharedConstants.VERSION) && var2 >= this.height - 10) {
+			this.mc.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
+			this.mc.displayGuiScreen(new CreditsScreen(this));
+		}
+	}
+
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.mc.sndManager.playMenuMusic();
+		this.drawDefaultBackground(var3);
 		Tessellator var4 = Tessellator.instance;
 		short var5 = 274;
 		int var6 = this.width / 2 - var5 / 2;
 		byte var7 = 30;
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/title/mclogo.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.drawTexturedRect(var6 + 0, var7 + 0, 0, 0, 155, 44);
-		this.drawTexturedRect(var6 + 155, var7 + 0, 0, 45, 155, 44);
+		this.drawTexturedRect(var6 + 0, var7 + 0, 0, 0, 155, 51);
+		this.drawTexturedRect(var6 + 154, var7 + 0, 0, 55, 155, 51);
 		var4.setColorOpaque_I(16777215);
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
@@ -122,9 +136,14 @@
 		GL11.glScalef(var8, var8, var8);
 		this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		this.drawString(this.fontRenderer, "Minecraft Beta 1.7.3", 2, 2, 5263440);
+		this.drawString(this.fontRenderer, SharedConstants.VERSION, 2, this.height - 10, 16777215);
 		String var9 = "Copyright Mojang AB. Do not distribute.";
 		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 10, 16777215);
+		if(ThreadDownloadResources.progressMax > 0) {
+			this.drawCenteredString(this.fontRenderer,"Downloading Minecraft Sounds "+ThreadDownloadResources.progress+"/"+ThreadDownloadResources.progressMax+"...", this.width / 2, 8, 16777215);
+		} else if(ThreadDownloadResources.progress == -1) {
+			this.drawCenteredString(this.fontRenderer,"Downloading Order of the Talon Sounds...", this.width / 2, 8, 16777215);
+		}
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- net/minecraft/game/world/chunk/ChunkCache.java
+++ net/minecraft/game/world/chunk/ChunkCache.java
@@ -2,10 +2,11 @@
 
 import net.minecraft.game.world.BlockAccess;
 import net.minecraft.game.world.World;
-import net.minecraft.game.world.biome.ClimaticBiomeSource;
+import net.minecraft.game.world.biome.ClimaticVoronoiBiomeSource;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.game.world.material.Material;
+import net.minecraft.util.SharedConstants;
 
 public class ChunkCache implements BlockAccess {
 	private int chunkX;
@@ -32,7 +33,7 @@
 	public int getBlockId(int var1, int var2, int var3) {
 		if(var2 < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 			return 0;
 		} else {
 			int var4 = (var1 >> 4) - this.chunkX;
@@ -103,7 +104,7 @@
 
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 				var5 = 15 - this.worldObj.skylightSubtracted;
 				if(var5 < 0) {
 					var5 = 0;
@@ -123,7 +124,7 @@
 	public int getBlockMetadata(int var1, int var2, int var3) {
 		if(var2 < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(var2 >= SharedConstants.CHUNK_HEIGHT) {
 			return 0;
 		} else {
 			int var4 = (var1 >> 4) - this.chunkX;
@@ -137,7 +138,7 @@
 		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
 	}
 
-	public ClimaticBiomeSource getBiomeSource() {
+	public ClimaticVoronoiBiomeSource getBiomeSource() {
 		return this.worldObj.getBiomeSource();
 	}
 
--- net/minecraft/game/item/Item.java
+++ net/minecraft/game/item/Item.java
@@ -4,6 +4,7 @@
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.LivingEntity;
 import net.minecraft.game.entity.player.PlayerEntity;
+import net.minecraft.game.item.mechanical.WindMillItem;
 import net.minecraft.game.stats.StatCollector;
 import net.minecraft.game.stats.StatList;
 import net.minecraft.game.world.World;
@@ -12,115 +13,121 @@
 
 public class Item {
 	protected static Random random = new Random();
-	public static Item[] itemsList = new Item[32000];
-	public static Item ironShovel = (new ShovelItem(0, ToolMaterial.IRON)).setTextureCoord(2, 5).setName("shovelIron");
-	public static Item ironPickaxe = (new PickaxeItem(1, ToolMaterial.IRON)).setTextureCoord(2, 6).setName("pickaxeIron");
-	public static Item ironAxe = (new AxeItem(2, ToolMaterial.IRON)).setTextureCoord(2, 7).setName("hatchetIron");
-	public static Item flintAndSteel = (new FlintAndSteelItem(3)).setTextureCoord(5, 0).setName("flintAndSteel");
-	public static Item apple = (new FoodItem(4, 4, false)).setTextureCoord(10, 0).setName("apple");
-	public static Item bow = (new BowItem(5)).setTextureCoord(5, 1).setName("bow");
-	public static Item arrow = (new Item(6)).setTextureCoord(5, 2).setName("arrow");
-	public static Item coal = (new CoalItem(7)).setTextureCoord(7, 0).setName("coal");
-	public static Item diamond = (new Item(8)).setTextureCoord(7, 3).setName("emerald");
-	public static Item ironIngot = (new Item(9)).setTextureCoord(7, 1).setName("ingotIron");
-	public static Item goldIngot = (new Item(10)).setTextureCoord(7, 2).setName("ingotGold");
-	public static Item ironSword = (new SwordItem(11, ToolMaterial.IRON)).setTextureCoord(2, 4).setName("swordIron");
-	public static Item woodSword = (new SwordItem(12, ToolMaterial.WOOD)).setTextureCoord(0, 4).setName("swordWood");
-	public static Item woodShovel = (new ShovelItem(13, ToolMaterial.WOOD)).setTextureCoord(0, 5).setName("shovelWood");
-	public static Item woodPickaxe = (new PickaxeItem(14, ToolMaterial.WOOD)).setTextureCoord(0, 6).setName("pickaxeWood");
-	public static Item woodAxe = (new AxeItem(15, ToolMaterial.WOOD)).setTextureCoord(0, 7).setName("hatchetWood");
-	public static Item stoneSword = (new SwordItem(16, ToolMaterial.STONE)).setTextureCoord(1, 4).setName("swordStone");
-	public static Item stoneShovel = (new ShovelItem(17, ToolMaterial.STONE)).setTextureCoord(1, 5).setName("shovelStone");
-	public static Item stonePickaxe = (new PickaxeItem(18, ToolMaterial.STONE)).setTextureCoord(1, 6).setName("pickaxeStone");
-	public static Item stoneAxe = (new AxeItem(19, ToolMaterial.STONE)).setTextureCoord(1, 7).setName("hatchetStone");
-	public static Item diamondSword = (new SwordItem(20, ToolMaterial.DIAMOND)).setTextureCoord(3, 4).setName("swordDiamond");
-	public static Item diamondShovel = (new ShovelItem(21, ToolMaterial.DIAMOND)).setTextureCoord(3, 5).setName("shovelDiamond");
-	public static Item diamondPickaxe = (new PickaxeItem(22, ToolMaterial.DIAMOND)).setTextureCoord(3, 6).setName("pickaxeDiamond");
-	public static Item diamondAxe = (new AxeItem(23, ToolMaterial.DIAMOND)).setTextureCoord(3, 7).setName("hatchetDiamond");
-	public static Item stick = (new Item(24)).setTextureCoord(5, 3).setToolGrip().setName("stick");
-	public static Item bowlEmpty = (new Item(25)).setTextureCoord(7, 4).setName("bowl");
-	public static Item bowlSoup = (new SoupItem(26, 10)).setTextureCoord(8, 4).setName("mushroomStew");
-	public static Item goldSword = (new SwordItem(27, ToolMaterial.GOLD)).setTextureCoord(4, 4).setName("swordGold");
-	public static Item goldShovel = (new ShovelItem(28, ToolMaterial.GOLD)).setTextureCoord(4, 5).setName("shovelGold");
-	public static Item goldPickaxe = (new PickaxeItem(29, ToolMaterial.GOLD)).setTextureCoord(4, 6).setName("pickaxeGold");
-	public static Item goldAxe = (new AxeItem(30, ToolMaterial.GOLD)).setTextureCoord(4, 7).setName("hatchetGold");
-	public static Item string = (new Item(31)).setTextureCoord(8, 0).setName("string");
-	public static Item feather = (new Item(32)).setTextureCoord(8, 1).setName("feather");
-	public static Item gunpowder = (new Item(33)).setTextureCoord(8, 2).setName("sulphur");
-	public static Item woodHoe = (new HoeItem(34, ToolMaterial.WOOD)).setTextureCoord(0, 8).setName("hoeWood");
-	public static Item stoneHoe = (new HoeItem(35, ToolMaterial.STONE)).setTextureCoord(1, 8).setName("hoeStone");
-	public static Item ironHoe = (new HoeItem(36, ToolMaterial.IRON)).setTextureCoord(2, 8).setName("hoeIron");
-	public static Item diamondHoe = (new HoeItem(37, ToolMaterial.DIAMOND)).setTextureCoord(3, 8).setName("hoeDiamond");
-	public static Item goldHoe = (new HoeItem(38, ToolMaterial.GOLD)).setTextureCoord(4, 8).setName("hoeGold");
-	public static Item seeds = (new SeedsItem(39, Block.crops.blockID)).setTextureCoord(9, 0).setName("seeds");
-	public static Item wheat = (new Item(40)).setTextureCoord(9, 1).setName("wheat");
-	public static Item bread = (new FoodItem(41, 5, false)).setTextureCoord(9, 2).setName("bread");
-	public static Item leatherCap = (new ArmorItem(42, 0, 0, 0)).setTextureCoord(0, 0).setName("helmetCloth");
-	public static Item leatherTunic = (new ArmorItem(43, 0, 0, 1)).setTextureCoord(0, 1).setName("chestplateCloth");
-	public static Item leatherPants = (new ArmorItem(44, 0, 0, 2)).setTextureCoord(0, 2).setName("leggingsCloth");
-	public static Item leatherBoots = (new ArmorItem(45, 0, 0, 3)).setTextureCoord(0, 3).setName("bootsCloth");
-	public static Item chainmailHelmet = (new ArmorItem(46, 1, 1, 0)).setTextureCoord(1, 0).setName("helmetChain");
-	public static Item chainmailChestplate = (new ArmorItem(47, 1, 1, 1)).setTextureCoord(1, 1).setName("chestplateChain");
-	public static Item chainmailLeggings = (new ArmorItem(48, 1, 1, 2)).setTextureCoord(1, 2).setName("leggingsChain");
-	public static Item chainmailBoots = (new ArmorItem(49, 1, 1, 3)).setTextureCoord(1, 3).setName("bootsChain");
-	public static Item ironHelmet = (new ArmorItem(50, 2, 2, 0)).setTextureCoord(2, 0).setName("helmetIron");
-	public static Item ironChestplate = (new ArmorItem(51, 2, 2, 1)).setTextureCoord(2, 1).setName("chestplateIron");
-	public static Item ironLeggings = (new ArmorItem(52, 2, 2, 2)).setTextureCoord(2, 2).setName("leggingsIron");
-	public static Item ironBoots = (new ArmorItem(53, 2, 2, 3)).setTextureCoord(2, 3).setName("bootsIron");
-	public static Item diamondHelmet = (new ArmorItem(54, 3, 3, 0)).setTextureCoord(3, 0).setName("helmetDiamond");
-	public static Item diamondChestplate = (new ArmorItem(55, 3, 3, 1)).setTextureCoord(3, 1).setName("chestplateDiamond");
-	public static Item diamondLeggings = (new ArmorItem(56, 3, 3, 2)).setTextureCoord(3, 2).setName("leggingsDiamond");
-	public static Item diamondBoots = (new ArmorItem(57, 3, 3, 3)).setTextureCoord(3, 3).setName("bootsDiamond");
-	public static Item goldHelmet = (new ArmorItem(58, 1, 4, 0)).setTextureCoord(4, 0).setName("helmetGold");
-	public static Item goldChestplate = (new ArmorItem(59, 1, 4, 1)).setTextureCoord(4, 1).setName("chestplateGold");
-	public static Item goldLeggings = (new ArmorItem(60, 1, 4, 2)).setTextureCoord(4, 2).setName("leggingsGold");
-	public static Item goldBoots = (new ArmorItem(61, 1, 4, 3)).setTextureCoord(4, 3).setName("bootsGold");
-	public static Item flint = (new Item(62)).setTextureCoord(6, 0).setName("flint");
-	public static Item rawPorkchop = (new FoodItem(63, 3, true)).setTextureCoord(7, 5).setName("porkchopRaw");
-	public static Item cookedPorkchop = (new FoodItem(64, 8, true)).setTextureCoord(8, 5).setName("porkchopCooked");
-	public static Item painting = (new PaintingItem(65)).setTextureCoord(10, 1).setName("painting");
-	public static Item goldenApple = (new FoodItem(66, 42, false)).setTextureCoord(11, 0).setName("appleGold");
-	public static Item sign = (new SignItem(67)).setTextureCoord(10, 2).setName("sign");
-	public static Item door = (new DoorItem(68, Material.wood)).setTextureCoord(11, 2).setName("doorWood");
-	public static Item emptyBucket = (new BucketItem(69, 0)).setTextureCoord(10, 4).setName("bucket");
-	public static Item waterBucket = (new BucketItem(70, Block.flowingWater.blockID)).setTextureCoord(11, 4).setName("bucketWater").setCraftingResult(emptyBucket);
-	public static Item lavaBucket = (new BucketItem(71, Block.flowingLava.blockID)).setTextureCoord(12, 4).setName("bucketLava").setCraftingResult(emptyBucket);
-	public static Item minecart = (new MinecartItem(72, 0)).setTextureCoord(7, 8).setName("minecart");
-	public static Item saddle = (new SaddleItem(73)).setTextureCoord(8, 6).setName("saddle");
-	public static Item ironDoor = (new DoorItem(74, Material.iron)).setTextureCoord(12, 2).setName("doorIron");
-	public static Item redstone = (new RedstoneItem(75)).setTextureCoord(8, 3).setName("redstone");
-	public static Item snowball = (new SnowballItem(76)).setTextureCoord(14, 0).setName("snowball");
-	public static Item boat = (new BoatItem(77)).setTextureCoord(8, 8).setName("boat");
-	public static Item leather = (new Item(78)).setTextureCoord(7, 6).setName("leather");
-	public static Item milkBucket = (new BucketItem(79, -1)).setTextureCoord(13, 4).setName("milk").setCraftingResult(emptyBucket);
-	public static Item brick = (new Item(80)).setTextureCoord(6, 1).setName("brick");
-	public static Item clay = (new Item(81)).setTextureCoord(9, 3).setName("clay");
-	public static Item sugarCane = (new AltBlockItem(82, Block.reed)).setTextureCoord(11, 1).setName("reeds");
-	public static Item paper = (new Item(83)).setTextureCoord(10, 3).setName("paper");
-	public static Item book = (new Item(84)).setTextureCoord(11, 3).setName("book");
-	public static Item slimeBall = (new Item(85)).setTextureCoord(14, 1).setName("slimeball");
-	public static Item minecartWithChest = (new MinecartItem(86, 1)).setTextureCoord(7, 9).setName("minecartChest");
-	public static Item minecartWithFurnace = (new MinecartItem(87, 2)).setTextureCoord(7, 10).setName("minecartFurnace");
-	public static Item egg = (new EggItem(88)).setTextureCoord(12, 0).setName("egg");
-	public static Item compass = (new Item(89)).setTextureCoord(6, 3).setName("compass");
-	public static Item fishingRod = (new FishingRodItem(90)).setTextureCoord(5, 4).setName("fishingRod");
-	public static Item clock = (new Item(91)).setTextureCoord(6, 4).setName("clock");
-	public static Item glowstoneDust = (new Item(92)).setTextureCoord(9, 4).setName("yellowDust");
-	public static Item rawFish = (new FoodItem(93, 2, false)).setTextureCoord(9, 5).setName("fishRaw");
-	public static Item cookedFish = (new FoodItem(94, 5, false)).setTextureCoord(10, 5).setName("fishCooked");
-	public static Item dye = (new DyeItem(95)).setTextureCoord(14, 4).setName("dyePowder");
-	public static Item bone = (new Item(96)).setTextureCoord(12, 1).setName("bone").setToolGrip();
-	public static Item sugar = (new Item(97)).setTextureCoord(13, 0).setName("sugar").setToolGrip();
-	public static Item cake = (new AltBlockItem(98, Block.cake)).setMaxStackSize(1).setTextureCoord(13, 1).setName("cake");
-	public static Item bed = (new BedItem(99)).setMaxStackSize(1).setTextureCoord(13, 2).setName("bed");
-	public static Item redstoneRepeater = (new AltBlockItem(100, Block.redstoneRepeaterOff)).setTextureCoord(6, 5).setName("diode");
-	public static Item cookie = (new CookieItem(101, 1, false, 8)).setTextureCoord(12, 5).setName("cookie");
-	public static MapItem map = (MapItem)(new MapItem(102)).setTextureCoord(12, 3).setName("map");
-	public static ShearsItem shears = (ShearsItem)(new ShearsItem(103)).setTextureCoord(13, 5).setName("shears");
-	public static Item disc13 = (new MusicDiscItem(2000, "13")).setTextureCoord(0, 15).setName("record");
-	public static Item discCat = (new MusicDiscItem(2001, "cat")).setTextureCoord(1, 15).setName("record");
+	public static Item[] itemsList = new Item[32768];
+	public static Item ironShovel = (new ShovelItem(16384+0, ToolMaterial.IRON)).setTextureCoord(2, 5).setName("shovelIron");
+	public static Item ironPickaxe = (new PickaxeItem(16384+1, ToolMaterial.IRON)).setTextureCoord(2, 6).setName("pickaxeIron");
+	public static Item ironAxe = (new AxeItem(16384+2, ToolMaterial.IRON)).setTextureCoord(2, 7).setName("hatchetIron");
+	public static Item flintAndSteel = (new FlintAndSteelItem(16384+3)).setTextureCoord(5, 0).setName("flintAndSteel");
+	public static Item apple = (new FoodItem(16384+4, 4, false)).setTextureCoord(10, 0).setName("apple");
+	public static Item bow = (new BowItem(16384+5)).setTextureCoord(5, 1).setName("bow");
+	public static Item arrow = (new Item(16384+6)).setTextureCoord(5, 2).setName("arrow");
+	public static Item coal = (new CoalItem(16384+7)).setTextureCoord(7, 0).setName("coal");
+	public static Item diamond = (new Item(16384+8)).setTextureCoord(7, 3).setName("emerald");
+	public static Item ironIngot = (new Item(16384+9)).setTextureCoord(7, 1).setName("ingotIron");
+	public static Item goldIngot = (new Item(16384+10)).setTextureCoord(7, 2).setName("ingotGold");
+	public static Item ironSword = (new SwordItem(16384+11, ToolMaterial.IRON)).setTextureCoord(2, 4).setName("swordIron");
+	public static Item woodSword = (new SwordItem(16384+12, ToolMaterial.WOOD)).setTextureCoord(0, 4).setName("swordWood");
+	public static Item woodShovel = (new ShovelItem(16384+13, ToolMaterial.WOOD)).setTextureCoord(0, 5).setName("shovelWood");
+	public static Item woodPickaxe = (new PickaxeItem(16384+14, ToolMaterial.WOOD)).setTextureCoord(0, 6).setName("pickaxeWood");
+	public static Item woodAxe = (new AxeItem(16384+15, ToolMaterial.WOOD)).setTextureCoord(0, 7).setName("hatchetWood");
+	public static Item stoneSword = (new SwordItem(16384+16, ToolMaterial.STONE)).setTextureCoord(1, 4).setName("swordStone");
+	public static Item stoneShovel = (new ShovelItem(16384+17, ToolMaterial.STONE)).setTextureCoord(1, 5).setName("shovelStone");
+	public static Item stonePickaxe = (new PickaxeItem(16384+18, ToolMaterial.STONE)).setTextureCoord(1, 6).setName("pickaxeStone");
+	public static Item stoneAxe = (new AxeItem(16384+19, ToolMaterial.STONE)).setTextureCoord(1, 7).setName("hatchetStone");
+	public static Item diamondSword = (new SwordItem(16384+20, ToolMaterial.DIAMOND)).setTextureCoord(3, 4).setName("swordDiamond");
+	public static Item diamondShovel = (new ShovelItem(16384+21, ToolMaterial.DIAMOND)).setTextureCoord(3, 5).setName("shovelDiamond");
+	public static Item diamondPickaxe = (new PickaxeItem(16384+22, ToolMaterial.DIAMOND)).setTextureCoord(3, 6).setName("pickaxeDiamond");
+	public static Item diamondAxe = (new AxeItem(16384+23, ToolMaterial.DIAMOND)).setTextureCoord(3, 7).setName("hatchetDiamond");
+	public static Item stick = (new Item(16384+24)).setTextureCoord(5, 3).setToolGrip().setName("stick");
+	public static Item bowlEmpty = (new Item(16384+25)).setTextureCoord(7, 4).setName("bowl");
+	public static Item bowlSoup = (new SoupItem(16384+26, 10)).setTextureCoord(8, 4).setName("mushroomStew");
+	public static Item goldSword = (new SwordItem(16384+27, ToolMaterial.GOLD)).setTextureCoord(4, 4).setName("swordGold");
+	public static Item goldShovel = (new ShovelItem(16384+28, ToolMaterial.GOLD)).setTextureCoord(4, 5).setName("shovelGold");
+	public static Item goldPickaxe = (new PickaxeItem(16384+29, ToolMaterial.GOLD)).setTextureCoord(4, 6).setName("pickaxeGold");
+	public static Item goldAxe = (new AxeItem(16384+30, ToolMaterial.GOLD)).setTextureCoord(4, 7).setName("hatchetGold");
+	public static Item string = (new Item(16384+31)).setTextureCoord(8, 0).setName("string");
+	public static Item feather = (new Item(16384+32)).setTextureCoord(8, 1).setName("feather");
+	public static Item gunpowder = (new Item(16384+33)).setTextureCoord(8, 2).setName("sulphur");
+	public static Item woodHoe = (new HoeItem(16384+34, ToolMaterial.WOOD)).setTextureCoord(0, 8).setName("hoeWood");
+	public static Item stoneHoe = (new HoeItem(16384+35, ToolMaterial.STONE)).setTextureCoord(1, 8).setName("hoeStone");
+	public static Item ironHoe = (new HoeItem(16384+36, ToolMaterial.IRON)).setTextureCoord(2, 8).setName("hoeIron");
+	public static Item diamondHoe = (new HoeItem(16384+37, ToolMaterial.DIAMOND)).setTextureCoord(3, 8).setName("hoeDiamond");
+	public static Item goldHoe = (new HoeItem(16384+38, ToolMaterial.GOLD)).setTextureCoord(4, 8).setName("hoeGold");
+	public static Item seeds = (new SeedsItem(16384+39, Block.crops.blockID)).setTextureCoord(9, 0).setName("seeds");
+	public static Item wheat = (new Item(16384+40)).setTextureCoord(9, 1).setName("wheat");
+	public static Item bread = (new FoodItem(16384+41, 5, false)).setTextureCoord(9, 2).setName("bread");
+	public static Item leatherCap = (new ArmorItem(16384+42, 0, 0, 0)).setTextureCoord(0, 0).setName("helmetCloth");
+	public static Item leatherTunic = (new ArmorItem(16384+43, 0, 0, 1)).setTextureCoord(0, 1).setName("chestplateCloth");
+	public static Item leatherPants = (new ArmorItem(16384+44, 0, 0, 2)).setTextureCoord(0, 2).setName("leggingsCloth");
+	public static Item leatherBoots = (new ArmorItem(16384+45, 0, 0, 3)).setTextureCoord(0, 3).setName("bootsCloth");
+	public static Item chainmailHelmet = (new ArmorItem(16384+46, 1, 1, 0)).setTextureCoord(1, 0).setName("helmetChain");
+	public static Item chainmailChestplate = (new ArmorItem(16384+47, 1, 1, 1)).setTextureCoord(1, 1).setName("chestplateChain");
+	public static Item chainmailLeggings = (new ArmorItem(16384+48, 1, 1, 2)).setTextureCoord(1, 2).setName("leggingsChain");
+	public static Item chainmailBoots = (new ArmorItem(16384+49, 1, 1, 3)).setTextureCoord(1, 3).setName("bootsChain");
+	public static Item ironHelmet = (new ArmorItem(16384+50, 2, 2, 0)).setTextureCoord(2, 0).setName("helmetIron");
+	public static Item ironChestplate = (new ArmorItem(16384+51, 2, 2, 1)).setTextureCoord(2, 1).setName("chestplateIron");
+	public static Item ironLeggings = (new ArmorItem(16384+52, 2, 2, 2)).setTextureCoord(2, 2).setName("leggingsIron");
+	public static Item ironBoots = (new ArmorItem(16384+53, 2, 2, 3)).setTextureCoord(2, 3).setName("bootsIron");
+	public static Item diamondHelmet = (new ArmorItem(16384+54, 3, 3, 0)).setTextureCoord(3, 0).setName("helmetDiamond");
+	public static Item diamondChestplate = (new ArmorItem(16384+55, 3, 3, 1)).setTextureCoord(3, 1).setName("chestplateDiamond");
+	public static Item diamondLeggings = (new ArmorItem(16384+56, 3, 3, 2)).setTextureCoord(3, 2).setName("leggingsDiamond");
+	public static Item diamondBoots = (new ArmorItem(16384+57, 3, 3, 3)).setTextureCoord(3, 3).setName("bootsDiamond");
+	public static Item goldHelmet = (new ArmorItem(16384+58, 1, 4, 0)).setTextureCoord(4, 0).setName("helmetGold");
+	public static Item goldChestplate = (new ArmorItem(16384+59, 1, 4, 1)).setTextureCoord(4, 1).setName("chestplateGold");
+	public static Item goldLeggings = (new ArmorItem(16384+60, 1, 4, 2)).setTextureCoord(4, 2).setName("leggingsGold");
+	public static Item goldBoots = (new ArmorItem(16384+61, 1, 4, 3)).setTextureCoord(4, 3).setName("bootsGold");
+	public static Item flint = (new Item(16384+62)).setTextureCoord(6, 0).setName("flint");
+	public static Item rawPorkchop = (new FoodItem(16384+63, 2, true)).setTextureCoord(7, 5).setName("porkchopRaw");
+	public static Item cookedPorkchop = (new FoodItem(16384+64, 6, true)).setTextureCoord(8, 5).setName("porkchopCooked");
+	public static Item painting = (new PaintingItem(16384+65)).setTextureCoord(10, 1).setName("painting");
+	public static Item goldenApple = (new FoodItem(16384+66, 42, false)).setTextureCoord(11, 0).setName("appleGold");
+	public static Item sign = (new SignItem(16384+67)).setTextureCoord(10, 2).setName("sign");
+	public static Item door = (new DoorItem(16384+68, Material.wood)).setTextureCoord(11, 2).setName("doorWood");
+	public static Item emptyBucket = (new BucketItem(16384+69, 0)).setTextureCoord(10, 4).setName("bucket");
+	public static Item waterBucket = (new BucketItem(16384+70, Block.flowingWater.blockID)).setTextureCoord(11, 4).setName("bucketWater").setCraftingResult(emptyBucket);
+	public static Item lavaBucket = (new BucketItem(16384+71, Block.flowingLava.blockID)).setTextureCoord(12, 4).setName("bucketLava").setCraftingResult(emptyBucket);
+	public static Item minecart = (new MinecartItem(16384+72, 0)).setTextureCoord(7, 8).setName("minecart");
+	public static Item saddle = (new SaddleItem(16384+73)).setTextureCoord(8, 6).setName("saddle");
+	public static Item ironDoor = (new DoorItem(16384+74, Material.iron)).setTextureCoord(12, 2).setName("doorIron");
+	public static Item redstone = (new RedstoneItem(16384+75)).setTextureCoord(8, 3).setName("redstone");
+	public static Item snowball = (new SnowballItem(16384+76)).setTextureCoord(14, 0).setName("snowball");
+	public static Item boat = (new BoatItem(16384+77)).setTextureCoord(8, 8).setName("boat");
+	public static Item leather = (new Item(16384+78)).setTextureCoord(7, 6).setName("leather");
+	public static Item milkBucket = (new BucketItem(16384+79, -1)).setTextureCoord(13, 4).setName("milk").setCraftingResult(emptyBucket);
+	public static Item brick = (new Item(16384+80)).setTextureCoord(6, 1).setName("brick");
+	public static Item clay = (new Item(16384+81)).setTextureCoord(9, 3).setName("clay");
+	public static Item sugarCane = (new AltBlockItem(16384+82, Block.reed)).setTextureCoord(11, 1).setName("reeds");
+	public static Item paper = (new Item(16384+83)).setTextureCoord(10, 3).setName("paper");
+	public static Item book = (new Item(16384+84)).setTextureCoord(11, 3).setName("book");
+	public static Item slimeBall = (new Item(16384+85)).setTextureCoord(14, 1).setName("slimeball");
+	public static Item minecartWithChest = (new MinecartItem(16384+86, 1)).setTextureCoord(7, 9).setName("minecartChest");
+	public static Item minecartWithFurnace = (new MinecartItem(16384+87, 2)).setTextureCoord(7, 10).setName("minecartFurnace");
+	public static Item egg = (new EggItem(16384+88)).setTextureCoord(12, 0).setName("egg");
+	public static Item compass = (new Item(16384+89)).setTextureCoord(6, 3).setName("compass");
+	public static Item fishingRod = (new FishingRodItem(16384+90)).setTextureCoord(5, 4).setName("fishingRod");
+	public static Item clock = (new Item(16384+91)).setTextureCoord(6, 4).setName("clock");
+	public static Item glowstoneDust = (new Item(16384+92)).setTextureCoord(9, 4).setName("yellowDust");
+	public static Item rawFish = (new FoodItem(16384+93, 2, false)).setTextureCoord(9, 5).setName("fishRaw");
+	public static Item cookedFish = (new FoodItem(16384+94, 5, false)).setTextureCoord(10, 5).setName("fishCooked");
+	public static Item dye = (new DyeItem(16384+95)).setTextureCoord(14, 4).setName("dyePowder");
+	public static Item bone = (new Item(16384+96)).setTextureCoord(12, 1).setName("bone").setToolGrip();
+	public static Item sugar = (new Item(16384+97)).setTextureCoord(13, 0).setName("sugar").setToolGrip();
+	public static Item cake = (new AltBlockItem(16384+98, Block.cake)).setMaxStackSize(1).setTextureCoord(13, 1).setName("cake");
+	public static Item bed = (new BedItem(16384+99)).setMaxStackSize(1).setTextureCoord(13, 2).setName("bed");
+	public static Item redstoneRepeater = (new AltBlockItem(16384+100, Block.redstoneRepeaterOff)).setTextureCoord(6, 5).setName("diode");
+	public static Item cookie = (new CookieItem(16384+101, 1, false, 8)).setTextureCoord(12, 5).setName("cookie");
+	public static MapItem map = (MapItem)(new MapItem(16384+102)).setTextureCoord(12, 3).setName("map");
+	public static ShearsItem shears = (ShearsItem)(new ShearsItem(16384+103)).setTextureCoord(13, 5).setName("shears");
+	public static Item rawBeef = (new FoodItem(16384+104, 3, true)).setTextureCoord(9, 6).setName("beefRaw");
+	public static Item cookedBeef = (new FoodItem(16384+105, 8, true)).setTextureCoord(10, 6).setName("beefCooked");
+	public static Item rawChicken = (new FoodItem(16384+106, 1, true)).setTextureCoord(9, 7).setName("chickenRaw");
+	public static Item cookedChicken = (new FoodItem(16384+107, 5, true)).setTextureCoord(10, 7).setName("chickenCooked");
+	public static Item gear = (new Item(16384+108)).setTextureCoord(6,6).setName("gear");
+	public static Item windMill = (new WindMillItem(16384+109).setTextureCoord(2,15).setName("windMill"));
+	public static Item disc13 = (new MusicDiscItem(16384+2000, "13")).setTextureCoord(0, 15).setName("record");
+	public static Item discCat = (new MusicDiscItem(16384+2001, "cat")).setTextureCoord(1, 15).setName("record");
 	public final int itemID;
-	protected int maxStackSize = 64;
+	protected int maxStackSize = 100;
 	private int maxDamage = 0;
 	protected int textureIndex;
 	protected boolean toolGrip = false;
@@ -129,12 +136,12 @@
 	private String name;
 
 	protected Item(int var1) {
-		this.itemID = 256 + var1;
-		if(itemsList[256 + var1] != null) {
+		this.itemID = var1;
+		if(itemsList[var1] != null) {
 			System.out.println("CONFLICT @ " + var1);
 		}
 
-		itemsList[256 + var1] = this;
+		itemsList[var1] = this;
 	}
 
 	public Item setTextureCoord(int var1) {
@@ -148,7 +155,7 @@
 	}
 
 	public Item setTextureCoord(int var1, int var2) {
-		this.textureIndex = var1 + var2 * 16;
+		this.textureIndex = var1 + var2 * 32;
 		return this;
 	}
 
@@ -284,5 +291,9 @@
 
 	static {
 		StatList.initItems();
+	}
+
+	public int[] getCreativeDamageValues() {
+		return new int[]{0};
 	}
 }
--- net/minecraft/client/render/RenderManager.java
+++ net/minecraft/client/render/RenderManager.java
@@ -43,6 +43,7 @@
 import net.minecraft.client.render.entity.RenderSpider;
 import net.minecraft.client.render.entity.RenderSquid;
 import net.minecraft.client.render.entity.RenderWolf;
+import net.minecraft.client.render.entity.mechanical.WindMillRenderer;
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.LivingEntity;
 import net.minecraft.game.entity.animal.ChickenEntity;
@@ -51,6 +52,7 @@
 import net.minecraft.game.entity.animal.SheepEntity;
 import net.minecraft.game.entity.animal.SquidEntity;
 import net.minecraft.game.entity.animal.WolfEntity;
+import net.minecraft.game.entity.mechanical.WindMillEntity;
 import net.minecraft.game.entity.misc.FallingBlockEntity;
 import net.minecraft.game.entity.misc.FishEntity;
 import net.minecraft.game.entity.misc.ItemEntity;
@@ -124,6 +126,9 @@
 		this.entityRenderMap.put(BoatEntity.class, new RenderBoat());
 		this.entityRenderMap.put(FishEntity.class, new RenderFish());
 		this.entityRenderMap.put(LightningBoltEntity.class, new RenderLightningBolt());
+
+		this.entityRenderMap.put(WindMillEntity.class, new WindMillRenderer());
+
 		Iterator var1 = this.entityRenderMap.values().iterator();
 
 		while(var1.hasNext()) {
@@ -164,6 +169,10 @@
 		} else {
 			this.playerViewY = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var6;
 			this.playerViewX = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var6;
+			if (this.options.thirdPersonView == 2) {
+				this.playerViewY += 180.0F;
+				this.playerViewX *= -1.0F;
+			}
 		}
 
 		this.playerPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var6;
--- net/minecraft/game/entity/animal/SheepEntity.java
+++ net/minecraft/game/entity/animal/SheepEntity.java
@@ -17,6 +17,7 @@
 		super(var1);
 		this.texture = "/mob/sheep.png";
 		this.setSize(0.9F, 1.3F);
+		this.scoreValue = 5;
 	}
 
 	protected void entityInit() {
--- net/minecraft/client/render/entity/Render.java
+++ net/minecraft/client/render/entity/Render.java
@@ -12,6 +12,7 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.GL11;
 
 public abstract class Render {
@@ -42,12 +43,12 @@
 	private void renderEntityOnFire(Entity var1, double var2, double var4, double var6, float var8) {
 		GL11.glDisable(GL11.GL_LIGHTING);
 		int var9 = Block.fire.textureIndex;
-		int var10 = (var9 & 15) << 4;
-		int var11 = var9 & 240;
-		float var12 = (float)var10 / 256.0F;
-		float var13 = ((float)var10 + 15.99F) / 256.0F;
-		float var14 = (float)var11 / 256.0F;
-		float var15 = ((float)var11 + 15.99F) / 256.0F;
+		int var10 = (var9 & SharedConstants.ATLAS_MASK1) << 4;
+		int var11 = (var9 & SharedConstants.ATLAS_MASK2) >> SharedConstants.ATLAS_SHIFT;
+		float var12 = (float)var10 / SharedConstants.ATLAS_SIZE;
+		float var13 = ((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE;
+		float var14 = (float)var11 / SharedConstants.ATLAS_SIZE;
+		float var15 = ((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE;
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		float var16 = var1.width * 1.4F;
@@ -67,15 +68,15 @@
 
 		while(var20 > 0.0F) {
 			if(var23 % 2 == 0) {
-				var12 = (float)var10 / 256.0F;
-				var13 = ((float)var10 + 15.99F) / 256.0F;
-				var14 = (float)var11 / 256.0F;
-				var15 = ((float)var11 + 15.99F) / 256.0F;
+				var12 = (float)var10 / SharedConstants.ATLAS_SIZE;
+				var13 = ((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE;
+				var14 = (float)var11 / SharedConstants.ATLAS_SIZE;
+				var15 = ((float)var11 + 15.99F) / SharedConstants.ATLAS_SIZE;
 			} else {
-				var12 = (float)var10 / 256.0F;
-				var13 = ((float)var10 + 15.99F) / 256.0F;
-				var14 = (float)(var11 + 16) / 256.0F;
-				var15 = ((float)(var11 + 16) + 15.99F) / 256.0F;
+				var12 = (float)var10 / SharedConstants.ATLAS_SIZE;
+				var13 = ((float)var10 + 15.99F) / SharedConstants.ATLAS_SIZE;
+				var14 = (float)(var11 + 16) / SharedConstants.ATLAS_SIZE;
+				var15 = ((float)(var11 + 16) + 15.99F) / SharedConstants.ATLAS_SIZE;
 			}
 
 			if(var23 / 2 % 2 == 0) {
--- /dev/null
+++ net/minecraft/util/SharedConstants.java
@@ -1,0 +1,22 @@
+package net.minecraft.util;
+
+public class SharedConstants {
+    public static String SHORTENED_VERSION = "v0.1-milestone5";
+    public static String VERSION = "Order of the Talon "+SHORTENED_VERSION;
+    public static boolean PANORAMA_SCREENSHOT_MODE = false;
+    public static boolean DEBUG = true;
+    public static int BLOCK_LIMIT = 16384;
+    public static int CHUNK_BIT_OFFSET = 8;
+    public static int CHUNK_HEIGHT = 256;
+
+    public static float ATLAS_SIZE = 512.0F;
+    public static int ATLAS_MASK1 = 0x1f;
+    public static int ATLAS_MASK2 = 0x3e0;
+    public static int ATLAS_SHIFT = 1;
+
+    public static int CUSTOM_RENDER_TYPE = 64;
+
+    public static int getAtlasTexture(int x, int y) {
+        return (y * 32) + x;
+    }
+}
--- net/minecraft/game/world/save/SaveFormatOld.java
+++ net/minecraft/game/world/save/SaveFormatOld.java
@@ -32,7 +32,7 @@
 			String var3 = "World" + (var2 + 1);
 			WorldInfo var4 = this.getWorldInfo(var3);
 			if(var4 != null) {
-				var1.add(new SaveFormatComparator(var3, "", var4.getLastTimePlayed(), var4.getSizeOnDisk(), false));
+				var1.add(new SaveFormatComparator(var3, "", var4.getLastTimePlayed(), var4.getSizeOnDisk(), false, false));
 			}
 		}
 
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -6,7 +6,11 @@
 import java.awt.Component;
 import java.awt.Frame;
 import java.awt.Graphics;
+import java.awt.image.BufferedImage;
 import java.io.File;
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+
 import net.minecraft.client.controller.CreativePlayerController;
 import net.minecraft.client.controller.PlayerController;
 import net.minecraft.client.effect.EffectRenderer;
@@ -42,15 +46,7 @@
 import net.minecraft.client.render.color.ColorizerFoliage;
 import net.minecraft.client.render.color.ColorizerGrass;
 import net.minecraft.client.render.color.ColorizerWater;
-import net.minecraft.client.render.texture.TextureCompassFX;
-import net.minecraft.client.render.texture.TextureFlamesFX;
-import net.minecraft.client.render.texture.TextureLavaFX;
-import net.minecraft.client.render.texture.TextureLavaFlowFX;
-import net.minecraft.client.render.texture.TexturePackList;
-import net.minecraft.client.render.texture.TexturePortalFX;
-import net.minecraft.client.render.texture.TextureWatchFX;
-import net.minecraft.client.render.texture.TextureWaterFX;
-import net.minecraft.client.render.texture.TextureWaterFlowFX;
+import net.minecraft.client.render.texture.*;
 import net.minecraft.client.sound.SoundManager;
 import net.minecraft.game.MinecraftException;
 import net.minecraft.game.entity.LivingEntity;
@@ -74,8 +70,11 @@
 import net.minecraft.game.world.save.SaveFormat;
 import net.minecraft.game.world.save.SaveHandler;
 import net.minecraft.network.NetClientHandler;
+import net.minecraft.network.packet.Packet108NoClip;
 import net.minecraft.network.stats.StatFileWriter;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
+import org.lwjgl.BufferUtils;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -85,6 +84,9 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
+import javax.imageio.ImageIO;
+import javax.swing.*;
+
 public abstract class Minecraft implements Runnable {
 	public static byte[] field_28006_b = new byte[10485760];
 	private static Minecraft theMinecraft;
@@ -167,6 +169,13 @@
 	public void onMinecraftCrash(UnexpectedThrowable var1) {
 		this.hasCrashed = true;
 		this.displayUnexpectedThrowable(var1);
+		while(true) {
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            }
+        }
 	}
 
 	public abstract void displayUnexpectedThrowable(UnexpectedThrowable var1);
@@ -201,7 +210,9 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Beta 1.7.3");
+		Display.setTitle("Minecraft "+ SharedConstants.VERSION);
+		Display.setResizable(true);
+		Display.setVSyncEnabled(true);
 
 		try {
 			Display.create();
@@ -264,6 +275,10 @@
 		this.textureRegistry.registerTextureFX(new TextureLavaFlowFX());
 		this.textureRegistry.registerTextureFX(new TextureFlamesFX(0));
 		this.textureRegistry.registerTextureFX(new TextureFlamesFX(1));
+
+		this.textureRegistry.registerTextureFX(new TextureAxleFX(this,false));
+		//this.textureRegistry.registerTextureFX(new TextureAxleFX(this,true));
+
 		this.worldRenderer = new WorldRenderer(this, this.textureRegistry);
 		GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
 		this.effectRenderer = new EffectRenderer(this.theWorld, this.textureRegistry);
@@ -529,7 +544,7 @@
 					}
 
 					if(this.thePlayer != null && this.thePlayer.isEntityInsideOpaqueBlock()) {
-						this.gameSettings.thirdPersonView = false;
+						this.gameSettings.thirdPersonView = 0;
 					}
 
 					if(!this.skipRenderWorld) {
@@ -640,6 +655,10 @@
 	}
 
 	private void displayDebugInfo(long var1) {
+		if(this.currentScreen != null) {
+			return;
+		}
+
 		long var3 = 16666666L;
 		if(this.prevFrameTime == -1L) {
 			this.prevFrameTime = System.nanoTime();
@@ -737,7 +756,8 @@
 			}
 
 			this.inGameHasFocus = false;
-			this.mouseHelper.ungrabMouseCursor();
+			org.lwjgl.input.Mouse.setCursorPosition(Display.getWidth() / 2, Display.getHeight() / 2);
+			org.lwjgl.input.Mouse.setGrabbed(false);
 		}
 	}
 
@@ -1021,7 +1041,7 @@
 												}
 
 												if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
-													this.gameSettings.thirdPersonView = !this.gameSettings.thirdPersonView;
+													this.gameSettings.thirdPersonView = (this.gameSettings.thirdPersonView + 1) % 3;
 												}
 
 												if(Keyboard.getEventKey() == Keyboard.KEY_F8) {
@@ -1029,14 +1049,24 @@
 												}
 
 												if(Keyboard.getEventKey() == this.gameSettings.keyBindInventory.keyCode) {
-													this.displayGuiScreen(new InventoryScreen(this.thePlayer));
+													this.displayGuiScreen(new InventoryScreen(this.thePlayer,false));
 												}
 
 												if(Keyboard.getEventKey() == this.gameSettings.keyBindDrop.keyCode) {
 													this.thePlayer.dropCurrentItem();
 												}
 
-												if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.gameSettings.keyBindChat.keyCode) {
+												if(Keyboard.getEventKey() == this.gameSettings.keyBindNoClip.keyCode) {
+													if(this.theWorld.isCreativeWorld()) {
+														this.thePlayer.noClip = !this.thePlayer.noClip;
+														this.thePlayer.onGround = false;
+														if(this.theWorld.remoteWorld) {
+															this.getSendQueue().addToSendQueue(new Packet108NoClip(this.thePlayer.noClip));
+														}
+													}
+												}
+
+												if(Keyboard.getEventKey() == this.gameSettings.keyBindChat.keyCode) {
 													this.displayGuiScreen(new ChatScreen());
 												}
 											}
@@ -1044,6 +1074,11 @@
 											for(int var6 = 0; var6 < 9; ++var6) {
 												if(Keyboard.getEventKey() == Keyboard.KEY_1 + var6) {
 													this.thePlayer.inventory.currentItem = var6;
+
+													if (SharedConstants.PANORAMA_SCREENSHOT_MODE) {
+														this.thePlayer.rotationYaw = var6 < 4 ? -180.0F + 90.0F * var6 : -180.0F;
+														this.thePlayer.rotationPitch = var6 == 4 ? -90.0F : var6 == 5 ? 90.0F : 0.0F;
+													}
 												}
 											}
 
@@ -1236,6 +1271,7 @@
 	}
 
 	public void changeWorld(World var1, String var2, PlayerEntity var3) {
+		SoundManager.sndSystem.stop("TitleMusic");
 		this.statFileWriter.func_27175_b();
 		this.statFileWriter.syncStats();
 		this.renderViewEntity = null;
@@ -1361,8 +1397,11 @@
 			this.sndManager.addMusic(var1, var2);
 		} else if(var4.equalsIgnoreCase("newmusic")) {
 			this.sndManager.addMusic(var1, var2);
+		} else if(var4.equalsIgnoreCase("talon_title")) {
+			this.sndManager.soundPoolTitleMusic.addSound(var1, var2);
+		} else if(var4.equalsIgnoreCase("talon_creative")) {
+			this.sndManager.soundPoolCreativeMusic.addSound(var1, var2);
 		}
-
 	}
 
 	public OpenGlCapsChecker getOpenGlCapsChecker() {
@@ -1450,15 +1489,17 @@
 	}
 
 	public static void startMainThread(String var0, String var1, String var2) {
+		int w = SharedConstants.PANORAMA_SCREENSHOT_MODE ? 512 : 854;
+		int h = SharedConstants.PANORAMA_SCREENSHOT_MODE ? 512 : 480;
 		boolean var3 = false;
 		Frame var5 = new Frame("Minecraft");
 		Canvas var6 = new Canvas();
 		var5.setLayout(new BorderLayout());
 		var5.add(var6, "Center");
-		var6.setPreferredSize(new java.awt.Dimension(854, 480));
+		var6.setPreferredSize(new java.awt.Dimension(w, h));
 		var5.pack();
 		var5.setLocationRelativeTo((Component)null);
-		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
+		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, w, h, var3, var5);
 		Thread var8 = new Thread(var7, "Minecraft main thread");
 		var8.setPriority(10);
 		var7.minecraftUri = "www.minecraft.net";
@@ -1516,8 +1557,40 @@
 
 	public boolean lineIsCommand(String var1) {
 		if(var1.startsWith("/")) {
+			return true;
 		}
 
 		return false;
+	}
+
+	//////////////// START TALON CODE
+	private ByteBuffer loadIcon(String path) {
+		try {
+			InputStream stream = Minecraft.class.getResourceAsStream(path);
+			if (stream == null) {
+				throw new RuntimeException("Icon resource not found: " + path);
+			}
+			BufferedImage image = ImageIO.read(stream);
+
+			int[] pixels = new int[image.getWidth() * image.getHeight()];
+			image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());
+
+			ByteBuffer buffer = BufferUtils.createByteBuffer(image.getWidth() * image.getHeight() * 4);
+
+			for (int y = 0; y < image.getHeight(); y++) {
+				for (int x = 0; x < image.getWidth(); x++) {
+					int pixel = pixels[y * image.getWidth() + x];
+					buffer.put((byte) ((pixel >> 16) & 0xFF)); // Red
+					buffer.put((byte) ((pixel >> 8) & 0xFF));  // Green
+					buffer.put((byte) (pixel & 0xFF));         // Blue
+					buffer.put((byte) ((pixel >> 24) & 0xFF)); // Alpha
+				}
+			}
+
+			buffer.flip();
+			return buffer;
+		} catch (Exception e) {
+			return null;
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/network/packet/Packet107CreativeSetSlot.java
@@ -1,0 +1,57 @@
+package net.minecraft.network.packet;
+
+import net.minecraft.game.item.ItemStack;
+import net.minecraft.network.NetHandler;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet107CreativeSetSlot extends Packet {
+    public int slotId;
+    public ItemStack stack;
+
+    public Packet107CreativeSetSlot() {
+
+    }
+
+    public Packet107CreativeSetSlot(int var1, ItemStack stack) {
+        this.slotId = var1;
+        this.stack = stack;
+    }
+
+    @Override
+    public void readPacketData(DataInputStream var1) throws IOException {
+        this.slotId = var1.readShort();
+        short var2 = var1.readShort();
+        if(var2 >= 0) {
+            byte var3 = var1.readByte();
+            short var4 = var1.readShort();
+            this.stack = new ItemStack(var2, var3, var4);
+        } else {
+            this.stack = null;
+        }
+    }
+
+    @Override
+    public void writePacketData(DataOutputStream var1) throws IOException {
+        var1.writeShort(this.slotId);
+        if(this.stack == null) {
+            var1.writeShort(-1);
+        } else {
+            var1.writeShort(this.stack.id);
+            var1.writeByte(this.stack.count);
+            var1.writeShort(this.stack.getItemDamage());
+        }
+    }
+
+    @Override
+    public void processPacket(NetHandler var1) {
+        var1.handleCreativeSetSlot(this);
+    }
+
+    @Override
+    public int getPacketSize() {
+        return 7;
+    }
+}
--- net/minecraft/client/render/texture/TexturedQuad.java
+++ net/minecraft/client/render/texture/TexturedQuad.java
@@ -16,14 +16,14 @@
 		this.nVertices = var1.length;
 	}
 
-	public TexturedQuad(ModelVertex[] var1, int var2, int var3, int var4, int var5) {
+	public TexturedQuad(ModelVertex[] var1, int var2, int var3, int var4, int var5, float width, float height) {
 		this(var1);
 		float var6 = 0.0015625F;
 		float var7 = 0.003125F;
-		var1[0] = var1[0].setTexturePosition((float)var4 / 64.0F - var6, (float)var3 / 32.0F + var7);
-		var1[1] = var1[1].setTexturePosition((float)var2 / 64.0F + var6, (float)var3 / 32.0F + var7);
-		var1[2] = var1[2].setTexturePosition((float)var2 / 64.0F + var6, (float)var5 / 32.0F - var7);
-		var1[3] = var1[3].setTexturePosition((float)var4 / 64.0F - var6, (float)var5 / 32.0F - var7);
+		var1[0] = var1[0].setTexturePosition((float)var4 / width - var6, (float)var3 / height + var7);
+		var1[1] = var1[1].setTexturePosition((float)var2 / width + var6, (float)var3 / height + var7);
+		var1[2] = var1[2].setTexturePosition((float)var2 / width + var6, (float)var5 / height - var7);
+		var1[3] = var1[3].setTexturePosition((float)var4 / width - var6, (float)var5 / height - var7);
 	}
 
 	public void flipFace() {
--- net/minecraft/game/world/block/WorkbenchContainer.java
+++ net/minecraft/game/world/block/WorkbenchContainer.java
@@ -49,7 +49,7 @@
 	}
 
 	public void onCraftMatrixChanged(Inventory var1) {
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix));
+		//this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix));
 	}
 
 	public void onCraftGuiClosed(PlayerEntity var1) {
--- net/minecraft/game/world/chunk/ChunkProviderServer.java
+++ net/minecraft/game/world/chunk/ChunkProviderServer.java
@@ -11,6 +11,7 @@
 import net.minecraft.game.world.chunk.loader.ChunkLoader;
 import net.minecraft.server.world.WorldServer;
 import net.minecraft.util.ProgressUpdate;
+import net.minecraft.util.SharedConstants;
 
 public class ChunkProviderServer implements ChunkProvider {
 	private Set field_725_a = new HashSet();
@@ -23,7 +24,7 @@
 	private WorldServer world;
 
 	public ChunkProviderServer(WorldServer var1, ChunkLoader var2, ChunkProvider var3) {
-		this.dummyChunk = new EmptyChunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+		this.dummyChunk = new EmptyChunk(var1, new short[16 * 16 * SharedConstants.CHUNK_HEIGHT], 0, 0);
 		this.world = var1;
 		this.field_729_d = var2;
 		this.serverChunkGenerator = var3;
@@ -196,7 +197,13 @@
 		return this.serverChunkGenerator.unload100OldestChunks();
 	}
 
+	@Override
 	public boolean canSave() {
 		return !this.world.levelSaving;
+	}
+
+	@Override
+	public String getDebugInfo() {
+		return "";
 	}
 }
--- net/minecraft/game/entity/player/ArmorSlot.java
+++ net/minecraft/game/entity/player/ArmorSlot.java
@@ -6,7 +6,8 @@
 import net.minecraft.game.item.slot.Slot;
 import net.minecraft.game.world.block.Block;
 
-class ArmorSlot extends Slot {
+public class ArmorSlot extends Slot {
+	public boolean visible = true;
 	final int armorType;
 	final PlayerContainer inventory;
 
@@ -22,5 +23,9 @@
 
 	public boolean isItemValid(ItemStack var1) {
 		return var1.getItem() instanceof ArmorItem ? ((ArmorItem)var1.getItem()).armorType == this.armorType : (var1.getItem().itemID == Block.pumpkin.blockID ? this.armorType == 0 : false);
+	}
+
+	public boolean isVisible() {
+		return visible;
 	}
 }
--- net/minecraft/game/item/EggItem.java
+++ net/minecraft/game/item/EggItem.java
@@ -11,7 +11,8 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, PlayerEntity var3) {
-		--var1.count;
+		if(!var2.isCreativeWorld())
+			--var1.count;
 		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (random.nextFloat() * 0.4F + 0.8F));
 		if(!var2.remoteWorld) {
 			var2.entityJoinedWorld(new EggEntity(var2, var3));
--- net/minecraft/game/world/MobSpawner.java
+++ net/minecraft/game/world/MobSpawner.java
@@ -20,6 +20,7 @@
 import net.minecraft.game.world.path.PathPoint;
 import net.minecraft.game.world.path.Pathfinder;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 
 public final class MobSpawner {
 	private static Set eligibleChunksForSpawning = new HashSet();
@@ -27,7 +28,7 @@
 
 	protected static ChunkPosition getRandomSpawningPointInChunk(World var0, int var1, int var2) {
 		int var3 = var1 + var0.rand.nextInt(16);
-		int var4 = var0.rand.nextInt(128);
+		int var4 = var0.rand.nextInt(var0.dimension.isNether ? 128 : SharedConstants.CHUNK_HEIGHT);
 		int var5 = var2 + var0.rand.nextInt(16);
 		return new ChunkPosition(var3, var4, var5);
 	}
--- net/minecraft/game/world/biome/TaigaBiome.java
+++ /dev/null
@@ -1,18 +1,0 @@
-package net.minecraft.game.world.biome;
-
-import java.util.Random;
-import net.minecraft.game.entity.animal.WolfEntity;
-import net.minecraft.game.world.SpawnListEntry;
-import net.minecraft.game.world.terrain.feature.Feature;
-import net.minecraft.game.world.terrain.feature.SkinnySpruceTreeFeature;
-import net.minecraft.game.world.terrain.feature.SpruceTreeFeature;
-
-public class TaigaBiome extends Biome {
-	public TaigaBiome() {
-		this.spawnableCreatureList.add(new SpawnListEntry(WolfEntity.class, 2));
-	}
-
-	public Feature getRandomTreeFeature(Random var1) {
-		return (Feature)(var1.nextInt(3) == 0 ? new SkinnySpruceTreeFeature() : new SpruceTreeFeature());
-	}
-}
--- net/minecraft/game/world/BlockAccess.java
+++ net/minecraft/game/world/BlockAccess.java
@@ -1,6 +1,6 @@
 package net.minecraft.game.world;
 
-import net.minecraft.game.world.biome.ClimaticBiomeSource;
+import net.minecraft.game.world.biome.ClimaticVoronoiBiomeSource;
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.game.world.material.Material;
 
@@ -21,5 +21,5 @@
 
 	boolean isBlockNormalCube(int var1, int var2, int var3);
 
-	ClimaticBiomeSource getBiomeSource();
+	ClimaticVoronoiBiomeSource getBiomeSource();
 }
--- net/minecraft/game/entity/player/PlayerContainer.java
+++ net/minecraft/game/entity/player/PlayerContainer.java
@@ -8,8 +8,8 @@
 import net.minecraft.game.item.slot.Slot;
 
 public class PlayerContainer extends Container {
-	public InventoryCrafting craftMatrix;
-	public Inventory craftResult;
+	//public InventoryCrafting craftMatrix;
+	//public Inventory craftResult;
 	public boolean isRemote;
 
 	public PlayerContainer(InventoryPlayer var1) {
@@ -17,51 +17,53 @@
 	}
 
 	public PlayerContainer(InventoryPlayer var1, boolean var2) {
-		this.craftMatrix = new InventoryCrafting(this, 2, 2);
-		this.craftResult = new InventoryCraftResult();
-		this.isRemote = false;
+		//this.craftMatrix = new InventoryCrafting(this, 2, 2);
+		//this.craftResult = new InventoryCraftResult();
 		this.isRemote = var2;
-		this.addSlot(new CraftingSlot(var1.player, this.craftMatrix, this.craftResult, 0, 144, 36));
+		//this.addSlot(new CraftingSlot(var1.player, this.craftMatrix, this.craftResult, 0, 144, 36));
 
 		int var3;
 		int var4;
-		for(var3 = 0; var3 < 2; ++var3) {
-			for(var4 = 0; var4 < 2; ++var4) {
-				this.addSlot(new Slot(this.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 26 + var3 * 18));
-			}
-		}
-
-		for(var3 = 0; var3 < 4; ++var3) {
-			this.addSlot(new ArmorSlot(this, var1, var1.getSize() - 1 - var3, 8, 8 + var3 * 18, var3));
-		}
-
+		// 0-8 HotBar
+		for(var3 = 0; var3 < 9; ++var3) {
+			this.addSlot(new Slot(var1, var3, 8 + var3 * 18, 142));
+		}
+
+		// 9-35 Inventory
 		for(var3 = 0; var3 < 3; ++var3) {
 			for(var4 = 0; var4 < 9; ++var4) {
 				this.addSlot(new Slot(var1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
 			}
 		}
 
-		for(var3 = 0; var3 < 9; ++var3) {
-			this.addSlot(new Slot(var1, var3, 8 + var3 * 18, 142));
+		// 36-39 Armor
+		for(var3 = 0; var3 < 4; ++var3) {
+			this.addSlot(new ArmorSlot(this, var1, var1.getSize() - 1 - var3, 8, 8 + var3 * 18, var3));
 		}
 
-		this.onCraftMatrixChanged(this.craftMatrix);
+		/*for(var3 = 0; var3 < 2; ++var3) {
+			for(var4 = 0; var4 < 2; ++var4) {
+				this.addSlot(new Slot(this.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 26 + var3 * 18));
+			}
+		}*/
+
+		//this.onCraftMatrixChanged(this.craftMatrix);
 	}
 
 	public void onCraftMatrixChanged(Inventory var1) {
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix));
+		//this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix));
 	}
 
 	public void onCraftGuiClosed(PlayerEntity var1) {
 		super.onCraftGuiClosed(var1);
 
-		for(int var2 = 0; var2 < 4; ++var2) {
+		/*for(int var2 = 0; var2 < 4; ++var2) {
 			ItemStack var3 = this.craftMatrix.getStackInSlot(var2);
 			if(var3 != null) {
 				var1.dropPlayerItem(var3);
 				this.craftMatrix.setInventorySlotContents(var2, (ItemStack)null);
 			}
-		}
+		}*/
 
 	}
 
@@ -75,14 +77,10 @@
 		if(var3 != null && var3.hasStack()) {
 			ItemStack var4 = var3.getStack();
 			var2 = var4.copy();
-			if(var1 == 0) {
-				this.putStack(var4, 9, 45, true);
-			} else if(var1 >= 9 && var1 < 36) {
-				this.putStack(var4, 36, 45, false);
-			} else if(var1 >= 36 && var1 < 45) {
-				this.putStack(var4, 9, 36, false);
+			if(var1 >= 9 && var1 <= 35) {
+				this.putStack(var4, 0, 8, false);
 			} else {
-				this.putStack(var4, 9, 45, false);
+				this.putStack(var4, 9, 36, false);
 			}
 
 			if(var4.count == 0) {
--- net/minecraft/game/entity/animal/SquidEntity.java
+++ net/minecraft/game/entity/animal/SquidEntity.java
@@ -30,6 +30,7 @@
 		this.texture = "/mob/squid.png";
 		this.setSize(0.95F, 0.95F);
 		this.squidSpeed = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
+		this.scoreValue = 5;
 	}
 
 	public void writeEntityToNBT(CompoundTag var1) {
--- net/minecraft/game/world/terrain/feature/SkinnySpruceTreeFeature.java
+++ net/minecraft/game/world/terrain/feature/SkinnySpruceTreeFeature.java
@@ -3,6 +3,7 @@
 import java.util.Random;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 
 public class SkinnySpruceTreeFeature extends Feature {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
@@ -11,7 +12,7 @@
 		int var8 = var6 - var7;
 		int var9 = 1 + var2.nextInt(var8 + 1);
 		boolean var10 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+		if(var4 >= 1 && var4 + var6 + 1 <= SharedConstants.CHUNK_HEIGHT) {
 			int var11;
 			int var13;
 			int var14;
@@ -27,7 +28,7 @@
 
 				for(var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13) {
 					for(var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14) {
-						if(var11 >= 0 && var11 < 128) {
+						if(var11 >= 0 && var11 < SharedConstants.CHUNK_HEIGHT) {
 							var15 = var1.getBlockId(var13, var11, var14);
 							if(var15 != 0 && var15 != Block.leaves.blockID) {
 								var10 = false;
@@ -43,7 +44,7 @@
 				return false;
 			} else {
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < SharedConstants.CHUNK_HEIGHT - var6 - 1) {
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 					var18 = 0;
 
--- net/minecraft/game/world/block/LeavesBlock.java
+++ net/minecraft/game/world/block/LeavesBlock.java
@@ -11,6 +11,8 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class LeavesBlock extends BaseLeavesBlock {
 	private int baseIndexInPNG;
 	int[] adjacentTreeBlocks;
@@ -32,10 +34,7 @@
 		} else if((var5 & 2) == 2) {
 			return ColorizerFoliage.getFoliageColorBirch();
 		} else {
-			var1.getBiomeSource().getBlockGeneratorData(var2, var4, 1, 1);
-			double var6 = var1.getBiomeSource().temperature[0];
-			double var8 = var1.getBiomeSource().humidity[0];
-			return ColorizerFoliage.getFoliageColor(var6, var8);
+			return var1.getBiomeSource().getBlockGeneratorData(var2, var4, 1, 1)[0].getFoliageColor();
 		}
 	}
 
@@ -146,9 +145,15 @@
 					var1.setBlockMetadata(var2, var3, var4, var6 & -9);
 				} else {
 					this.removeLeaves(var1, var2, var3, var4);
+					for (int offsetX = -3; offsetX <= 3; offsetX++) {
+						for (int offsetY = -3; offsetY <= 3; offsetY++) {
+							for (int offsetZ = -3; offsetZ <= 3; offsetZ++) {
+								var1.scheduleUpdateTick(var2 + offsetX, var3 + offsetY, var4 + offsetZ, this.blockID, var1.rand.nextInt(15) + 10);
+							}
+						}
+					}
 				}
 			}
-
 		}
 	}
 
@@ -184,12 +189,12 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return (var2 & 3) == 1 ? this.textureIndex + 80 : this.textureIndex;
+		return getAtlasTexture(fancyGraphics ? 19 : 20,var2 & 3);
 	}
 
 	public void setGraphicsLevel(boolean var1) {
 		this.fancyGraphics = var1;
-		this.textureIndex = this.baseIndexInPNG + (var1 ? 0 : 1);
+		this.textureIndex = (var1 ? 19 : 20);
 	}
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
--- /dev/null
+++ net/minecraft/util/Pair.java
@@ -1,0 +1,24 @@
+package net.minecraft.util;
+
+import java.util.Objects;
+
+public class Pair<T, U> {
+
+    public T left;
+    public U right;
+
+    public Pair(T val, U val2) {
+        left = val;
+        right = val2;
+    }
+
+    public boolean equals(Object o) {
+        if(o instanceof Pair) {
+            Pair<?,?> pair = (Pair<?,?>)o;
+            boolean leftEqual = Objects.equals(left, pair.left);
+            boolean rightEqual = Objects.equals(right, pair.right);
+            return leftEqual && rightEqual;
+        }
+        return false;
+    }
+}
--- net/minecraft/game/entity/player/InventoryCraftResult.java
+++ net/minecraft/game/entity/player/InventoryCraftResult.java
@@ -33,7 +33,7 @@
 	}
 
 	public int getStackLimit() {
-		return 64;
+		return 100;
 	}
 
 	public void onChanged() {
--- net/minecraft/game/world/chunk/loader/ChunkLoaderImpl.java
+++ net/minecraft/game/world/chunk/loader/ChunkLoaderImpl.java
@@ -12,8 +12,10 @@
 import net.minecraft.game.entity.EntityRegistry;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.WorldInfo;
+import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.game.world.chunk.Chunk;
+import net.minecraft.util.MetadataByteArray;
 import net.minecraft.util.NibbleArray;
 
 public class ChunkLoaderImpl implements ChunkLoader {
@@ -120,11 +122,11 @@
 		var2.setInteger("xPos", var0.xPosition);
 		var2.setInteger("zPos", var0.zPosition);
 		var2.setLong("LastUpdate", var1.getWorldTime());
-		var2.setByteArray("Blocks", var0.blocks);
+		var2.setShortArray("Blocks", var0.blocks);
 		var2.setByteArray("Data", var0.data.data);
 		var2.setByteArray("SkyLight", var0.skylightMap.data);
 		var2.setByteArray("BlockLight", var0.blocklightMap.data);
-		var2.setByteArray("HeightMap", var0.heightMap);
+		var2.setIntArray("HeightMap", var0.heightMap);
 		var2.setBoolean("TerrainPopulated", var0.isTerrainPopulated);
 		var0.hasEntities = false;
 		ListTag var3 = new ListTag();
@@ -162,18 +164,18 @@
 		int var2 = var1.getInteger("xPos");
 		int var3 = var1.getInteger("zPos");
 		Chunk var4 = new Chunk(var0, var2, var3);
-		var4.blocks = var1.getByteArray("Blocks");
-		var4.data = new NibbleArray(var1.getByteArray("Data"));
+		var4.blocks = var1.getShortArray("Blocks");
+		var4.data = new MetadataByteArray(var1.getByteArray("Data"));
 		var4.skylightMap = new NibbleArray(var1.getByteArray("SkyLight"));
 		var4.blocklightMap = new NibbleArray(var1.getByteArray("BlockLight"));
-		var4.heightMap = var1.getByteArray("HeightMap");
+		var4.heightMap = var1.getIntArray("HeightMap");
 		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
 		if(!var4.data.isValid()) {
-			var4.data = new NibbleArray(var4.blocks.length);
+			var4.data = new MetadataByteArray(var4.blocks.length);
 		}
 
 		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
+			var4.heightMap = new int[256];
 			var4.skylightMap = new NibbleArray(var4.blocks.length);
 			var4.generateSkylightMap();
 		}
--- net/minecraft/game/item/ItemStack.java
+++ net/minecraft/game/item/ItemStack.java
@@ -204,7 +204,7 @@
 	}
 
 	public String toString() {
-		return this.count + "x" + Item.itemsList[this.id].getName() + "@" + this.damage;
+		return this.count + "x" + this.id + "@" + this.damage;
 	}
 
 	public void updateAnimation(World var1, Entity var2, int var3, boolean var4) {
--- net/minecraft/game/world/save/SaveFormatOldServer.java
+++ net/minecraft/game/world/save/SaveFormatOldServer.java
@@ -4,6 +4,9 @@
 import com.mojang.nbt.CompressedStreamTools;
 import java.io.File;
 import java.io.FileInputStream;
+import java.util.Collections;
+import java.util.List;
+
 import net.minecraft.game.world.WorldInfo;
 import net.minecraft.util.ProgressUpdate;
 
@@ -51,6 +54,16 @@
 		}
 	}
 
+	@Override
+	public void deleteWorld(String var1) {
+
+	}
+
+	@Override
+	public void updateLevelName(String var1, String var2) {
+
+	}
+
 	protected static void deleteFiles(File[] var0) {
 		for(int var1 = 0; var1 < var0.length; ++var1) {
 			if(var0[var1].isDirectory()) {
@@ -62,8 +75,23 @@
 
 	}
 
+	@Override
+	public String getFormatName() {
+		return "";
+	}
+
 	public SaveHandler getSaveLoader(String var1, boolean var2) {
 		return new SaveHandlerImpl(this.file, var1, var2);
+	}
+
+	@Override
+	public List getOldWorlds() {
+		return Collections.emptyList();
+	}
+
+	@Override
+	public void flushCache() {
+
 	}
 
 	public boolean isOldMapFormat(String var1) {
--- net/minecraft/game/stats/StatList.java
+++ net/minecraft/game/stats/StatList.java
@@ -13,6 +13,7 @@
 import net.minecraft.game.item.recipe.IRecipe;
 import net.minecraft.game.stats.achievement.AchievementList;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 
 public class StatList {
 	protected static Map idToStat = new HashMap();
@@ -70,7 +71,7 @@
 	public static void filterItemArrays() {
 		if(blocksInitialized && itemsInitialized) {
 			HashSet var0 = new HashSet();
-			Iterator var1 = CraftingManager.getInstance().getRecipeList().iterator();
+			Iterator var1 = new ArrayList().iterator();
 
 			while(var1.hasNext()) {
 				IRecipe var2 = (IRecipe)var1.next();
@@ -100,9 +101,9 @@
 	}
 
 	private static StatBase[] addBlockStats(String var0, int var1) {
-		StatBase[] var2 = new StatBase[256];
+		StatBase[] var2 = new StatBase[SharedConstants.BLOCK_LIMIT];
 
-		for(int var3 = 0; var3 < 256; ++var3) {
+		for(int var3 = 0; var3 < SharedConstants.BLOCK_LIMIT; ++var3) {
 			if(Block.blocksList[var3] != null && Block.blocksList[var3].areStatsEnabled()) {
 				String var4 = StatCollector.translateToLocalFormatted(var0, new Object[]{Block.blocksList[var3].getLocalizedStatName()});
 				var2[var3] = (new StatCrafting(var1 + var3, var4, var3)).registerStat();
--- net/minecraft/game/world/block/WorkbenchBlock.java
+++ net/minecraft/game/world/block/WorkbenchBlock.java
@@ -4,22 +4,26 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class WorkbenchBlock extends Block {
 	protected WorkbenchBlock(int var1) {
 		super(var1, Material.wood);
-		this.textureIndex = 59;
+		this.textureIndex = getAtlasTexture(28,2);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.textureIndex - 16 : (var1 == 0 ? Block.planks.getBlockTextureFromSide(0) : (var1 != 2 && var1 != 4 ? this.textureIndex : this.textureIndex + 1));
+		return var1 == 1 ? this.textureIndex - 32 : (var1 == 0 ? Block.planks.getBlockTextureFromSide(0) : (var1 != 2 && var1 != 4 ? this.textureIndex : this.textureIndex + 1));
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, PlayerEntity var5) {
-		if(var1.remoteWorld) {
+		var5.displayWorkbenchGUI(var2, var3, var4);
+		return true;
+		/*if(var1.remoteWorld) {
 			return true;
 		} else {
 			var5.displayWorkbenchGUI(var2, var3, var4);
 			return true;
-		}
+		}*/
 	}
 }
--- net/minecraft/server/PlayerDataHandler.java
+++ /dev/null
@@ -1,9 +1,0 @@
-package net.minecraft.server;
-
-import net.minecraft.game.entity.player.PlayerEntity;
-
-public interface PlayerDataHandler {
-	void writePlayerData(PlayerEntity var1);
-
-	void readPlayerData(PlayerEntity var1);
-}
--- net/minecraft/client/gui/container/ContainerScreen.java
+++ net/minecraft/client/gui/container/ContainerScreen.java
@@ -7,6 +7,7 @@
 import net.minecraft.game.item.Container;
 import net.minecraft.game.item.ItemStack;
 import net.minecraft.game.item.slot.Slot;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.StringTranslate;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.opengl.GL11;
@@ -28,7 +29,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		int var4 = (this.width - this.xSize) / 2;
 		int var5 = (this.height - this.ySize) / 2;
 		this.drawGuiContainerBackgroundLayer(var3);
@@ -76,9 +77,9 @@
 			if(var13.length() > 0) {
 				var9 = var1 - var4 + 12;
 				var10 = var2 - var5 - 12;
-				int var11 = this.fontRenderer.getStringWidth(var13);
+				int var11 = this.fontRenderer.getStringWidth(var13 + " " + var6.getStack().getItem().itemID+":"+var6.getStack().getItemDamage());
 				this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
-				this.fontRenderer.drawStringWithShadow(var13, var9, var10, -1);
+				this.fontRenderer.drawStringWithShadow(var13 + " " + var6.getStack().getItem().itemID+":"+var6.getStack().getItemDamage(), var9, var10, -1);
 			}
 		}
 
@@ -94,6 +95,7 @@
 	protected abstract void drawGuiContainerBackgroundLayer(float var1);
 
 	private void drawSlotInventory(Slot var1) {
+		if(!var1.isVisible()) return;
 		int var2 = var1.xDisplayPosition;
 		int var3 = var1.yDisplayPosition;
 		ItemStack var4 = var1.getStack();
@@ -110,9 +112,19 @@
 
 		itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.textureRegistry, var4, var2, var3);
 		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.textureRegistry, var4, var2, var3);
+		if(SharedConstants.DEBUG) {
+			GL11.glPushMatrix();
+			GL11.glScaled(0.5,0.5,1);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glDisable(GL11.GL_LIGHTING);
+			this.drawString(this.fontRenderer, var1.id + "", var2 * 2, var3 * 2, 0x40ffffff);
+			GL11.glEnable(GL11.GL_LIGHTING);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glPopMatrix();
+		}
 	}
 
-	private Slot getSlotAtPosition(int var1, int var2) {
+	public Slot getSlotAtPosition(int var1, int var2) {
 		for(int var3 = 0; var3 < this.inventorySlots.inventorySlots.size(); ++var3) {
 			Slot var4 = (Slot)this.inventorySlots.inventorySlots.get(var3);
 			if(this.getIsMouseOverSlot(var4, var1, var2)) {
@@ -123,7 +135,8 @@
 		return null;
 	}
 
-	private boolean getIsMouseOverSlot(Slot var1, int var2, int var3) {
+	public boolean getIsMouseOverSlot(Slot var1, int var2, int var3) {
+		if(!var1.isVisible()) return false;
 		int var4 = (this.width - this.xSize) / 2;
 		int var5 = (this.height - this.ySize) / 2;
 		var2 -= var4;
--- net/minecraft/game/world/terrain/feature/TreeFeature.java
+++ net/minecraft/game/world/terrain/feature/TreeFeature.java
@@ -3,12 +3,13 @@
 import java.util.Random;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 
 public class TreeFeature extends Feature {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		int var6 = var2.nextInt(3) + 4;
 		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+		if(var4 >= 1 && var4 + var6 + 1 <= SharedConstants.CHUNK_HEIGHT) {
 			int var8;
 			int var10;
 			int var11;
@@ -25,7 +26,7 @@
 
 				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 128) {
+						if(var8 >= 0 && var8 < SharedConstants.CHUNK_HEIGHT) {
 							var12 = var1.getBlockId(var10, var8, var11);
 							if(var12 != 0 && var12 != Block.leaves.blockID) {
 								var7 = false;
@@ -41,7 +42,7 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < SharedConstants.CHUNK_HEIGHT - var6 - 1) {
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 					int var16;
--- net/minecraft/game/world/terrain/NetherChunkProvider.java
+++ net/minecraft/game/world/terrain/NetherChunkProvider.java
@@ -15,6 +15,7 @@
 import net.minecraft.game.world.terrain.generate.TerrainGenerator;
 import net.minecraft.game.world.terrain.noise.PerlinNoiseOctaves;
 import net.minecraft.util.ProgressUpdate;
+import net.minecraft.util.SharedConstants;
 
 public class NetherChunkProvider implements ChunkProvider {
 	private Random rand;
@@ -49,7 +50,7 @@
 		this.depthNoise = new PerlinNoiseOctaves(this.rand, 16);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3) {
+	public void generateTerrain(int var1, int var2, short[] var3) {
 		byte var4 = 4;
 		byte var5 = 32;
 		int var6 = var4 + 1;
@@ -78,8 +79,8 @@
 						double var39 = (var20 - var16) * var31;
 
 						for(int var41 = 0; var41 < 4; ++var41) {
-							int var42 = var41 + var9 * 4 << 11 | 0 + var10 * 4 << 7 | var11 * 8 + var30;
-							short var43 = 128;
+							int var42 = var41 + var9 * 4 << (SharedConstants.CHUNK_BIT_OFFSET+4) | 0 + var10 * 4 << SharedConstants.CHUNK_BIT_OFFSET | var11 * 8 + var30;
+							int var43 = SharedConstants.CHUNK_HEIGHT;
 							double var44 = 0.25D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
@@ -94,7 +95,7 @@
 									var51 = Block.netherrack.blockID;
 								}
 
-								var3[var42] = (byte)var51;
+								var3[var42] = (short)var51;
 								var42 += var43;
 								var46 += var48;
 							}
@@ -114,8 +115,8 @@
 
 	}
 
-	public void generateSurface(int var1, int var2, byte[] var3) {
-		byte var4 = 64;
+	public void generateSurface(int var1, int var2, short[] var3) {
+		int var4 = 64;
 		double var5 = 1.0D / 32.0D;
 		this.sandNoiseArray = this.beachNoise.generateNoiseArray3D(this.sandNoiseArray, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
 		this.gravelNoiseArray = this.beachNoise.generateNoiseArray3D(this.gravelNoiseArray, (double)(var1 * 16), 109.0134D, (double)(var2 * 16), 16, 1, 16, var5, 1.0D, var5);
@@ -127,46 +128,46 @@
 				boolean var10 = this.gravelNoiseArray[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
 				int var11 = (int)(this.erosionNoiseArray[var7 + var8 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
 				int var12 = -1;
-				byte var13 = (byte)Block.netherrack.blockID;
-				byte var14 = (byte)Block.netherrack.blockID;
+				short var13 = (short)Block.netherrack.blockID;
+				short var14 = (short)Block.netherrack.blockID;
 
 				for(int var15 = 127; var15 >= 0; --var15) {
-					int var16 = (var8 * 16 + var7) * 128 + var15;
+					int var16 = (var8 * 16 + var7) * SharedConstants.CHUNK_HEIGHT + var15;
 					if(var15 >= 127 - this.rand.nextInt(5)) {
-						var3[var16] = (byte)Block.bedrock.blockID;
+						var3[var16] = (short)Block.bedrock.blockID;
 					} else if(var15 <= 0 + this.rand.nextInt(5)) {
-						var3[var16] = (byte)Block.bedrock.blockID;
+						var3[var16] = (short)Block.bedrock.blockID;
 					} else {
-						byte var17 = var3[var16];
+						short var17 = var3[var16];
 						if(var17 == 0) {
 							var12 = -1;
 						} else if(var17 == Block.netherrack.blockID) {
 							if(var12 == -1) {
 								if(var11 <= 0) {
 									var13 = 0;
-									var14 = (byte)Block.netherrack.blockID;
+									var14 = (short)Block.netherrack.blockID;
 								} else if(var15 >= var4 - 4 && var15 <= var4 + 1) {
-									var13 = (byte)Block.netherrack.blockID;
-									var14 = (byte)Block.netherrack.blockID;
-									if(var10) {
-										var13 = (byte)Block.gravel.blockID;
-									}
-
-									if(var10) {
-										var14 = (byte)Block.netherrack.blockID;
-									}
-
-									if(var9) {
-										var13 = (byte)Block.soulSand.blockID;
-									}
-
-									if(var9) {
-										var14 = (byte)Block.soulSand.blockID;
+									var13 = (short)Block.netherrack.blockID;
+									var14 = (short)Block.netherrack.blockID;
+									if(var10) {
+										var13 = (short)Block.gravel.blockID;
+									}
+
+									if(var10) {
+										var14 = (short)Block.netherrack.blockID;
+									}
+
+									if(var9) {
+										var13 = (short)Block.soulSand.blockID;
+									}
+
+									if(var9) {
+										var14 = (short)Block.soulSand.blockID;
 									}
 								}
 
 								if(var15 < var4 && var13 == 0) {
-									var13 = (byte)Block.stillLava.blockID;
+									var13 = (short)Block.stillLava.blockID;
 								}
 
 								var12 = var11;
@@ -193,7 +194,7 @@
 
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
+		short[] var3 = new short[16 * 16 * SharedConstants.CHUNK_HEIGHT];
 		this.generateTerrain(var1, var2, var3);
 		this.generateSurface(var1, var2, var3);
 		this.caves.generate(this, this.worldObj, var1, var2, var3);
--- /dev/null
+++ net/minecraft/game/world/biome/ClimaticVoronoiBiomeSource.java
@@ -1,0 +1,136 @@
+package net.minecraft.game.world.biome;
+
+import java.util.Random;
+import net.minecraft.game.world.World;
+import net.minecraft.game.world.chunk.ChunkCoordIntPair;
+import net.minecraft.game.world.terrain.noise.SimplexNoiseOctaves;
+import net.minecraft.util.FastNoiseLite;
+
+public class ClimaticVoronoiBiomeSource {
+	private SimplexNoiseOctaves temperatureNoise;
+	private SimplexNoiseOctaves humidityNoise;
+	private SimplexNoiseOctaves offsetNoise;
+	public double[] temperature;
+	public double[] humidity;
+	public double[] offset;
+	public double[] distortXMap;
+	public double[] distortZMap;
+	public Biome[] blockGeneratorData;
+
+	private FastNoiseLite idNoise;
+	private final double[] buffer = new double[1];
+
+	protected ClimaticVoronoiBiomeSource() {
+	}
+
+	public ClimaticVoronoiBiomeSource(World var1) {
+		this.temperatureNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 9871L), 4);
+		this.humidityNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 39811L), 4);
+		this.offsetNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 543321L), 2);
+		idNoise = new FastNoiseLite((int)(var1.getRandomSeed() * 1024L));
+		idNoise.SetNoiseType(FastNoiseLite.NoiseType.Cellular);
+		idNoise.SetCellularReturnType(FastNoiseLite.CellularReturnType.CellValue);
+		idNoise.SetCellularDistanceFunction(FastNoiseLite.CellularDistanceFunction.Hybrid);
+		idNoise.SetFractalType(FastNoiseLite.FractalType.None);
+		idNoise.SetDomainWarpType(FastNoiseLite.DomainWarpType.OpenSimplex2Reduced);
+		idNoise.SetDomainWarpAmp(60);
+		idNoise.SetFrequency(1.0F / 400.0F);
+	}
+
+	public Biome getBiomeGenAtChunkCoord(ChunkCoordIntPair var1) {
+		return this.getBiomeGenAt(var1.chunkXPos << 4, var1.chunkZPos << 4);
+	}
+
+	public Biome getBiomeGenAt(int var1, int var2) {
+		return this.getBlockGeneratorData(var1, var2, 1, 1)[0];
+	}
+
+	public double getTemperature(int var1, int var2) {
+		this.temperature = this.temperatureNoise.generateNoiseArray2D(this.temperature, (double)var1, (double)var2, 1, 1, (double)0.025F, (double)0.025F, 0.5D);
+		return this.temperature[0];
+	}
+
+	public Biome[] getBlockGeneratorData(int var1, int var2, int var3, int var4) {
+		this.blockGeneratorData = this.loadBlockGeneratorData(this.blockGeneratorData, var1, var2, var3, var4);
+		return this.blockGeneratorData;
+	}
+
+	public double[] getTemperatures(double[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new double[var4 * var5];
+		}
+
+		var1 = this.temperatureNoise.generateNoiseArray2D(var1, (double)var2, (double)var3, var4, var5, (double)0.025F, (double)0.025F, 0.25D);
+		this.offset = this.offsetNoise.generateNoiseArray2D(this.offset, (double)var2, (double)var3, var4, var5, 0.25D, 0.25D, 0.5882352941176471D);
+		int var6 = 0;
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var5; ++var8) {
+				double var9 = this.offset[var6] * 1.1D + 0.5D;
+				double var11 = 0.01D;
+				double var13 = 1.0D - var11;
+				double var15 = (var1[var6] * 0.15D + 0.7D) * var13 + var9 * var11;
+				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
+				if(var15 < 0.0D) {
+					var15 = 0.0D;
+				}
+
+				if(var15 > 1.0D) {
+					var15 = 1.0D;
+				}
+
+				var1[var6] = var15;
+				++var6;
+			}
+		}
+
+		return var1;
+	}
+
+	public Biome[] loadBlockGeneratorData(Biome[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new Biome[var4 * var5];
+		}
+
+		this.temperature = this.temperatureNoise.generateNoiseArray2D(this.temperature, (double)var2, (double)var3, var4, var4, (double)0.025F, (double)0.025F, 0.25D);
+		this.humidity = this.humidityNoise.generateNoiseArray2D(this.humidity, (double)var2, (double)var3, var4, var4, (double)0.05F, (double)0.05F, 1.0D / 3.0D);
+		this.offset = this.offsetNoise.generateNoiseArray2D(this.offset, (double)var2, (double)var3, var4, var4, 0.25D, 0.25D, 0.5882352941176471D);
+		int var6 = 0;
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var5; ++var8) {
+				double var9 = this.offset[var6] * 1.1D + 0.5D;
+				double var11 = 0.01D;
+				double var13 = 1.0D - var11;
+				double var15 = (this.temperature[var6] * 0.15D + 0.7D) * var13 + var9 * var11;
+				var11 = 0.002D;
+				var13 = 1.0D - var11;
+				double var17 = (this.humidity[var6] * 0.15D + 0.5D) * var13 + var9 * var11;
+				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
+				if(var15 < 0.0D) {
+					var15 = 0.0D;
+				}
+
+				if(var17 < 0.0D) {
+					var17 = 0.0D;
+				}
+
+				if(var15 > 1.0D) {
+					var15 = 1.0D;
+				}
+
+				if(var17 > 1.0D) {
+					var17 = 1.0D;
+				}
+
+				this.temperature[var6] = var15; // category.length
+				this.humidity[var6] = var17;
+				Biome[] category = Biome.getBiomeCategory((float)var15, (float)var17);
+				int id = new Random(Float.floatToIntBits(idNoise.GetNoise(var2 + var7, var3 + var8))).nextInt(category.length);
+				var1[var6++] = category[id];
+			}
+		}
+
+		return var1;
+	}
+}
--- net/minecraft/game/world/block/SaplingBlock.java
+++ net/minecraft/game/world/block/SaplingBlock.java
@@ -8,6 +8,8 @@
 import net.minecraft.game.world.terrain.feature.SpruceTreeFeature;
 import net.minecraft.game.world.terrain.feature.TreeFeature;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class SaplingBlock extends FlowerBlock {
 	protected SaplingBlock(int var1, int var2) {
 		super(var1, var2);
@@ -20,8 +22,8 @@
 			super.updateTick(var1, var2, var3, var4, var5);
 			if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(30) == 0) {
 				int var6 = var1.getBlockMetadata(var2, var3, var4);
-				if((var6 & 8) == 0) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 | 8);
+				if((var6 & 0x80) == 0) {
+					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 | 0x80);
 				} else {
 					this.growTree(var1, var2, var3, var4, var5);
 				}
@@ -31,12 +33,11 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		var2 &= 3;
-		return var2 == 1 ? 63 : (var2 == 2 ? 79 : super.getBlockTextureFromSideAndMetadata(var1, var2));
+		return getAtlasTexture(21,var2 & 0x7f);
 	}
 
 	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4) & 3;
+		int var6 = var1.getBlockMetadata(var2, var3, var4) & 0x7f;
 		var1.setBlock(var2, var3, var4, 0);
 		Object var7 = null;
 		if(var6 == 1) {
--- net/minecraft/network/NetworkReaderThread.java
+++ net/minecraft/network/NetworkReaderThread.java
@@ -33,7 +33,7 @@
 				}
 
 				try {
-					sleep(100L);
+					sleep(2L);
 				} catch (InterruptedException var15) {
 				}
 			} finally {
--- net/minecraft/game/world/block/OreBlock.java
+++ net/minecraft/game/world/block/OreBlock.java
@@ -18,6 +18,11 @@
 	}
 
 	protected int damageDropped(int var1) {
-		return this.blockID == Block.lapisOre.blockID ? 4 : 0;
+		return this.blockID == Block.lapisOre.blockID ? 4 : (this.blockID == Block.coalOre.blockID ? 0 : var1);
+	}
+
+	@Override
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.textureIndex+var2;
 	}
 }
--- /dev/null
+++ net/minecraft/server/MPPlayerDataHandler.java
@@ -1,0 +1,9 @@
+package net.minecraft.server;
+
+import net.minecraft.game.entity.player.PlayerEntity;
+
+public interface MPPlayerDataHandler {
+	void writePlayerData(PlayerEntity var1);
+
+	void readPlayerData(PlayerEntity var1);
+}
--- net/minecraft/client/controller/SurvivalPlayerController.java
+++ net/minecraft/client/controller/SurvivalPlayerController.java
@@ -74,6 +74,9 @@
 
 				Block var6 = Block.blocksList[var5];
 				this.curBlockDamage += var6.blockStrength(this.mc.thePlayer);
+				if(this.mc.theWorld.isCreativeWorld()) {
+					curBlockDamage = 1.0F;
+				}
 				if(this.field_1069_h % 4.0F == 0.0F && var6 != null) {
 					this.mc.sndManager.playSound(var6.stepSound.baseStepSoundDir(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
 				}
@@ -84,7 +87,7 @@
 					this.curBlockDamage = 0.0F;
 					this.prevBlockDamage = 0.0F;
 					this.field_1069_h = 0.0F;
-					this.blockHitWait = 5;
+					this.blockHitWait = this.mc.theWorld.isCreativeWorld() ? 3 : 5;
 				}
 			} else {
 				this.curBlockDamage = 0.0F;
@@ -120,6 +123,6 @@
 
 	public void updateController() {
 		this.prevBlockDamage = this.curBlockDamage;
-		this.mc.sndManager.playRandomMusicIfReady();
+		this.mc.sndManager.playRandomMusicIfReady(this.mc.theWorld.isCreativeWorld());
 	}
 }
--- net/minecraft/game/world/block/SpongeBlock.java
+++ net/minecraft/game/world/block/SpongeBlock.java
@@ -3,10 +3,12 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class SpongeBlock extends Block {
 	protected SpongeBlock(int var1) {
 		super(var1, Material.sponge);
-		this.textureIndex = 48;
+		this.textureIndex = getAtlasTexture(14,3);
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
--- net/minecraft/server/player/ServerPlayerEntity.java
+++ net/minecraft/server/player/ServerPlayerEntity.java
@@ -46,6 +46,7 @@
 import net.minecraft.server.EntityTracker;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.world.WorldServer;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.StringTranslate;
 
 public class ServerPlayerEntity extends PlayerEntity implements ICrafting {
@@ -181,8 +182,8 @@
 				if(var8) {
 					WorldServer var9 = this.mcServer.getWorldManager(this.dimension);
 					this.loadedChunks.remove(var7);
-					this.playerNetServerHandler.sendPacket(new Packet51MapChunk(var7.chunkXPos * 16, 0, var7.chunkZPos * 16, 16, 128, 16, var9));
-					List var5 = var9.getTileEntityList(var7.chunkXPos * 16, 0, var7.chunkZPos * 16, var7.chunkXPos * 16 + 16, 128, var7.chunkZPos * 16 + 16);
+					this.playerNetServerHandler.sendPacket(new Packet51MapChunk(var7.chunkXPos * 16, 0, var7.chunkZPos * 16, 16, SharedConstants.CHUNK_HEIGHT, 16, var9));
+					List var5 = var9.getTileEntityList(var7.chunkXPos * 16, 0, var7.chunkZPos * 16, var7.chunkXPos * 16 + 16, SharedConstants.CHUNK_HEIGHT, var7.chunkZPos * 16 + 16);
 
 					for(int var6 = 0; var6 < var5.size(); ++var6) {
 						this.getTileEntityInfo((TileEntity)var5.get(var6));
@@ -271,6 +272,11 @@
 
 	}
 
+	@Override
+	public void theMostUselessAbstractMethodEver() {
+
+	}
+
 	public void func_22068_s() {
 	}
 
@@ -318,11 +324,11 @@
 	}
 
 	public void displayWorkbenchGUI(int var1, int var2, int var3) {
-		this.getNextWidowId();
-		this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 1, "Crafting", 9));
-		this.craftingInventory = new WorkbenchContainer(this.inventory, this.worldObj, var1, var2, var3);
-		this.craftingInventory.windowId = this.currentWindowId;
-		this.craftingInventory.onCraftGuiOpened(this);
+		//this.getNextWidowId();
+		//this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 1, "Crafting", 9));
+		//this.craftingInventory = new (this.inventory, this.worldObj, var1, var2, var3);
+		//this.craftingInventory.windowId = this.currentWindowId;
+		//this.craftingInventory.onCraftGuiOpened(this);
 	}
 
 	public void displayGUIChest(Inventory var1) {
--- net/minecraft/game/world/terrain/OverworldChunkProvider.java
+++ net/minecraft/game/world/terrain/OverworldChunkProvider.java
@@ -1,8 +1,10 @@
 package net.minecraft.game.world.terrain;
 
+import java.util.Arrays;
 import java.util.Random;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.biome.SwamplandBiome;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.block.SandBlock;
 import net.minecraft.game.world.chunk.Chunk;
@@ -23,7 +25,7 @@
 import net.minecraft.game.world.terrain.generate.TerrainGenCaves;
 import net.minecraft.game.world.terrain.generate.TerrainGenerator;
 import net.minecraft.game.world.terrain.noise.PerlinNoiseOctaves;
-import net.minecraft.util.ProgressUpdate;
+import net.minecraft.util.*;
 
 public class OverworldChunkProvider implements ChunkProvider {
 	private Random rand;
@@ -50,6 +52,11 @@
 	int[][] unusedIntArray = new int[32][32];
 	private double[] generatedTemperatures;
 
+	private FastNoiseLite caveNoodleNoise;
+	private FastNoiseLite caveSurfaceFractals;
+	private FastNoiseLite stoneTypeFractals;
+	private FastNoiseLite swampWaterValueNoise;
+
 	public OverworldChunkProvider(World var1, long var2) {
 		this.worldObj = var1;
 		this.rand = new Random(var2);
@@ -61,13 +68,54 @@
 		this.landNoise = new PerlinNoiseOctaves(this.rand, 10);
 		this.depthNoise = new PerlinNoiseOctaves(this.rand, 16);
 		this.treeNoise = new PerlinNoiseOctaves(this.rand, 8);
-	}
-
-	public void generateTerrain(int var1, int var2, byte[] var3, Biome[] var4, double[] var5) {
-		byte var6 = 4;
-		byte var7 = 64;
+
+		caveNoodleNoise = new FastNoiseLite(rand.nextInt());
+		caveNoodleNoise.SetNoiseType(FastNoiseLite.NoiseType.Cellular);
+		caveNoodleNoise.SetCellularDistanceFunction(FastNoiseLite.CellularDistanceFunction.EuclideanSq);
+		caveNoodleNoise.SetCellularReturnType(FastNoiseLite.CellularReturnType.Distance2Mul);
+		caveNoodleNoise.SetFractalType(FastNoiseLite.FractalType.None);
+
+		caveNoodleNoise.SetFrequency(0.05F);
+		caveSurfaceFractals = new FastNoiseLite(rand.nextInt());
+		caveSurfaceFractals.SetNoiseType(FastNoiseLite.NoiseType.Cellular);
+		caveSurfaceFractals.SetCellularReturnType(FastNoiseLite.CellularReturnType.CellValue);
+		caveSurfaceFractals.SetCellularDistanceFunction(FastNoiseLite.CellularDistanceFunction.Hybrid);
+		caveSurfaceFractals.SetFrequency(0.01F);
+
+		stoneTypeFractals = new FastNoiseLite(rand.nextInt());
+		stoneTypeFractals.SetNoiseType(FastNoiseLite.NoiseType.Cellular);
+		stoneTypeFractals.SetCellularReturnType(FastNoiseLite.CellularReturnType.CellValue);
+		stoneTypeFractals.SetCellularDistanceFunction(FastNoiseLite.CellularDistanceFunction.Hybrid);
+		stoneTypeFractals.SetFrequency(0.01F);
+
+		swampWaterValueNoise = new FastNoiseLite(rand.nextInt());
+		swampWaterValueNoise.SetNoiseType(FastNoiseLite.NoiseType.Perlin);
+		swampWaterValueNoise.SetFrequency(0.25F);
+	}
+
+	public int getTypeFromDouble(double d) {
+		int v = new Random(Double.doubleToLongBits(d)).nextInt(3);
+		return (new int[]{Block.stone.blockID,Block.limestone.blockID,Block.granite.blockID})[v];
+	}
+
+	public void generateTerrain(int var1, int var2, short[] var3, Biome[] var4, double[] var5) {
+		DoubleArray3D base = new DoubleArray3D(5,33,5);
+		for(int x=0; x < base.width; x++) {
+			for(int z =0; z < base.length; z++) {
+				float noiseX = (var1 << 4) + (x*4);
+				float noiseZ = (var2 << 4) + (z*4);
+				for (int y = 0; y < base.height; y++) {
+					base.set(x,y,z,((stoneTypeFractals.GetNoise(noiseX, y*8, noiseZ) + 1F) / 2F));
+				}
+			}
+		}
+		DoubleArray3D res = new DoubleArray3D(16,256,16);
+		AdvMathUtil.nearestNeighbor3DPoints(base,res);
+
+		int var6 = 4;
+		int var7 = 64;
 		int var8 = var6 + 1;
-		byte var9 = 17;
+		int var9 = 17;
 		int var10 = var6 + 1;
 		this.noiseArray = this.initializeNoiseField(this.noiseArray, var1 * var6, 0, var2 * var6, var8, var9, var10);
 
@@ -92,8 +140,8 @@
 						double var41 = (var22 - var18) * var33;
 
 						for(int var43 = 0; var43 < 4; ++var43) {
-							int var44 = var43 + var11 * 4 << 11 | 0 + var12 * 4 << 7 | var13 * 8 + var32;
-							short var45 = 128;
+							int var44 = (var43 + var11 * 4 << (SharedConstants.CHUNK_BIT_OFFSET + 4) | 0 + var12 * 4 << SharedConstants.CHUNK_BIT_OFFSET | var13 * 8 + var32);
+							int var45 = SharedConstants.CHUNK_HEIGHT;
 							double var46 = 0.25D;
 							double var48 = var35;
 							double var50 = (var37 - var35) * var46;
@@ -110,10 +158,12 @@
 								}
 
 								if(var48 > 0.0D) {
-									var55 = Block.stone.blockID;
+									int index = var44 + 64;
+									double sample = res.get((index >> (SharedConstants.CHUNK_BIT_OFFSET + 4)) & 0xf,index % SharedConstants.CHUNK_HEIGHT,(index >> SharedConstants.CHUNK_BIT_OFFSET) & 0xf);
+									var55 = getTypeFromDouble(sample);
 								}
 
-								var3[var44] = (byte)var55;
+								var3[var44 + 64] = (short)var55;
 								var44 += var45;
 								var48 += var50;
 							}
@@ -131,10 +181,18 @@
 			}
 		}
 
+		for(int x=0; x < 16; x++) {
+			for(int z=0; z < 16; z++) {
+				for(int y=0; y < 64; y++) {
+					double sample = res.get(x,y,z);
+					var3[x << (SharedConstants.CHUNK_BIT_OFFSET + 4) | z << SharedConstants.CHUNK_BIT_OFFSET | y] = (short)getTypeFromDouble(sample);
+				}
+			}
+		}
 	}
 
-	public void generateSurface(int var1, int var2, byte[] var3, Biome[] var4) {
-		byte var5 = 64;
+	public void generateSurface(int var1, int var2, short[] var3, Biome[] var4) {
+		int var5 = 128;
 		double var6 = 1.0D / 32.0D;
 		this.sandNoiseArray = this.beachNoise.generateNoiseArray3D(this.sandNoiseArray, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var6, var6, 1.0D);
 		this.gravelNoiseArray = this.beachNoise.generateNoiseArray3D(this.gravelNoiseArray, (double)(var1 * 16), 109.0134D, (double)(var2 * 16), 16, 1, 16, var6, 1.0D, var6);
@@ -147,48 +205,51 @@
 				boolean var12 = this.gravelNoiseArray[var8 + var9 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
 				int var13 = (int)(this.erosionNoiseArray[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
 				int var14 = -1;
-				byte var15 = var10.topBlock;
-				byte var16 = var10.fillerBlock;
+				short var15 = (short)var10.topBlock;
+				short var16 = (short)var10.fillerBlock;
 
-				for(int var17 = 127; var17 >= 0; --var17) {
-					int var18 = (var9 * 16 + var8) * 128 + var17;
+				for(int var17 = SharedConstants.CHUNK_HEIGHT - 1; var17 >= 0; --var17) {
+					int var18 = (var9 * 16 + var8) * SharedConstants.CHUNK_HEIGHT + var17;
 					if(var17 <= 0 + this.rand.nextInt(5)) {
-						var3[var18] = (byte)Block.bedrock.blockID;
+						var3[var18] = (short)Block.bedrock.blockID;
 					} else {
-						byte var19 = var3[var18];
+						short var19 = var3[var18];
 						if(var19 == 0) {
 							var14 = -1;
-						} else if(var19 == Block.stone.blockID) {
+						} else if(var19 == Block.stone.blockID || var19 == Block.limestone.blockID || var19 == Block.granite.blockID) {
 							if(var14 == -1) {
 								if(var13 <= 0) {
 									var15 = 0;
-									var16 = (byte)Block.stone.blockID;
+									var16 = var19;
 								} else if(var17 >= var5 - 4 && var17 <= var5 + 1) {
-									var15 = var10.topBlock;
-									var16 = var10.fillerBlock;
+									var15 = (short)var10.topBlock;
+									var16 = (short)var10.fillerBlock;
 									if(var12) {
 										var15 = 0;
 									}
 
 									if(var12) {
-										var16 = (byte)Block.gravel.blockID;
-									}
-
-									if(var11) {
-										var15 = (byte)Block.sand.blockID;
-									}
-
-									if(var11) {
-										var16 = (byte)Block.sand.blockID;
+										var16 = (short)Block.gravel.blockID;
+									}
+
+									if(var11) {
+										var15 = (short)Block.sand.blockID;
+									}
+
+									if(var11) {
+										var16 = (short)Block.sand.blockID;
 									}
 								}
 
 								if(var17 < var5 && var15 == 0) {
-									var15 = (byte)Block.stillWater.blockID;
+									var15 = (short)Block.stillWater.blockID;
 								}
 
 								var14 = var13;
 								if(var17 >= var5 - 1) {
+									if(var10.name.equals("Swampland")) {
+										var15 = swampWaterValueNoise.GetNoise((var1 << 4) | var9,(var2 << 4) | var8) > 0 ?  (short)Block.flowingWater.blockID : (short)Block.grass.blockID;
+									}
 									var3[var18] = var15;
 								} else {
 									var3[var18] = var16;
@@ -198,7 +259,7 @@
 								var3[var18] = var16;
 								if(var14 == 0 && var16 == Block.sand.blockID) {
 									var14 = this.rand.nextInt(4);
-									var16 = (byte)Block.sandstone.blockID;
+									var16 = (short)Block.sandstone.blockID;
 								}
 							}
 						}
@@ -215,13 +276,14 @@
 
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
+		short[] var3 = new short[16 * 16 * SharedConstants.CHUNK_HEIGHT];
 		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.biomesForGeneration = this.worldObj.getBiomeSource().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
 		double[] var5 = this.worldObj.getBiomeSource().temperature;
 		this.generateTerrain(var1, var2, var3, this.biomesForGeneration, var5);
 		this.generateSurface(var1, var2, var3, this.biomesForGeneration);
-		this.caves.generate(this, this.worldObj, var1, var2, var3);
+		//this.caves.generate(this, this.worldObj, var1, var2, var3);
+		talon$caveGen(this,this.worldObj,var1,var2,var3);
 		var4.generateSkylightMap();
 		return var4;
 	}
@@ -343,92 +405,92 @@
 		int var13;
 		int var14;
 		int var15;
-		if(this.rand.nextInt(4) == 0) {
+		/*if(this.rand.nextInt(4) == 0) {
 			var13 = var4 + this.rand.nextInt(16) + 8;
-			var14 = this.rand.nextInt(128);
+			var14 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var15 = var5 + this.rand.nextInt(16) + 8;
 			(new LakeFeature(Block.stillWater.blockID)).generate(this.worldObj, this.rand, var13, var14, var15);
 		}
 
 		if(this.rand.nextInt(8) == 0) {
 			var13 = var4 + this.rand.nextInt(16) + 8;
-			var14 = this.rand.nextInt(this.rand.nextInt(120) + 8);
+			var14 = this.rand.nextInt(this.rand.nextInt(SharedConstants.CHUNK_HEIGHT - 8) + 8);
 			var15 = var5 + this.rand.nextInt(16) + 8;
 			if(var14 < 64 || this.rand.nextInt(10) == 0) {
 				(new LakeFeature(Block.stillLava.blockID)).generate(this.worldObj, this.rand, var13, var14, var15);
 			}
-		}
+		}*/
 
 		int var16;
 		for(var13 = 0; var13 < 8; ++var13) {
 			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var16 = var5 + this.rand.nextInt(16) + 8;
 			(new DungeonFeature()).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 10; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(128);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var16 = var5 + this.rand.nextInt(16);
 			(new ClayFeature(32)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 20; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(128);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.dirt.blockID, 32, false)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 10; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var13 = 0; var13 < 20; ++var13) {
-			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.coalOre.blockID, 16)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var13 = 0; var13 < 20; ++var13) {
-			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(64);
-			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.ironOre.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
+			var16 = var5 + this.rand.nextInt(16);
+			(new OreFeature(Block.gravel.blockID, 32, false)).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 20; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
+			var16 = var5 + this.rand.nextInt(16);
+			(new OreFeature(Block.coalOre.blockID, 16, true)).generate(this.worldObj, this.rand, var14, var15, var16);
+		}
+
+		for(var13 = 0; var13 < 20; ++var13) {
+			var14 = var4 + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT / 2);
+			var16 = var5 + this.rand.nextInt(16);
+			(new OreFeature(Block.ironOre.blockID, 8, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 2; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(32);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT / 4);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.goldOre.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.goldOre.blockID, 8, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 8; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(16);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT / 8);
 			var16 = var5 + this.rand.nextInt(16);
-			(new OreFeature(Block.redstoneOre.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
+			(new OreFeature(Block.redstoneOre.blockID, 7, true)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
-		for(var13 = 0; var13 < 1; ++var13) {
+		/*for(var13 = 0; var13 < 1; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(16);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT / 8);
 			var16 = var5 + this.rand.nextInt(16);
 			(new OreFeature(Block.diamondOre.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
 		for(var13 = 0; var13 < 1; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
-			var15 = this.rand.nextInt(16) + this.rand.nextInt(16);
+			var15 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT / 8) + this.rand.nextInt(SharedConstants.CHUNK_HEIGHT / 8);
 			var16 = var5 + this.rand.nextInt(16);
 			(new OreFeature(Block.lapisOre.blockID, 6)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
+		}*/
 
 		var11 = 0.5D;
 		var13 = (int)((this.treeNoise.generateNoise2D((double)var4 * var11, (double)var5 * var11) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
@@ -437,7 +499,7 @@
 			++var14;
 		}
 
-		if(var6 == Biome.forest) {
+		/*if(var6 == Biome.forest) {
 			var14 += var13 + 5;
 		}
 
@@ -463,7 +525,9 @@
 
 		if(var6 == Biome.plains) {
 			var14 -= 20;
-		}
+		}*/
+
+		var14 = var6.getTreeCount(var13, var14);
 
 		int var17;
 		for(var15 = 0; var15 < var14; ++var15) {
@@ -474,8 +538,8 @@
 			var18.generate(this.worldObj, this.rand, var16, this.worldObj.getHeightValue(var16, var17), var17);
 		}
 
-		byte var27 = 0;
-		if(var6 == Biome.forest) {
+		int var27 = var6.getFlowerCount();
+		/*if(var6 == Biome.forest) {
 			var27 = 2;
 		}
 
@@ -489,19 +553,19 @@
 
 		if(var6 == Biome.plains) {
 			var27 = 3;
-		}
+		}*/
 
 		int var19;
 		int var25;
 		for(var16 = 0; var16 < var27; ++var16) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
-			var25 = this.rand.nextInt(128);
+			var25 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var19 = var5 + this.rand.nextInt(16) + 8;
 			(new FlowersFeature(Block.flower.blockID)).generate(this.worldObj, this.rand, var17, var25, var19);
 		}
 
 		byte var28 = 0;
-		if(var6 == Biome.forest) {
+		/*if(var6 == Biome.forest) {
 			var28 = 2;
 		}
 
@@ -519,21 +583,21 @@
 
 		if(var6 == Biome.plains) {
 			var28 = 10;
-		}
+		}*/
 
 		int var20;
 		int var21;
-		for(var17 = 0; var17 < var28; ++var17) {
+		/*for(var17 = 0; var17 < var28; ++var17) {
 			byte var26 = 1;
 			if(var6 == Biome.rainforest && this.rand.nextInt(3) != 0) {
 				var26 = 2;
 			}
 
 			var19 = var4 + this.rand.nextInt(16) + 8;
-			var20 = this.rand.nextInt(128);
+			var20 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var21 = var5 + this.rand.nextInt(16) + 8;
 			(new TallGrassFeature(Block.tallGrass.blockID, var26)).generate(this.worldObj, this.rand, var19, var20, var21);
-		}
+		}*/
 
 		var28 = 0;
 		if(var6 == Biome.desert) {
@@ -542,42 +606,42 @@
 
 		for(var17 = 0; var17 < var28; ++var17) {
 			var25 = var4 + this.rand.nextInt(16) + 8;
-			var19 = this.rand.nextInt(128);
+			var19 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var20 = var5 + this.rand.nextInt(16) + 8;
 			(new DeadBushFeature(Block.deadBush.blockID)).generate(this.worldObj, this.rand, var25, var19, var20);
 		}
 
 		if(this.rand.nextInt(2) == 0) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
-			var25 = this.rand.nextInt(128);
+			var25 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var19 = var5 + this.rand.nextInt(16) + 8;
 			(new FlowersFeature(Block.rose.blockID)).generate(this.worldObj, this.rand, var17, var25, var19);
 		}
 
 		if(this.rand.nextInt(4) == 0) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
-			var25 = this.rand.nextInt(128);
+			var25 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var19 = var5 + this.rand.nextInt(16) + 8;
 			(new FlowersFeature(Block.brownMushroom.blockID)).generate(this.worldObj, this.rand, var17, var25, var19);
 		}
 
 		if(this.rand.nextInt(8) == 0) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
-			var25 = this.rand.nextInt(128);
+			var25 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var19 = var5 + this.rand.nextInt(16) + 8;
 			(new FlowersFeature(Block.redMushroom.blockID)).generate(this.worldObj, this.rand, var17, var25, var19);
 		}
 
 		for(var17 = 0; var17 < 10; ++var17) {
 			var25 = var4 + this.rand.nextInt(16) + 8;
-			var19 = this.rand.nextInt(128);
+			var19 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var20 = var5 + this.rand.nextInt(16) + 8;
 			(new ReedFeature()).generate(this.worldObj, this.rand, var25, var19, var20);
 		}
 
 		if(this.rand.nextInt(32) == 0) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
-			var25 = this.rand.nextInt(128);
+			var25 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var19 = var5 + this.rand.nextInt(16) + 8;
 			(new PumpkinFeature()).generate(this.worldObj, this.rand, var17, var25, var19);
 		}
@@ -589,34 +653,34 @@
 
 		for(var25 = 0; var25 < var17; ++var25) {
 			var19 = var4 + this.rand.nextInt(16) + 8;
-			var20 = this.rand.nextInt(128);
+			var20 = this.rand.nextInt(SharedConstants.CHUNK_HEIGHT);
 			var21 = var5 + this.rand.nextInt(16) + 8;
 			(new CactusFeature()).generate(this.worldObj, this.rand, var19, var20, var21);
 		}
 
-		for(var25 = 0; var25 < 50; ++var25) {
+		/*for(var25 = 0; var25 < 50; ++var25) {
 			var19 = var4 + this.rand.nextInt(16) + 8;
-			var20 = this.rand.nextInt(this.rand.nextInt(120) + 8);
+			var20 = this.rand.nextInt(this.rand.nextInt(SharedConstants.CHUNK_HEIGHT - 8) + 8);
 			var21 = var5 + this.rand.nextInt(16) + 8;
 			(new LiquidsFeature(Block.flowingWater.blockID)).generate(this.worldObj, this.rand, var19, var20, var21);
 		}
 
 		for(var25 = 0; var25 < 20; ++var25) {
 			var19 = var4 + this.rand.nextInt(16) + 8;
-			var20 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
+			var20 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(SharedConstants.CHUNK_HEIGHT - 16) + 8) + 8);
 			var21 = var5 + this.rand.nextInt(16) + 8;
 			(new LiquidsFeature(Block.flowingLava.blockID)).generate(this.worldObj, this.rand, var19, var20, var21);
-		}
+		}*/
 
-		this.generatedTemperatures = this.worldObj.getBiomeSource().getTemperatures(this.generatedTemperatures, var4 + 8, var5 + 8, 16, 16);
+		Biome[] biomes = this.worldObj.getBiomeSource().getBlockGeneratorData(var4 + 8, var5 + 8, 16, 16);
 
 		for(var25 = var4 + 8; var25 < var4 + 8 + 16; ++var25) {
 			for(var19 = var5 + 8; var19 < var5 + 8 + 16; ++var19) {
 				var20 = var25 - (var4 + 8);
 				var21 = var19 - (var5 + 8);
 				int var22 = this.worldObj.getTopSolidOrLiquidBlock(var25, var19);
-				double var23 = this.generatedTemperatures[var20 * 16 + var21] - (double)(var22 - 64) / 64.0D * 0.3D;
-				if(var23 < 0.5D && var22 > 0 && var22 < 128 && this.worldObj.isAirBlock(var25, var22, var19) && this.worldObj.getBlockMaterial(var25, var22 - 1, var19).getIsSolid() && this.worldObj.getBlockMaterial(var25, var22 - 1, var19) != Material.ice) {
+				//double var23 = this.generatedTemperatures[var20 * 16 + var21] - (double)(var22 - 64) / 64.0D * 0.3D;
+				if(biomes[var20 * 16 + var21].getEnableSnow() && var22 > 0 && var22 < SharedConstants.CHUNK_HEIGHT && this.worldObj.isAirBlock(var25, var22, var19) && this.worldObj.getBlockMaterial(var25, var22 - 1, var19).getIsSolid() && this.worldObj.getBlockMaterial(var25, var22 - 1, var19) != Material.ice) {
 					this.worldObj.setBlockWithNotify(var25, var22, var19, Block.snowLayer.blockID);
 				}
 			}
@@ -639,5 +703,106 @@
 
 	public String getDebugInfo() {
 		return "RandomLevelSource";
+	}
+
+	public void talon$caveGen(OverworldChunkProvider c, World w, int chunkX, int chunkZ, short[] blocks) {
+		int h = getMaxSurfaceHeight(blocks);
+		boolean[][][] samples = talon$sampleNoise(chunkX,chunkZ,h);
+		for(int x=0; x < 16; x++) {
+			for(int z=0; z < 16; z++) {
+				for(int y=0; y < h; y++) {
+					int index = (x << SharedConstants.CHUNK_BIT_OFFSET + 4) | (z << SharedConstants.CHUNK_BIT_OFFSET) | y;
+					if(samples[x][z][y]) {
+						int val = blocks[index];
+						if (val != Block.flowingWater.blockID && val != Block.stillWater.blockID && val != Block.bedrock.blockID && val != Block.ice.blockID && val != Block.sand.blockID) {
+							if (y < 8) {
+								blocks[index] = (byte) Block.flowingLava.blockID;
+							} else {
+								blocks[index] = 0;
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+
+	public boolean[][][] talon$sampleNoise(int chunkX, int chunkZ, int height) {
+		double[][] surfaceBase = new double[4][4];
+		for(int x=0; x < 4; x++) {
+			for(int z=0; z < 4; z++) {
+				float noiseX = (chunkX << 4) + (x*4);
+				float noiseZ = (chunkZ << 4) + (z*4);
+				float surface = caveSurfaceFractals.GetNoise(noiseX, noiseZ);
+				surfaceBase[x][z] = surface;
+			}
+		}
+		DoubleArray3D base = new DoubleArray3D(5,33,5);
+		for(int x=0; x < base.width; x++) {
+			for(int z =0; z < base.length; z++) {
+				float noiseX = (chunkX << 4) + (x*4);
+				float noiseZ = (chunkZ << 4) + (z*4);
+				for (int y = 0; y < base.height; y++) {
+					base.set(x,y,z,((caveNoodleNoise.GetNoise(noiseX, y*8, noiseZ) + 1F) / 2F));
+				}
+			}
+		}
+		DoubleArray3D interp = new DoubleArray3D(16,256,16);
+		AdvMathUtil.lerp3DPoints(base,interp,4,8);
+		boolean[][][] vals = new boolean[16][16][height];
+		for(int x = 0; x< 16;x++) {
+			for (int z = 0; z < 16; z++) {
+				for (int y = 0; y < height; y++) {
+					double delta = Math.min(32.0, (y - (128.0 - 32.0)) / 32.0);
+					float threshold = y < ((SharedConstants.CHUNK_HEIGHT / 2) - 32) ? 0.085F : (surfaceBase[x >> 2][z >> 2] > 0.75F ? MathHelper.lerp(delta, 0.085F, 0.11F) : MathHelper.lerp(delta, 0.085F, 0.3F));
+					vals[x][z][y] = (interp.get(x,y,z) > threshold);
+				}
+			}
+		}
+		return vals;
+	}
+
+	//tests 6 points in hexagon pattern get max height of chunk
+	private int getMaxSurfaceHeight(short[] chunk)
+	{
+		int max = 0;
+		int[][] testcords = {{2, 6}, {3, 11}, {7, 2}, {9, 13}, {12,4}, {13, 9}};
+
+		for (int n = 0; n < testcords.length; n++)
+		{
+			int testmax = getSurfaceHeight(chunk, testcords[n][0], testcords[n][1]);
+			if(testmax > max)
+			{
+				max = testmax;
+				if(max > SharedConstants.CHUNK_HEIGHT)
+					return max;
+			}
+		}
+		return max;
+	}
+
+	private int getSurfaceHeight(short[] chunk, int localX, int localZ)
+	{
+		// Using a recursive binary search to find the surface
+		return recursiveBinarySurfaceSearch(chunk, localX, localZ, SharedConstants.CHUNK_HEIGHT - 1, 0);
+	}
+
+	// Recursive binary search, this search always converges on the surface in 8 in cycles for the range 255 >= y >= 0
+	private int recursiveBinarySurfaceSearch(short[] chunk, int localX, int localZ, int searchTop, int searchBottom)
+	{
+		int top = searchTop;
+		if (searchTop > searchBottom)
+		{
+			int searchMid = (searchBottom + searchTop) / 2;
+			int index = (localX << SharedConstants.CHUNK_BIT_OFFSET + 4) | (localZ << SharedConstants.CHUNK_BIT_OFFSET) | searchMid;
+			if (chunk[index] != 0)
+			{
+				top = recursiveBinarySurfaceSearch(chunk, localX, localZ, searchTop, searchMid + 1);
+			} else
+			{
+				top = recursiveBinarySurfaceSearch(chunk, localX, localZ, searchMid, searchBottom);
+			}
+		}
+		return top;
 	}
 }
--- /dev/null
+++ net/minecraft/util/MetadataByteArray.java
@@ -1,0 +1,26 @@
+package net.minecraft.util;
+
+public class MetadataByteArray {
+    public final byte[] data;
+    public MetadataByteArray(int var1) {
+        this.data = new byte[var1];
+    }
+
+    public MetadataByteArray(byte[] var1) {
+        this.data = var1;
+    }
+
+    public int getByte(int var1, int var2, int var3) {
+        int index = var1 << (SharedConstants.CHUNK_BIT_OFFSET + 4) | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2;
+        return data[index];
+    }
+
+    public void setByte(int var1, int var2, int var3, int var4) {
+        int index = var1 << (SharedConstants.CHUNK_BIT_OFFSET + 4) | var3 << SharedConstants.CHUNK_BIT_OFFSET | var2;
+        data[index] = (byte)var4;
+    }
+
+    public boolean isValid() {
+        return this.data != null;
+    }
+}
--- net/minecraft/game/world/block/PistonExtensionBlock.java
+++ net/minecraft/game/world/block/PistonExtensionBlock.java
@@ -7,6 +7,8 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class PistonExtensionBlock extends Block {
 	private int overrideTexture = -1;
 
@@ -44,7 +46,7 @@
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
 		int var3 = wrapEight(var2);
-		return var1 == var3 ? (this.overrideTexture >= 0 ? this.overrideTexture : ((var2 & 8) != 0 ? this.textureIndex - 1 : this.textureIndex)) : (var1 == Direction.oppositeFace[var3] ? 107 : 108);
+		return var1 == var3 ? (this.overrideTexture >= 0 ? this.overrideTexture : ((var2 & 8) != 0 ? this.textureIndex - 1 : this.textureIndex)) : (var1 == Direction.oppositeFace[var3] ? getAtlasTexture(28,10) : getAtlasTexture(29,10));
 	}
 
 	public int getRenderType() {
--- net/minecraft/client/gui/component/GuiSlot.java
+++ net/minecraft/client/gui/component/GuiSlot.java
@@ -60,7 +60,7 @@
 		return this.getSize() * this.posZ + this.field_27261_r;
 	}
 
-	protected abstract void drawBackground();
+	protected abstract void drawBackground(float delta);
 
 	protected abstract void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5);
 
@@ -118,7 +118,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawBackground();
+		this.drawBackground(var3);
 		int var4 = this.getSize();
 		int var5 = this.width / 2 + 124;
 		int var6 = var5 + 6;
@@ -186,7 +186,7 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		Tessellator var16 = Tessellator.instance;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/gui/background.png"));
+		/*GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/gui/background.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		float var17 = 32.0F;
 		var16.startDrawingQuads();
@@ -195,7 +195,7 @@
 		var16.addVertexWithUV((double)this.right, (double)this.bottom, 0.0D, (double)((float)this.right / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
 		var16.addVertexWithUV((double)this.right, (double)this.top, 0.0D, (double)((float)this.right / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
 		var16.addVertexWithUV((double)this.left, (double)this.top, 0.0D, (double)((float)this.left / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
-		var16.draw();
+		var16.draw();*/
 		var9 = this.width / 2 - 92 - 16;
 		var10 = this.top + 4 - (int)this.amountScrolled;
 		if(this.field_27262_q) {
--- net/minecraft/game/world/block/BookshelfBlock.java
+++ net/minecraft/game/world/block/BookshelfBlock.java
@@ -3,13 +3,15 @@
 import java.util.Random;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class BookshelfBlock extends Block {
 	public BookshelfBlock(int var1, int var2) {
 		super(var1, var2, Material.wood);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 4 : this.textureIndex;
+		return var1 <= 1 ? getAtlasTexture(16,0) : this.textureIndex;
 	}
 
 	public int quantityDropped(Random var1) {
--- net/minecraft/game/entity/LivingEntity.java
+++ net/minecraft/game/entity/LivingEntity.java
@@ -68,6 +68,10 @@
 	private Entity currentTarget;
 	protected int numTicksToChaseTarget = 0;
 
+	public float groundSpeedMultiplier = 1.0F;
+	public float airSpeedMultiplier = 1.0F;
+	public float swimSpeedMultiplier = 1.0F;
+
 	public LivingEntity(World var1) {
 		super(var1);
 		this.preventEntitySpawning = true;
@@ -417,7 +421,7 @@
 
 	public void onDeath(Entity var1) {
 		if(this.scoreValue >= 0 && var1 != null) {
-			var1.addToPlayerScore(this, this.scoreValue);
+			var1.addEntityToPlayerScore(this, this.scoreValue);
 		}
 
 		if(var1 != null) {
@@ -497,7 +501,7 @@
 			}
 
 			float var9 = 0.16277136F / (var8 * var8 * var8);
-			this.moveFlying(var1, var2, this.onGround ? 0.1F * var9 : 0.02F);
+			this.moveFlying(var1, var2, (this.onGround ? 0.1F * var9 * this.groundSpeedMultiplier : 0.02F * this.airSpeedMultiplier));
 			var8 = 0.91F;
 			if(this.onGround) {
 				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
@@ -540,7 +544,9 @@
 				this.motionY = 0.2D;
 			}
 
-			this.motionY -= 0.08D;
+			if(!this.noClip) {
+				this.motionY -= 0.08D;
+			}
 			this.motionY *= (double)0.98F;
 			this.motionX *= (double)var8;
 			this.motionZ *= (double)var8;
--- net/minecraft/client/render/entity/RenderSnowball.java
+++ net/minecraft/client/render/entity/RenderSnowball.java
@@ -2,6 +2,7 @@
 
 import net.minecraft.client.render.Tessellator;
 import net.minecraft.game.entity.Entity;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -19,10 +20,10 @@
 		GL11.glScalef(0.5F, 0.5F, 0.5F);
 		this.loadTexture("/gui/items.png");
 		Tessellator var10 = Tessellator.instance;
-		float var11 = (float)(this.itemIconIndex % 16 * 16 + 0) / 256.0F;
-		float var12 = (float)(this.itemIconIndex % 16 * 16 + 16) / 256.0F;
-		float var13 = (float)(this.itemIconIndex / 16 * 16 + 0) / 256.0F;
-		float var14 = (float)(this.itemIconIndex / 16 * 16 + 16) / 256.0F;
+		float var11 = (float)(this.itemIconIndex % 32 * 16 + 0) / SharedConstants.ATLAS_SIZE;
+		float var12 = (float)(this.itemIconIndex % 32 * 16 + 16) / SharedConstants.ATLAS_SIZE;
+		float var13 = (float)(this.itemIconIndex / 32 * 16 + 0) / SharedConstants.ATLAS_SIZE;
+		float var14 = (float)(this.itemIconIndex / 32 * 16 + 16) / SharedConstants.ATLAS_SIZE;
 		float var15 = 1.0F;
 		float var16 = 0.5F;
 		float var17 = 0.25F;
--- /dev/null
+++ net/minecraft/util/Triplet.java
@@ -1,0 +1,26 @@
+package net.minecraft.util;
+
+import java.util.Objects;
+
+public class Triplet<T, U, V> {
+    public T left;
+    public U middle;
+    public V right;
+
+    public Triplet(T val, U val2, V val3) {
+        left = val;
+        middle = val2;
+        right = val3;
+    }
+
+    public boolean equals(Object o) {
+        if(o instanceof Triplet) {
+            Triplet<?,?,?> pair = (Triplet<?,?,?>)o;
+            boolean leftEqual = Objects.equals(left, pair.left);
+            boolean midEqual = Objects.equals(middle, pair.middle);
+            boolean rightEqual = Objects.equals(right, pair.right);
+            return leftEqual && midEqual && rightEqual;
+        }
+        return false;
+    }
+}
--- net/minecraft/game/world/block/PumpkinBlock.java
+++ net/minecraft/game/world/block/PumpkinBlock.java
@@ -21,12 +21,12 @@
 		} else if(var1 == 0) {
 			return this.textureIndex;
 		} else {
-			int var3 = this.textureIndex + 1 + 16;
+			int var3 = this.textureIndex + 2;
 			if(this.lit) {
 				++var3;
 			}
 
-			return var2 == 2 && var1 == 2 ? var3 : (var2 == 3 && var1 == 5 ? var3 : (var2 == 0 && var1 == 3 ? var3 : (var2 == 1 && var1 == 4 ? var3 : this.textureIndex + 16)));
+			return var2 == 2 && var1 == 2 ? var3 : (var2 == 3 && var1 == 5 ? var3 : (var2 == 0 && var1 == 3 ? var3 : (var2 == 1 && var1 == 4 ? var3 : this.textureIndex + 1)));
 		}
 	}
 
--- net/minecraft/network/NetClientHandler.java
+++ net/minecraft/network/NetClientHandler.java
@@ -125,7 +125,7 @@
 	public void handleLogin(Packet1Login var1) {
 		this.mc.playerController = new ClientPlayerController(this.mc, this);
 		this.mc.statFileWriter.readStat(StatList.joinMultiplayerStat, 1);
-		this.worldClient = new WorldClient(this, var1.mapSeed, var1.dimension);
+		this.worldClient = new WorldClient(this, var1.mapSeed, var1.dimension, var1.creative);
 		this.worldClient.remoteWorld = true;
 		this.mc.changeWorld1(this.worldClient);
 		this.mc.thePlayer.dimension = var1.dimension;
@@ -554,7 +554,7 @@
 	public void handleRespawnPacket(Packet9Respawn var1) {
 		if(var1.dimension != this.mc.thePlayer.dimension) {
 			this.field_1210_g = false;
-			this.worldClient = new WorldClient(this, this.worldClient.getWorldInfo().getRandomSeed(), var1.dimension);
+			this.worldClient = new WorldClient(this, this.worldClient.getWorldInfo().getRandomSeed(), var1.dimension, var1.creative);
 			this.worldClient.remoteWorld = true;
 			this.mc.changeWorld1(this.worldClient);
 			this.mc.thePlayer.dimension = var1.dimension;
--- net/minecraft/game/entity/monster/SpiderEntity.java
+++ net/minecraft/game/entity/monster/SpiderEntity.java
@@ -12,6 +12,7 @@
 		this.texture = "/mob/spider.png";
 		this.setSize(1.4F, 0.9F);
 		this.moveSpeed = 0.8F;
+		this.scoreValue = 10;
 	}
 
 	public double getMountedYOffset() {
--- net/minecraft/client/render/EntityRenderer.java
+++ net/minecraft/client/render/EntityRenderer.java
@@ -25,6 +25,7 @@
 import net.minecraft.game.world.chunk.ChunkProviderLoadOrGenerate;
 import net.minecraft.game.world.material.Material;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
@@ -73,12 +74,16 @@
 	private float fogColor2;
 	private float fogColor1;
 
+	private float prevFovBoost = 1.0F;
+	private float nextFovBoost = 1.0F;
+
 	public EntityRenderer(Minecraft var1) {
 		this.mc = var1;
 		this.itemRenderer = new ItemRenderer(var1);
 	}
 
 	public void updateRenderer() {
+		this.updateFOV();
 		this.fogColor2 = this.fogColor1;
 		this.field_22227_s = this.field_22228_r;
 		this.field_22225_u = this.field_22226_t;
@@ -155,9 +160,17 @@
 		}
 	}
 
+	private void updateFOV() {
+		float fovBoost = this.mc.thePlayer.getFOVBoost();
+		this.prevFovBoost = this.nextFovBoost;
+		this.nextFovBoost += (fovBoost - this.nextFovBoost) * 0.5F;
+	}
+
 	private float getFOVModifier(float var1) {
+		if(SharedConstants.PANORAMA_SCREENSHOT_MODE) return 90F;
 		LivingEntity var2 = this.mc.renderViewEntity;
 		float var3 = 70.0F;
+		var3 *= this.prevFovBoost + (this.nextFovBoost - this.prevFovBoost) * var1;
 		if(var2.isInsideOfMaterial(Material.water)) {
 			var3 = 60.0F;
 		}
@@ -224,7 +237,7 @@
 				GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * var1 + 180.0F, 0.0F, -1.0F, 0.0F);
 				GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * var1, -1.0F, 0.0F, 0.0F);
 			}
-		} else if(this.mc.gameSettings.thirdPersonView) {
+		} else if(this.mc.gameSettings.thirdPersonView > 0) {
 			double var27 = (double)(this.field_22227_s + (this.field_22228_r - this.field_22227_s) * var1);
 			float var13;
 			float var28;
@@ -237,10 +250,17 @@
 			} else {
 				var28 = var2.rotationYaw;
 				var13 = var2.rotationPitch;
+				float var5 = 0.0F;
 				double var14 = (double)(-MathHelper.sin(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var13 / 180.0F * (float)Math.PI)) * var27;
 				double var16 = (double)(MathHelper.cos(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var13 / 180.0F * (float)Math.PI)) * var27;
 				double var18 = (double)(-MathHelper.sin(var13 / 180.0F * (float)Math.PI)) * var27;
 
+				if (this.mc.gameSettings.thirdPersonView == 2) {
+					var14 = (double)(-MathHelper.sin((var28 + 180.0F) / 180.0F * (float)Math.PI) * MathHelper.cos(-var13 / 180.0F * (float)Math.PI)) * var27;
+					var16 = (double)(MathHelper.cos((var28 + 180.0F) / 180.0F * (float)Math.PI) * MathHelper.cos(-var13 / 180.0F * (float)Math.PI)) * var27;
+					var18 = (double)(-MathHelper.sin(-var13 / 180.0F * (float)Math.PI)) * var27;
+				}
+
 				for(int var20 = 0; var20 < 8; ++var20) {
 					float var21 = (float)((var20 & 1) * 2 - 1);
 					float var22 = (float)((var20 >> 1 & 1) * 2 - 1);
@@ -257,8 +277,13 @@
 					}
 				}
 
+				if (this.mc.gameSettings.thirdPersonView == 2) {
+					var5 = 180.0F;
+					var27 *= -1.0D;
+				}
+
 				GL11.glRotatef(var2.rotationPitch - var13, 1.0F, 0.0F, 0.0F);
-				GL11.glRotatef(var2.rotationYaw - var28, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(var2.rotationYaw - var28 + var5, 0.0F, 1.0F, 0.0F);
 				GL11.glTranslatef(0.0F, 0.0F, (float)(-var27));
 				GL11.glRotatef(var28 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
 				GL11.glRotatef(var13 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
@@ -331,12 +356,12 @@
 			this.setupViewBobbing(var1);
 		}
 
-		if(!this.mc.gameSettings.thirdPersonView && !this.mc.renderViewEntity.isPlayerSleeping() && !this.mc.gameSettings.hideGUI) {
+		if(this.mc.gameSettings.thirdPersonView == 0 && !this.mc.renderViewEntity.isPlayerSleeping() && !this.mc.gameSettings.hideGUI) {
 			this.itemRenderer.renderItemInFirstPerson(var1);
 		}
 
 		GL11.glPopMatrix();
-		if(!this.mc.gameSettings.thirdPersonView && !this.mc.renderViewEntity.isPlayerSleeping()) {
+		if(this.mc.gameSettings.thirdPersonView == 0 && !this.mc.renderViewEntity.isPlayerSleeping()) {
 			this.itemRenderer.renderOverlays(var1);
 			this.hurtCameraEffect(var1);
 		}
@@ -645,9 +670,9 @@
 			if(var14 > 0 && this.random.nextInt(3) < this.rainSoundCounter++) {
 				this.rainSoundCounter = 0;
 				if(var10 > var2.posY + 1.0D && var3.getTopSolidOrLiquidBlock(MathHelper.floor(var2.posX), MathHelper.floor(var2.posZ)) > MathHelper.floor(var2.posY)) {
-					this.mc.theWorld.playSoundEffect(var8, var10, var12, "ambient.weather.rain", 0.1F, 0.5F);
+					this.mc.theWorld.playSoundEffect(var8, var10, var12, "ambient.weather.quiet_rain", 1.0F, 0.5F);
 				} else {
-					this.mc.theWorld.playSoundEffect(var8, var10, var12, "ambient.weather.rain", 0.2F, 1.0F);
+					this.mc.theWorld.playSoundEffect(var8, var10, var12, "ambient.weather.quiet_rain", 1.0F, 1.0F);
 				}
 			}
 
@@ -771,7 +796,7 @@
 							double var39 = (double)((float)var20 + 0.5F) - var3.posZ;
 							float var40 = MathHelper.sqrt(var38 * var38 + var39 * var39) / (float)var16;
 							var8.startDrawingQuads();
-							float var32 = var4.getLightBrightness(var19, 128, var20) * 0.85F + 0.15F;
+							float var32 = var4.getLightBrightness(var19, SharedConstants.CHUNK_HEIGHT, var20) * 0.85F + 0.15F;
 							GL11.glColor4f(var32, var32, var32, ((1.0F - var40 * var40) * 0.5F + 0.5F) * var2);
 							var8.setTranslationD(-var9 * 1.0D, -var11 * 1.0D, -var13 * 1.0D);
 							var8.addVertexWithUV((double)(var19 + 0), (double)var23, (double)var20 + 0.5D, (double)(0.0F * var37), (double)((float)var23 * var37 / 4.0F + var26 * var37));
--- net/minecraft/server/ServerConfigurationManager.java
+++ net/minecraft/server/ServerConfigurationManager.java
@@ -40,7 +40,7 @@
 	private File ipBanFile;
 	private File opFile;
 	private File whitelistPlayersFile;
-	private PlayerDataHandler playerNBTManagerObj;
+	private MPPlayerDataHandler playerNBTManagerObj;
 	private boolean whiteListEnforced;
 
 	public ServerConfigurationManager(MinecraftServer var1) {
@@ -170,7 +170,7 @@
 			var4.setPosition(var4.posX, var4.posY + 1.0D, var4.posZ);
 		}
 
-		var4.playerNetServerHandler.sendPacket(new Packet9Respawn((byte)var4.dimension));
+		var4.playerNetServerHandler.sendPacket(new Packet9Respawn((byte)var4.dimension,var4.worldObj.isCreativeWorld()));
 		var4.playerNetServerHandler.teleportTo(var4.posX, var4.posY, var4.posZ, var4.rotationYaw, var4.rotationPitch);
 		this.func_28170_a(var4, var5);
 		this.getPlayerManager(var4.dimension).addPlayer(var4);
@@ -193,7 +193,7 @@
 
 		var1.dimension = var11;
 		WorldServer var4 = this.mcServer.getWorldManager(var1.dimension);
-		var1.playerNetServerHandler.sendPacket(new Packet9Respawn((byte)var1.dimension));
+		var1.playerNetServerHandler.sendPacket(new Packet9Respawn((byte)var1.dimension,var4.isCreativeWorld()));
 		var2.removePlayer(var1);
 		var1.isDead = false;
 		double var5 = var1.posX;
--- net/minecraft/game/world/block/DoorBlock.java
+++ net/minecraft/game/world/block/DoorBlock.java
@@ -9,13 +9,16 @@
 import net.minecraft.game.world.MovingObjectPosition;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
+import net.minecraft.util.SharedConstants;
+
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
 
 public class DoorBlock extends Block {
 	protected DoorBlock(int var1, Material var2) {
 		super(var1, var2);
-		this.textureIndex = 97;
+		this.textureIndex = getAtlasTexture(28,6);
 		if(var2 == Material.iron) {
-			++this.textureIndex;
+			this.textureIndex = getAtlasTexture(30,0);
 		}
 
 		float var3 = 0.5F;
@@ -27,11 +30,11 @@
 		if(var1 != 0 && var1 != 1) {
 			int var3 = this.getState(var2);
 			if((var3 == 0 || var3 == 2) ^ var1 <= 3) {
-				return this.textureIndex;
+				return this.textureIndex + 1;
 			} else {
 				int var4 = var3 / 2 + (var1 & 1 ^ var3);
 				var4 += (var2 & 4) / 4;
-				int var5 = this.textureIndex - (var2 & 8) * 2;
+				int var5 = (var2 & 8) != 0 ? this.textureIndex : this.textureIndex + 1;
 				if((var4 & 1) != 0) {
 					var5 = -var5;
 				}
@@ -39,7 +42,7 @@
 				return var5;
 			}
 		} else {
-			return this.textureIndex;
+			return this.textureIndex + 1;
 		}
 	}
 
@@ -112,7 +115,7 @@
 
 				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
 				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
-				var1.playAuxEffect(var5, 1003, var2, var3, var4, 0);
+				var1.playAuxEffect(var5, 1003, var2, var3, var4, isOpen(var6) ? 1 : 0);
 				return true;
 			}
 		}
@@ -134,7 +137,7 @@
 
 				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
 				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
-				var1.playAuxEffect((PlayerEntity)null, 1003, var2, var3, var4, 0);
+				var1.playAuxEffect((PlayerEntity)null, 1003, var2, var3, var4, isOpen(var6) ? 1 : 0);
 			}
 		}
 	}
@@ -160,7 +163,7 @@
 				var1.setBlockWithNotify(var2, var3, var4, 0);
 				var7 = true;
 				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, 0);
+					var1.setBlockWithNotify(var2, var3 + 1, var4, isOpen(var6) ? 1 : 0);
 				}
 			}
 
@@ -190,7 +193,7 @@
 	}
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 127 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+		return var3 >= (SharedConstants.CHUNK_HEIGHT-1) ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
 	}
 
 	public static boolean isOpen(int var0) {
--- net/minecraft/game/world/block/tileentity/DispenserTileEntity.java
+++ net/minecraft/game/world/block/tileentity/DispenserTileEntity.java
@@ -103,7 +103,7 @@
 	}
 
 	public int getStackLimit() {
-		return 64;
+		return 100;
 	}
 
 	public boolean canInteractWith(PlayerEntity var1) {
--- net/minecraft/game/item/PaintingItem.java
+++ net/minecraft/game/item/PaintingItem.java
@@ -34,7 +34,8 @@
 					var3.entityJoinedWorld(var9);
 				}
 
-				--var1.count;
+				if(!var3.isCreativeWorld())
+					--var1.count;
 			}
 
 			return true;
--- net/minecraft/client/controller/PlayerController.java
+++ net/minecraft/client/controller/PlayerController.java
@@ -27,10 +27,11 @@
 	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
 		World var5 = this.mc.theWorld;
 		Block var6 = Block.blocksList[var5.getBlockId(var1, var2, var3)];
-		var5.playAuxEffect(2001, var1, var2, var3, var6.blockID + var5.getBlockMetadata(var1, var2, var3) * 256);
+		var5.playAuxEffect(2001, var1, var2, var3, var6.blockID | (var5.getBlockMetadata(var1, var2, var3) << 16));
 		int var7 = var5.getBlockMetadata(var1, var2, var3);
 		boolean var8 = var5.setBlockWithNotify(var1, var2, var3, 0);
 		if(var6 != null && var8) {
+			mc.thePlayer.addToPlayerScore(1);
 			var6.onBlockDestroyedByPlayer(var5, var1, var2, var3, var7);
 		}
 
--- net/minecraft/game/item/SeedsItem.java
+++ net/minecraft/game/item/SeedsItem.java
@@ -19,7 +19,8 @@
 			int var8 = var3.getBlockId(var4, var5, var6);
 			if(var8 == Block.farmland.blockID && var3.isAirBlock(var4, var5 + 1, var6)) {
 				var3.setBlockWithNotify(var4, var5 + 1, var6, this.block);
-				--var1.count;
+				if(!var3.isCreativeWorld())
+					--var1.count;
 				return true;
 			} else {
 				return false;
--- /dev/null
+++ net/minecraft/game/world/block/mechanical/AxleBlock.java
@@ -1,0 +1,341 @@
+package net.minecraft.game.world.block.mechanical;
+
+import net.minecraft.client.render.RenderBlocks;
+import net.minecraft.game.entity.misc.ItemEntity;
+import net.minecraft.game.item.Item;
+import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.physics.AxisAlignedBB;
+import net.minecraft.game.world.BlockAccess;
+import net.minecraft.game.world.BlockPos;
+import net.minecraft.game.world.World;
+import net.minecraft.game.world.block.Block;
+import net.minecraft.game.world.material.Material;
+
+import javax.swing.text.html.BlockView;
+
+import java.util.Random;
+
+import static net.minecraft.util.SharedConstants.CUSTOM_RENDER_TYPE;
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
+public class AxleBlock extends Block {
+    private static RenderBlocks previousRenderer;
+
+    public AxleBlock(int var1) {
+        super(var1, Material.wood);
+        this.textureIndex = getAtlasTexture(26,6);
+        this.setTickOnLoad(true);
+    }
+
+    public int getRenderType() {
+        return CUSTOM_RENDER_TYPE;
+    }
+
+    @Override
+    public boolean isOpaqueCube() {
+        return false;
+    }
+
+    @Override
+    public boolean renderAsNormalBlock() {
+        return false;
+    }
+
+    @Override
+    public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int i, int j, int k) {
+        int metadata = var1.getBlockMetadata(i,j,k);
+        if((metadata & 3) == 0) {
+            return AxisAlignedBB.getBoundingBoxFromPool(((float)i + 0.5F) - 0.125F, (float)j, ((float)k + 0.5F) - 0.125F, (float)i + 0.5F + 0.125F, (float)j + 1.0F, (float)k + 0.5F + 0.125F);
+        } else if((metadata & 3) == 1)  {
+            return AxisAlignedBB.getBoundingBoxFromPool(((float)i + 0.5F) - 0.125F, ((float)j + 0.5F) - 0.125F, (float)k, (float)i + 0.5F + 0.125F, (float)j + 0.5F + 0.125F, (float)k + 1.0F);
+        }
+        return AxisAlignedBB.getBoundingBoxFromPool((float)i, ((float)j + 0.5F) - 0.125F, ((float)k + 0.5F) - 0.125F, (float)i + 1.0F, (float)j + 0.5F + 0.125F, (float)k + 0.5F + 0.125F);
+    }
+
+    @Override
+    public void setBlockBoundsBasedOnState(BlockAccess var1, int var2, int var3, int var4) {
+        int metadata = var1.getBlockMetadata(var2,var3,var4);
+        if((metadata & 3) == 0) {
+            setBlockBounds(0.375F, 0.0F, 0.375F, 0.625F, 1.0F, 0.625F);
+        } else if((metadata & 3) == 1)  {
+            setBlockBounds(0.375F,0.375F,0.0F,0.625F,0.625F,1.0F);
+        } else {
+            setBlockBounds(0.0F, 0.375F, 0.375F, 1.0F, 0.625F, 0.625F);
+        }
+    }
+
+    public void setBlockBoundsForItemRender() {
+        setBlockBounds(0.375F,0.375F,0.0F,0.625F,0.625F,1.0F);
+    }
+
+    @Override
+    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+        boolean powered = (var2 & 0x1c) > 0;
+        if((var2 & 3) == 0) {
+            if(var1 < 2)
+                return getAtlasTexture(16,0);
+            return getAtlasTexture(26+(powered ? 1 : 0), 6);
+        } else if((var2 & 3) == 1) {
+            if(var1 == 2 || var1 == 3)
+                return getAtlasTexture(16,0);
+            return getAtlasTexture(26+(powered ? 1 : 0), 6);
+        } else if((var2 & 3) == 2) {
+            if(var1 == 4 || var1 == 5)
+                return getAtlasTexture(16,0);
+            return getAtlasTexture(26+(powered ? 1 : 0),6);
+        }
+        return 0;
+    }
+
+    public boolean renderCustom(RenderBlocks render, BlockAccess access, int x, int y, int z) {
+        int metadata = access.getBlockMetadata(x,y,z);
+        int a = render.eastUVRotate;
+        int b = render.westUVRotate;
+        int c = render.southUVRotate;
+        int d = render.northUVRotate;
+        int e = render.bottomUVRotate;
+        int f = render.topUVRotate;
+        if((metadata & 3) == 0) {
+            this.setBlockBounds(0.375F, 0.0F, 0.375F, 0.625F, 1.0F, 0.625F);
+            render.eastUVRotate = 0;
+            render.westUVRotate = 0;
+            render.southUVRotate = 0;
+            render.northUVRotate = 0;
+            render.bottomUVRotate = 0;
+            render.topUVRotate = 0;
+        } else if((metadata & 3) == 1)  {
+            render.eastUVRotate = 0;
+            render.westUVRotate = 0;
+            render.topUVRotate = 0;
+            render.southUVRotate = 2;
+            render.northUVRotate = 2;
+            render.bottomUVRotate = 3;
+            this.setBlockBounds(0.375F,0.375F,0.0F,0.625F,0.625F,1.0F);
+        } else if((metadata & 3) == 2)  {
+            render.eastUVRotate = 1;
+            render.westUVRotate = 1;
+            render.bottomUVRotate = 1;
+            render.topUVRotate = 1;
+            render.southUVRotate = 0;
+            render.northUVRotate = 0;
+            this.setBlockBounds(0.0F,0.375F,0.375F,1.0F,0.625F,0.625F);
+        }
+        render.renderStandardBlock(this,x,y,z);
+        render.eastUVRotate = a;
+        render.westUVRotate = b;
+        render.southUVRotate = c;
+        render.northUVRotate = d;
+        render.bottomUVRotate = e;
+        render.topUVRotate = f;
+        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        return true;
+    }
+
+    public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
+        //var1.getClosestPlayer(var2,var3,var4).addChatMessage("Direction: "+var5);
+        switch(var5) {
+            case 0: // Y Dominant
+            case 1:
+                var1.setBlockMetadataWithNotify(var2,var3,var4,0);
+                break;
+            case 2: // Z Dominant
+            case 3:
+                var1.setBlockMetadataWithNotify(var2,var3,var4,1);
+                break;
+            case 4: // X Dominant
+            case 5:
+                var1.setBlockMetadataWithNotify(var2,var3,var4,2);
+                break;
+        }
+    }
+
+    public void onBlockAdded(World var1, int var2, int var3, int var4) {
+        super.onBlockAdded(var1,var2,var3,var4);
+        setPowerLevel(var1,var2,var3,var4,0);
+        var1.scheduleUpdateTick(var2, var3, var4, blockID, tickRate());
+    }
+
+    public void setPowerLevel(World w, int x, int y, int z, int power) {
+        w.setBlockMetadataWithNotify(x,y,z,(w.getBlockMetadata(x,y,z) & 0x3) | (power << 2));
+        w.markBlocksDirty(x,y,z,x,y,z);
+    }
+
+    public int getPowerLevel(BlockAccess w, int x, int y, int z) {
+        return (w.getBlockMetadata(x,y,z) & 0x1c) >> 2;
+    }
+
+    public int getAlignment(BlockAccess w, int x, int y, int z) {
+        return (w.getBlockMetadata(x,y,z) & 0x3);
+    }
+
+    public void onNeighborBlockChange(World world, int i, int j, int k, int iid) {
+        powerCheck(world, i, j, k);
+    }
+
+    public void updateTick(World world, int i, int j, int k, Random random) {
+        powerCheck(world, i, j, k);
+    }
+
+    public static void ejectStackWithRandomOffset(World world, int i, int j, int k, ItemStack stack)
+    {
+        float xOffset = world.rand.nextFloat() * 0.7F + 0.15F;
+        float yOffset = world.rand.nextFloat() * 0.2F + 0.1F;
+        float zOffset = world.rand.nextFloat() * 0.7F + 0.15F;
+        ItemEntity entityitem = new ItemEntity(world, (float)i + xOffset, (float)j + yOffset, (float)k + zOffset, stack);
+        float velocityFactor = 0.05F;
+        entityitem.motionX = (float)world.rand.nextGaussian() * velocityFactor;
+        entityitem.motionY = (float)world.rand.nextGaussian() * velocityFactor + 0.2F;
+        entityitem.motionZ = (float)world.rand.nextGaussian() * velocityFactor;
+        entityitem.delayBeforeCanPickup = 10;
+        world.entityJoinedWorld(entityitem);
+    }
+
+    public void powerCheck(World w, int x, int y, int z) {
+        BlockPos[] targets = new BlockPos[2];
+        int power = getPowerLevel(w,x,y,z);
+        int alignment = getAlignment(w,x,y,z);
+        if(power < 4) {
+            targets[0] = new BlockPos(x,y,z);
+            targets[1] = new BlockPos(x,y,z);
+            switch(alignment)
+            {
+                case 0:
+                    targets[0] = new BlockPos(x,y-1,z);
+                    targets[1] = new BlockPos(x,y+1,z);
+                    break;
+
+                case 1:
+                    targets[0] = new BlockPos(x,y,z-1);
+                    targets[1] = new BlockPos(x,y,z+1);
+                    break;
+
+                default:
+                    targets[0] = new BlockPos(x-1,y,z);
+                    targets[1] = new BlockPos(x+1,y,z);
+                    break;
+            }
+            int iMaxNeighborPower = 0;
+            int iGreaterPowerNeighbors = 0;
+            for(int tempSource = 0; tempSource < 2; tempSource++)
+            {
+                int iTempid = w.getBlockId(targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                if(iTempid != Block.axle.blockID)
+                {
+                    continue;
+                }
+                int iTempAxis = getAlignment(w, targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                if(iTempAxis != alignment)
+                {
+                    continue;
+                }
+                int iTempPowerLevel = getPowerLevel(w, targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                if(iTempPowerLevel > iMaxNeighborPower)
+                {
+                    iMaxNeighborPower = iTempPowerLevel;
+                }
+                if(iTempPowerLevel > power)
+                {
+                    iGreaterPowerNeighbors++;
+                }
+            }
+            int iNewPower = power;
+            if(iMaxNeighborPower > power)
+            {
+                if(iMaxNeighborPower == 1)
+                {
+                    for(int iTemp = 0; iTemp < 5; iTemp++)
+                    {
+                        ejectStackWithRandomOffset(w, x, y, z, new ItemStack(Item.string,1));
+                    }
+
+                    for(int iTemp = 0; iTemp < 2; iTemp++)
+                    {
+                        ejectStackWithRandomOffset(w, x, y, z, new ItemStack(Item.stick,1));
+                    }
+                    w.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.explode", 1000000F, 1.25F);
+                    w.setBlockWithNotify(x,y,z,0);
+                    return;
+                }
+                iNewPower = iMaxNeighborPower - 1;
+            } else
+            {
+                iNewPower = 0;
+            }
+            if(iNewPower != power) {
+                setPowerLevel(w,x,y,z,iNewPower);
+            }
+        }
+    }
+
+    public boolean isAxleTowardsFacing(BlockAccess w, int i, int j, int k, int iFacing)
+    {
+        int iAxis = getAlignment(w, i, j, k);
+        switch(iAxis)
+        {
+            case 0: // '\0'
+                if(iFacing == 0 || iFacing == 1)
+                {
+                    return true;
+                }
+                break;
+
+            case 1: // '\001'
+                if(iFacing == 2 || iFacing == 3)
+                {
+                    return true;
+                }
+                break;
+
+            default:
+                if(iFacing == 4 || iFacing == 5)
+                {
+                    return true;
+                }
+                break;
+        }
+        return false;
+    }
+
+    public void overpower(World w, int x, int y, int z) {
+        BlockPos[] targets = new BlockPos[2];
+        int power = getPowerLevel(w, x, y, z);
+        int alignment = getAlignment(w, x, y, z);
+        if (power < 4) {
+            targets[0] = new BlockPos(x, y, z);
+            targets[1] = new BlockPos(x, y, z);
+            switch (alignment) {
+                case 0:
+                    targets[0] = new BlockPos(x, y - 1, z);
+                    targets[1] = new BlockPos(x, y + 1, z);
+                    break;
+
+                case 1:
+                    targets[0] = new BlockPos(x, y, z - 1);
+                    targets[1] = new BlockPos(x, y, z + 1);
+                    break;
+
+                default:
+                    targets[0] = new BlockPos(x - 1, y, z);
+                    targets[1] = new BlockPos(x + 1, y, z);
+                    break;
+            }
+            for (int tempSource = 0; tempSource < 2; tempSource++) {
+                int iTempid = w.getBlockId(targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                if (iTempid == Block.axle.blockID) {
+                    int iTempAxis = getAlignment(w, targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                    if (iTempAxis != alignment) {
+                        continue;
+                    }
+                    int iTempPowerLevel = getPowerLevel(w, targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                    if (iTempPowerLevel < power) {
+                        overpower(w, targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                    }
+                    continue;
+                }
+                if (iTempid == Block.gearbox.blockID) {
+                    ((GearboxBlock) Block.gearbox).overpower(w, targets[tempSource].x, targets[tempSource].y, targets[tempSource].z);
+                }
+            }
+        }
+    }
+}
--- net/minecraft/client/gui/DownloadTerrainScreen.java
+++ net/minecraft/client/gui/DownloadTerrainScreen.java
@@ -36,7 +36,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.drawBackground(0);
+		this.drawBackground(0,var3);
 		StringTranslate var4 = StringTranslate.getInstance();
 		this.drawCenteredString(this.fontRenderer, var4.translateKey("multiplayer.downloadingTerrain"), this.width / 2, this.height / 2 - 50, 16777215);
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/game/world/block/NoteBlock.java
+++ net/minecraft/game/world/block/NoteBlock.java
@@ -6,9 +6,11 @@
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class NoteBlock extends ContainerBlock {
 	public NoteBlock(int var1) {
-		super(var1, 74, Material.wood);
+		super(var1, getAtlasTexture(26,3), Material.wood);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
--- net/minecraft/game/item/recipe/RecipesFood.java
+++ net/minecraft/game/item/recipe/RecipesFood.java
@@ -6,8 +6,8 @@
 
 public class RecipesFood {
 	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.brownMushroom, Character.valueOf('Y'), Block.redMushroom, Character.valueOf('#'), Item.bowlEmpty});
+		/*var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.brownMushroom, Character.valueOf('Y'), Block.redMushroom, Character.valueOf('#'), Item.bowlEmpty});
 		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.redMushroom, Character.valueOf('Y'), Block.brownMushroom, Character.valueOf('#'), Item.bowlEmpty});
-		var1.addRecipe(new ItemStack(Item.cookie, 8), new Object[]{"#X#", Character.valueOf('X'), new ItemStack(Item.dye, 1, 3), Character.valueOf('#'), Item.wheat});
+		var1.addRecipe(new ItemStack(Item.cookie, 8), new Object[]{"#X#", Character.valueOf('X'), new ItemStack(Item.dye, 1, 3), Character.valueOf('#'), Item.wheat});*/
 	}
 }
--- net/minecraft/game/world/biome/ClimaticBiomeSource.java
+++ /dev/null
@@ -1,120 +1,0 @@
-package net.minecraft.game.world.biome;
-
-import java.util.Random;
-import net.minecraft.game.world.World;
-import net.minecraft.game.world.chunk.ChunkCoordIntPair;
-import net.minecraft.game.world.terrain.noise.SimplexNoiseOctaves;
-
-public class ClimaticBiomeSource {
-	private SimplexNoiseOctaves temperatureNoise;
-	private SimplexNoiseOctaves humidityNoise;
-	private SimplexNoiseOctaves offsetNoise;
-	public double[] temperature;
-	public double[] humidity;
-	public double[] offset;
-	public Biome[] blockGeneratorData;
-
-	protected ClimaticBiomeSource() {
-	}
-
-	public ClimaticBiomeSource(World var1) {
-		this.temperatureNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 9871L), 4);
-		this.humidityNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 39811L), 4);
-		this.offsetNoise = new SimplexNoiseOctaves(new Random(var1.getRandomSeed() * 543321L), 2);
-	}
-
-	public Biome getBiomeGenAtChunkCoord(ChunkCoordIntPair var1) {
-		return this.getBiomeGenAt(var1.chunkXPos << 4, var1.chunkZPos << 4);
-	}
-
-	public Biome getBiomeGenAt(int var1, int var2) {
-		return this.getBlockGeneratorData(var1, var2, 1, 1)[0];
-	}
-
-	public double getTemperature(int var1, int var2) {
-		this.temperature = this.temperatureNoise.generateNoiseArray2D(this.temperature, (double)var1, (double)var2, 1, 1, (double)0.025F, (double)0.025F, 0.5D);
-		return this.temperature[0];
-	}
-
-	public Biome[] getBlockGeneratorData(int var1, int var2, int var3, int var4) {
-		this.blockGeneratorData = this.loadBlockGeneratorData(this.blockGeneratorData, var1, var2, var3, var4);
-		return this.blockGeneratorData;
-	}
-
-	public double[] getTemperatures(double[] var1, int var2, int var3, int var4, int var5) {
-		if(var1 == null || var1.length < var4 * var5) {
-			var1 = new double[var4 * var5];
-		}
-
-		var1 = this.temperatureNoise.generateNoiseArray2D(var1, (double)var2, (double)var3, var4, var5, (double)0.025F, (double)0.025F, 0.25D);
-		this.offset = this.offsetNoise.generateNoiseArray2D(this.offset, (double)var2, (double)var3, var4, var5, 0.25D, 0.25D, 0.5882352941176471D);
-		int var6 = 0;
-
-		for(int var7 = 0; var7 < var4; ++var7) {
-			for(int var8 = 0; var8 < var5; ++var8) {
-				double var9 = this.offset[var6] * 1.1D + 0.5D;
-				double var11 = 0.01D;
-				double var13 = 1.0D - var11;
-				double var15 = (var1[var6] * 0.15D + 0.7D) * var13 + var9 * var11;
-				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
-				if(var15 < 0.0D) {
-					var15 = 0.0D;
-				}
-
-				if(var15 > 1.0D) {
-					var15 = 1.0D;
-				}
-
-				var1[var6] = var15;
-				++var6;
-			}
-		}
-
-		return var1;
-	}
-
-	public Biome[] loadBlockGeneratorData(Biome[] var1, int var2, int var3, int var4, int var5) {
-		if(var1 == null || var1.length < var4 * var5) {
-			var1 = new Biome[var4 * var5];
-		}
-
-		this.temperature = this.temperatureNoise.generateNoiseArray2D(this.temperature, (double)var2, (double)var3, var4, var4, (double)0.025F, (double)0.025F, 0.25D);
-		this.humidity = this.humidityNoise.generateNoiseArray2D(this.humidity, (double)var2, (double)var3, var4, var4, (double)0.05F, (double)0.05F, 1.0D / 3.0D);
-		this.offset = this.offsetNoise.generateNoiseArray2D(this.offset, (double)var2, (double)var3, var4, var4, 0.25D, 0.25D, 0.5882352941176471D);
-		int var6 = 0;
-
-		for(int var7 = 0; var7 < var4; ++var7) {
-			for(int var8 = 0; var8 < var5; ++var8) {
-				double var9 = this.offset[var6] * 1.1D + 0.5D;
-				double var11 = 0.01D;
-				double var13 = 1.0D - var11;
-				double var15 = (this.temperature[var6] * 0.15D + 0.7D) * var13 + var9 * var11;
-				var11 = 0.002D;
-				var13 = 1.0D - var11;
-				double var17 = (this.humidity[var6] * 0.15D + 0.5D) * var13 + var9 * var11;
-				var15 = 1.0D - (1.0D - var15) * (1.0D - var15);
-				if(var15 < 0.0D) {
-					var15 = 0.0D;
-				}
-
-				if(var17 < 0.0D) {
-					var17 = 0.0D;
-				}
-
-				if(var15 > 1.0D) {
-					var15 = 1.0D;
-				}
-
-				if(var17 > 1.0D) {
-					var17 = 1.0D;
-				}
-
-				this.temperature[var6] = var15;
-				this.humidity[var6] = var17;
-				var1[var6++] = Biome.getBiomeFromLookup(var15, var17);
-			}
-		}
-
-		return var1;
-	}
-}
--- /dev/null
+++ net/minecraft/client/gui/PanoramaRenderer.java
@@ -1,0 +1,152 @@
+package net.minecraft.client.gui;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.render.Tessellator;
+import net.minecraft.util.MathHelper;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.glu.GLU;
+
+import java.awt.image.BufferedImage;
+import java.util.Random;
+
+public class PanoramaRenderer extends Gui {
+    public boolean init = false;
+    int panoramaTexture;
+    public int panoramaCounter = 0;
+    private Tessellator tessellator;
+
+    private int selectedPanorama = 0;
+
+    public PanoramaRenderer(Minecraft mc) {
+        tessellator = Tessellator.instance;
+        this.panoramaTexture = mc.textureRegistry.allocateAndSetupTexture(new BufferedImage(256, 256, 2));
+        selectedPanorama = new Random().nextInt(3);
+    }
+
+    public void drawPanorama(Minecraft mc, int width, int height, float zLevel, float delta) {
+        float fwidth = (float)width;
+        float fheight = (float)height;
+        GL11.glViewport(0, 0, 256, 256);
+        drawPanorama(mc,delta);
+        GL11.glDisable(GL11.GL_TEXTURE_2D);
+        GL11.glEnable(GL11.GL_TEXTURE_2D);
+        for (int i = 0; i < 8; i++) {
+            rotateAndBlurSkybox(fwidth,fheight,zLevel);
+        }
+        GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+        tessellator.startDrawingQuads();
+
+        float var5 = fwidth > fheight ? (120.0F / fwidth) : (120.0F / fheight);
+        float var6 = fheight * var5 / 256.0F;
+        float var7 = fwidth * var5 / 256.0F;
+        tessellator.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
+        tessellator.addVertexWithUV(0.0D, height, zLevel, 0.5F - var6, 0.5F + var7);
+        tessellator.addVertexWithUV(width, height, zLevel, 0.5F - var6, 0.5F - var7);
+        tessellator.addVertexWithUV(width, 0.0D, zLevel, 0.5F + var6, 0.5F - var7);
+        tessellator.addVertexWithUV(0.0D, 0.0D, zLevel, 0.5F + var6, 0.5F + var7);
+        tessellator.draw();
+
+        // Scaling filter
+        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+    }
+
+    private void rotateAndBlurSkybox(float fwidth, float fheight, float zLevel) {
+        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.panoramaTexture);
+        GL11.glCopyTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 0, 0, 256, 256);
+
+        // Without this, Panorama breaks when blur is enabled on AMD drivers :abyss:
+        GL11.glEnable(GL11.GL_BLEND);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        GL11.glColorMask(true, true, true, false);
+
+        tessellator.startDrawingQuads();
+        for (int i = 0; i < 3; ++i) {
+                tessellator.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F / (float) (i + 1)); //BLURRY FILTER
+            float var7 = (float) (i - 3 / 2) / 256.0F;
+            tessellator.addVertexWithUV(fwidth, fheight, zLevel, 0.0F + var7, 0.0D);
+            tessellator.addVertexWithUV(fwidth, 0.0D, zLevel, 1.0F + var7, 0.0D);
+            tessellator.addVertexWithUV(0.0D, 0.0D, zLevel, 1.0F + var7, 1.0D);
+            tessellator.addVertexWithUV(0.0D, fheight, zLevel, 0.0F + var7, 1.0D);
+        }
+        tessellator.draw();
+
+        GL11.glColorMask(true, true, true, true);
+    }
+
+    private void drawPanorama(Minecraft mc, float delta) {
+        GL11.glMatrixMode(GL11.GL_PROJECTION);
+        GL11.glPushMatrix();
+        GL11.glLoadIdentity();
+        GLU.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
+        GL11.glMatrixMode(GL11.GL_MODELVIEW);
+        GL11.glPushMatrix();
+        GL11.glLoadIdentity();
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
+        GL11.glEnable(GL11.GL_BLEND);
+        GL11.glDisable(GL11.GL_ALPHA_TEST);
+        GL11.glDisable(GL11.GL_CULL_FACE);
+        GL11.glDepthMask(false);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        byte var5 = 8;
+
+        for (int var6 = 0; var6 < var5 * var5; ++var6) {
+            GL11.glPushMatrix();
+            float var7 = ((float) (var6 % var5) / (float) var5 - 0.5F) / 64.0F;
+            float var8 = ((float) (var6 / var5) / (float) var5 - 0.5F) / 64.0F;
+            GL11.glTranslatef(var7, var8, 0F);
+            GL11.glRotatef(MathHelper.sin((((float)this.panoramaCounter) + delta) / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F); // Up & Down Waving
+            GL11.glRotatef(-(((float)this.panoramaCounter) + delta) * 0.1F, 0.0F, 1.0F, 0.0F); // Horizontal Rotation
+
+            for (int rotation = 0; rotation < 6; ++rotation) {
+                GL11.glPushMatrix();
+
+                switch (rotation) {
+                    case 1:
+                        GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
+                        break;
+                    case 2:
+                        GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
+                        break;
+                    case 3:
+                        GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
+                        break;
+                    case 4:
+                        GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
+                        break;
+                    case 5:
+                        GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
+                        break;
+                }
+
+                GL11.glBindTexture(
+                        GL11.GL_TEXTURE_2D,
+                        mc.textureRegistry.getTexture("/title/panorama"+selectedPanorama+"/panorama" + rotation + ".png")
+                );
+                tessellator.startDrawingQuads();
+                tessellator.setColorRGBA_I(16777215, 255 / (var6 + 1));
+                tessellator.addVertexWithUV(-1.0D, -1.0D, 1.0D, 0.0F, 0.0F);
+                tessellator.addVertexWithUV(1.0D, -1.0D, 1.0D, 1.0F, 0.0F);
+                tessellator.addVertexWithUV(1.0D, 1.0D, 1.0D, 1.0F, 1.0F);
+                tessellator.addVertexWithUV(-1.0D, 1.0D, 1.0D, 0.0F, 1.0F);
+                tessellator.draw();
+                GL11.glPopMatrix();
+            }
+
+            GL11.glPopMatrix();
+            GL11.glColorMask(true, true, true, false);
+        }
+
+        tessellator.setTranslationD(0.0D, 0.0D, 0.0D);
+        GL11.glColorMask(true, true, true, true);
+        GL11.glMatrixMode(GL11.GL_PROJECTION);
+        GL11.glPopMatrix();
+        GL11.glMatrixMode(GL11.GL_MODELVIEW);
+        GL11.glPopMatrix();
+        GL11.glDepthMask(true);
+        GL11.glEnable(GL11.GL_CULL_FACE);
+        GL11.glEnable(GL11.GL_ALPHA_TEST);
+        GL11.glEnable(GL11.GL_DEPTH_TEST);
+    }
+}
--- net/minecraft/game/world/block/GrassBlock.java
+++ net/minecraft/game/world/block/GrassBlock.java
@@ -6,29 +6,42 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class GrassBlock extends Block {
 	protected GrassBlock(int var1) {
 		super(var1, Material.grass);
-		this.textureIndex = 3;
+		this.textureIndex = getAtlasTexture(0,1);
 		this.setTickOnLoad(true);
 	}
 
+	@Override
+	public int getBlockTextureFromSide(int i) {
+		if (i == 1) {
+			return getAtlasTexture(0,0);
+		} else if (i == 0) {
+			return getAtlasTexture(3,1);
+		} else {
+			return this.textureIndex;
+		}
+	}
+
 	public int getBlockTexture(BlockAccess var1, int var2, int var3, int var4, int var5) {
 		if(var5 == 1) {
-			return 0;
+			return getAtlasTexture(1,0);
 		} else if(var5 == 0) {
-			return 2;
+			return getAtlasTexture(3,1);
 		} else {
 			Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-			return var6 != Material.snow && var6 != Material.builtSnow ? 3 : 68;
+			return var6 != Material.snow && var6 != Material.builtSnow ? getAtlasTexture(0,1) : getAtlasTexture(2,1);
 		}
 	}
 
 	public int getColorMultiplier(BlockAccess var1, int var2, int var3, int var4) {
-		var1.getBiomeSource().getBlockGeneratorData(var2, var4, 1, 1);
-		double var5 = var1.getBiomeSource().temperature[0];
+		/*double var5 = var1.getBiomeSource().temperature[0];
 		double var7 = var1.getBiomeSource().humidity[0];
-		return ColorizerGrass.getGrassColor(var5, var7);
+		return ColorizerGrass.getGrassColor(var5, var7);*/
+		return var1.getBiomeSource().getBlockGeneratorData(var2, var4, 1, 1)[0].foliageColor;
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
--- net/minecraft/game/world/block/ObsidianBlock.java
+++ net/minecraft/game/world/block/ObsidianBlock.java
@@ -4,7 +4,7 @@
 
 public class ObsidianBlock extends StoneBlock {
 	public ObsidianBlock(int var1, int var2) {
-		super(var1, var2);
+		super(var1, var2, 0);
 	}
 
 	public int quantityDropped(Random var1) {
--- net/minecraft/client/gui/TexturePackSlotGui.java
+++ net/minecraft/client/gui/TexturePackSlotGui.java
@@ -34,8 +34,8 @@
 		return this.getSize() * 36;
 	}
 
-	protected void drawBackground() {
-		this.parentTexturePackGui.drawDefaultBackground();
+	protected void drawBackground(float delta) {
+		this.parentTexturePackGui.drawDefaultBackground(delta);
 	}
 
 	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
--- net/minecraft/game/world/terrain/generate/TerrainGenCaves.java
+++ net/minecraft/game/world/terrain/generate/TerrainGenCaves.java
@@ -4,13 +4,14 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 
 public class TerrainGenCaves extends TerrainGenerator {
-	protected void generateLargeCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8) {
+	protected void generateLargeCaveNode(int var1, int var2, short[] var3, double var4, double var6, double var8) {
 		this.generateCaveNode(var1, var2, var3, var4, var6, var8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void generateCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
+	protected void generateCaveNode(int var1, int var2, short[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
 		double var17 = (double)(var1 * 16 + 8);
 		double var19 = (double)(var2 * 16 + 8);
 		float var21 = 0.0F;
@@ -83,8 +84,8 @@
 						var54 = 1;
 					}
 
-					if(var36 > 120) {
-						var36 = 120;
+					if(var36 > (SharedConstants.CHUNK_HEIGHT - 8)) {
+						var36 = SharedConstants.CHUNK_HEIGHT - 8;
 					}
 
 					if(var55 < 0) {
@@ -128,18 +129,18 @@
 									for(int var48 = var36 - 1; var48 >= var54; --var48) {
 										double var49 = ((double)var48 + 0.5D - var6) / var29;
 										if(var49 > -0.7D && var57 * var57 + var49 * var49 + var44 * var44 < 1.0D) {
-											byte var51 = var3[var46];
+											short var51 = var3[var46];
 											if(var51 == Block.grass.blockID) {
 												var47 = true;
 											}
 
 											if(var51 == Block.stone.blockID || var51 == Block.dirt.blockID || var51 == Block.grass.blockID) {
 												if(var48 < 10) {
-													var3[var46] = (byte)Block.flowingLava.blockID;
+													var3[var46] = (short)Block.flowingLava.blockID;
 												} else {
 													var3[var46] = 0;
 													if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
-														var3[var46 - 1] = (byte)Block.grass.blockID;
+														var3[var46 - 1] = (short)Block.grass.blockID;
 													}
 												}
 											}
@@ -161,7 +162,7 @@
 
 	}
 
-	protected void generateRecursive(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void generateRecursive(World var1, int var2, int var3, int var4, int var5, short[] var6) {
 		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
 		if(this.rand.nextInt(15) != 0) {
 			var7 = 0;
@@ -169,7 +170,7 @@
 
 		for(int var8 = 0; var8 < var7; ++var8) {
 			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			double var11 = (double)this.rand.nextInt(this.rand.nextInt(120) + 8);
+			double var11 = (double)this.rand.nextInt(this.rand.nextInt(SharedConstants.CHUNK_HEIGHT - 8) + 8);
 			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
 			int var15 = 1;
 			if(this.rand.nextInt(4) == 0) {
--- net/minecraft/client/gui/RenameWorldScreen.java
+++ net/minecraft/client/gui/RenameWorldScreen.java
@@ -68,7 +68,7 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		StringTranslate var4 = StringTranslate.getInstance();
-		this.drawDefaultBackground();
+		this.drawDefaultBackground(var3);
 		this.drawCenteredString(this.fontRenderer, var4.translateKey("selectWorld.renameTitle"), this.width / 2, this.height / 4 - 60 + 20, 16777215);
 		this.drawString(this.fontRenderer, var4.translateKey("selectWorld.enterName"), this.width / 2 - 100, 47, 10526880);
 		this.field_22114_h.drawTextBox();
--- net/minecraft/game/item/BlockItem.java
+++ net/minecraft/game/item/BlockItem.java
@@ -3,14 +3,15 @@
 import net.minecraft.game.entity.player.PlayerEntity;
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.block.Block;
+import net.minecraft.util.SharedConstants;
 
 public class BlockItem extends Item {
 	private int blockID;
 
 	public BlockItem(int var1) {
 		super(var1);
-		this.blockID = var1 + 256;
-		this.setTextureCoord(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
+		this.blockID = var1;
+		this.setTextureCoord(Block.blocksList[var1].getBlockTextureFromSide(2));
 	}
 
 	public boolean onItemUse(ItemStack var1, PlayerEntity var2, World var3, int var4, int var5, int var6, int var7) {
@@ -44,7 +45,7 @@
 
 		if(var1.count == 0) {
 			return false;
-		} else if(var5 == 127 && Block.blocksList[this.blockID].material.isSolid()) {
+		} else if(var5 == (SharedConstants.CHUNK_HEIGHT - 1) && Block.blocksList[this.blockID].material.isSolid()) {
 			return false;
 		} else if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false, var7)) {
 			Block var8 = Block.blocksList[this.blockID];
@@ -52,9 +53,11 @@
 				Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
 				Block.blocksList[this.blockID].onBlockPlacedBy(var3, var4, var5, var6, var2);
 				var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.baseStepSoundDir(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-				--var1.count;
+				if(!var3.isCreativeWorld()) {
+					--var1.count;
+				}
 			}
-
+			var2.addToPlayerScore(1);
 			return true;
 		} else {
 			return false;
--- net/minecraft/network/packet/Packet9Respawn.java
+++ net/minecraft/network/packet/Packet9Respawn.java
@@ -7,12 +7,14 @@
 
 public class Packet9Respawn extends Packet {
 	public byte dimension;
+	public boolean creative;
 
 	public Packet9Respawn() {
 	}
 
-	public Packet9Respawn(byte var1) {
+	public Packet9Respawn(byte var1, boolean var2) {
 		this.dimension = var1;
+		this.creative = var2;
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -21,13 +23,15 @@
 
 	public void readPacketData(DataInputStream var1) throws IOException {
 		this.dimension = var1.readByte();
+		this.creative = var1.readBoolean();
 	}
 
 	public void writePacketData(DataOutputStream var1) throws IOException {
 		var1.writeByte(this.dimension);
+		var1.writeBoolean(this.creative);
 	}
 
 	public int getPacketSize() {
-		return 1;
+		return 2;
 	}
 }
--- net/minecraft/game/entity/monster/SkeletonEntity.java
+++ net/minecraft/game/entity/monster/SkeletonEntity.java
@@ -14,6 +14,7 @@
 	public SkeletonEntity(World var1) {
 		super(var1);
 		this.texture = "/mob/skeleton.png";
+		this.scoreValue = 20;
 	}
 
 	protected String getLivingSound() {
--- net/minecraft/game/world/block/FarmlandBlock.java
+++ net/minecraft/game/world/block/FarmlandBlock.java
@@ -6,10 +6,12 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class FarmlandBlock extends Block {
 	protected FarmlandBlock(int var1) {
 		super(var1, Material.ground);
-		this.textureIndex = 87;
+		this.textureIndex = getAtlasTexture(9,30);
 		this.setTickOnLoad(true);
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 15.0F / 16.0F, 1.0F);
 		this.setLightOpacity(255);
@@ -28,7 +30,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 && var2 > 0 ? this.textureIndex - 1 : (var1 == 1 ? this.textureIndex : 2);
+		return var1 == 1 && var2 > 0 ? this.textureIndex - 1 : (var1 == 1 ? this.textureIndex : getAtlasTexture(3,1));
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
--- net/minecraft/client/gui/IngameHud.java
+++ net/minecraft/client/gui/IngameHud.java
@@ -10,9 +10,12 @@
 import net.minecraft.client.render.entity.RenderItem;
 import net.minecraft.game.entity.player.InventoryPlayer;
 import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.world.MovingObjectType;
+import net.minecraft.game.world.biome.Biome;
 import net.minecraft.game.world.block.Block;
 import net.minecraft.game.world.material.Material;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.StringTranslate;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
@@ -30,6 +33,11 @@
 	public float damageGuiPartialTime;
 	float prevVignetteBrightness = 1.0F;
 
+	public float scoreDestination = 2.0F;
+	public float scorePosition = -8.0F;
+	public int scoreTicksRemainingToBeVisible = 100;
+	public int previousScore = -1;
+
 	public IngameHud(Minecraft var1) {
 		this.mc = var1;
 	}
@@ -46,7 +54,7 @@
 		}
 
 		ItemStack var9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
-		if(!this.mc.gameSettings.thirdPersonView && var9 != null && var9.id == Block.pumpkin.blockID) {
+		if(this.mc.gameSettings.thirdPersonView == 0 && var9 != null && var9.id == Block.pumpkin.blockID) {
 			this.renderPumpkinBlur(var6, var7);
 		}
 
@@ -77,11 +85,12 @@
 		int var15;
 		int var16;
 		int var17;
-		if(this.mc.playerController.shouldDrawHUD()) {
+		if(this.mc.playerController.shouldDrawHUD() && !this.mc.theWorld.isCreativeWorld()) {
 			var15 = this.mc.thePlayer.getPlayerArmorValue();
 
 			int var18;
 			for(var16 = 0; var16 < 10; ++var16) {
+				// Armor
 				var17 = var7 - 32;
 				if(var15 > 0) {
 					var18 = var6 / 2 + 91 - var16 * 8 - 9;
@@ -98,6 +107,7 @@
 					}
 				}
 
+				// Health
 				byte var28 = 0;
 				if(var12) {
 					var28 = 1;
@@ -126,8 +136,25 @@
 				if(var16 * 2 + 1 == var13) {
 					this.drawTexturedRect(var19, var17, 61, 0, 9, 9);
 				}
+
+				// Sprint
+				if(var16 * 2 + 1 < (200-this.mc.thePlayer.damageSprintRecover)/10) {
+					if(var16 < 3) {
+						GL11.glColor4f(0.75F,0.75F,1.0F,1.0F);
+					}
+					this.drawTexturedRect(var19, var17, 98, 0, 9, 9);
+					GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
+				}
+				if(var16 * 2 + 1 == (200-this.mc.thePlayer.damageSprintRecover)/10) {
+					if(var16 < 3) {
+						GL11.glColor4f(0.75F,0.75F,1.0F,1.0F);
+					}
+					this.drawTexturedRect(var19, var17, 89, 0, 9, 9);
+					GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
+				}
 			}
 
+			// Breath
 			if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
 				var16 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
 				var17 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var16;
@@ -179,24 +206,43 @@
 				GL11.glTranslatef(0.0F, 32.0F, 0.0F);
 			}
 
-			var8.drawStringWithShadow("Minecraft Beta 1.7.3 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.func_6241_m(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.func_6262_n(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.func_6245_o(), 2, 32, 16777215);
-			var8.drawStringWithShadow(this.mc.func_21002_o(), 2, 42, 16777215);
+			renderDebugText(var8,SharedConstants.VERSION+" (" + this.mc.debug + ")", 2, 0, 16777215);
+			renderDebugText(var8,this.mc.func_6241_m(), 2, 1, 16777215);
+			renderDebugText(var8,this.mc.func_6262_n(), 2, 2, 16777215);
+			renderDebugText(var8,this.mc.func_6245_o(), 2, 3, 16777215);
+			renderDebugText(var8,this.mc.func_21002_o(), 2, 4, 16777215);
 			long var24 = Runtime.getRuntime().maxMemory();
 			long var29 = Runtime.getRuntime().totalMemory();
 			long var30 = Runtime.getRuntime().freeMemory();
 			long var21 = var29 - var30;
 			var23 = "Used memory: " + var21 * 100L / var24 + "% (" + var21 / 1024L / 1024L + "MB) of " + var24 / 1024L / 1024L + "MB";
-			this.drawString(var8, var23, var6 - var8.getStringWidth(var23) - 2, 2, 14737632);
+			renderDebugText(var8, var23, var6 - var8.getStringWidth(var23) - 2, 0, 14737632);
 			var23 = "Allocated memory: " + var29 * 100L / var24 + "% (" + var29 / 1024L / 1024L + "MB)";
-			this.drawString(var8, var23, var6 - var8.getStringWidth(var23) - 2, 12, 14737632);
-			this.drawString(var8, "x: " + this.mc.thePlayer.posX, 2, 64, 14737632);
-			this.drawString(var8, "y: " + this.mc.thePlayer.posY, 2, 72, 14737632);
-			this.drawString(var8, "z: " + this.mc.thePlayer.posZ, 2, 80, 14737632);
-			this.drawString(var8, "f: " + (MathHelper.floor((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3), 2, 88, 14737632);
+			renderDebugText(var8, var23, var6 - var8.getStringWidth(var23) - 2, 1, 14737632);
+
+			if(this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectType.BLOCK) {
+				int id = this.mc.theWorld.getBlockId(this.mc.objectMouseOver.blockX,this.mc.objectMouseOver.blockY,this.mc.objectMouseOver.blockZ);
+				int meta = this.mc.theWorld.getBlockMetadata(this.mc.objectMouseOver.blockX,this.mc.objectMouseOver.blockY,this.mc.objectMouseOver.blockZ);
+				var23 = "Block: §8"+Block.blocksList[id].getName()+" §r(§b"+id+"§r:§e"+meta+"§r)";
+				renderDebugText(var8, var23, var6 - var8.getStringWidth(var23) - 2, 3, 16777215);
+			}
+
+			renderDebugText(var8, "x: " + this.mc.thePlayer.posX, 2, 5, 14737632);
+			renderDebugText(var8, "y: " + this.mc.thePlayer.posY, 2, 6, 14737632);
+			renderDebugText(var8, "z: " + this.mc.thePlayer.posZ, 2, 7, 14737632);
+			renderDebugText(var8, "f: " + (MathHelper.floor((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3), 2, 8, 14737632);
+			Biome biome = this.mc.theWorld.getBiomeSource().getBiomeGenAt((int)this.mc.thePlayer.posX,(int)this.mc.thePlayer.posZ);
+			if(this.mc.theWorld.getBiomeSource().temperature != null) {
+				renderDebugText(var8, "Biome: " + biome.name + " (T: " + String.format("%.2f", this.mc.theWorld.getBiomeSource().temperature[0]) + " H: " + String.format("%.2f", this.mc.theWorld.getBiomeSource().humidity[0]) + ")", 2, 9, 14737632);
+			} else {
+				renderDebugText(var8, "Biome: " + biome.name + " (Single Biome)", 2, 9, 14737632);
+			}
 			GL11.glPopMatrix();
+		} else {
+			renderDebugText(var8,SharedConstants.VERSION,2,0,16777215);
+			if(!this.mc.theWorld.isCreativeWorld()) {
+				this.drawCenteredString(var8, "Score: §e" + this.mc.thePlayer.score, var5.getScaledWidth() / 2, (int) Math.round(scorePosition), 16777215);
+			}
 		}
 
 		if(this.recordPlayingUpFor > 0) {
@@ -332,10 +378,10 @@
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, var1);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.textureRegistry.getTexture("/terrain.png"));
-		float var4 = (float)(Block.portal.textureIndex % 16) / 16.0F;
-		float var5 = (float)(Block.portal.textureIndex / 16) / 16.0F;
-		float var6 = (float)(Block.portal.textureIndex % 16 + 1) / 16.0F;
-		float var7 = (float)(Block.portal.textureIndex / 16 + 1) / 16.0F;
+		float var4 = (float)(Block.portal.textureIndex % 32) / 32.0F;
+		float var5 = (float)(Block.portal.textureIndex / 32) / 32.0F;
+		float var6 = (float)(Block.portal.textureIndex % 32 + 1) / 32.0F;
+		float var7 = (float)(Block.portal.textureIndex / 32 + 1) / 32.0F;
 		Tessellator var8 = Tessellator.instance;
 		var8.startDrawingQuads();
 		var8.addVertexWithUV(0.0D, (double)var3, -90.0D, (double)var4, (double)var7);
@@ -377,6 +423,22 @@
 
 		++this.updateCounter;
 
+
+		if(this.mc.theWorld != null) {
+			if(this.mc.thePlayer.score != previousScore) {
+				previousScore = this.mc.thePlayer.score;
+				scoreTicksRemainingToBeVisible = 100;
+			}
+			if (scoreTicksRemainingToBeVisible > 0) {
+				scoreDestination = 2F;
+				--scoreTicksRemainingToBeVisible;
+			} else {
+				scoreDestination = -8F;
+			}
+		}
+
+		scorePosition = MathHelper.lerp(0.3, scorePosition, scoreDestination);
+
 		for(int var1 = 0; var1 < this.chatMessageList.size(); ++var1) {
 			++((ChatLine)this.chatMessageList.get(var1)).updateCounter;
 		}
@@ -415,5 +477,12 @@
 		StringTranslate var2 = StringTranslate.getInstance();
 		String var3 = var2.translateKey(var1);
 		this.addChatMessage(var3);
+	}
+
+	public void renderDebugText(FontRenderer font, String text, int x, int y, int color) {
+		int finalY = 2 + (y*11);
+		int size = font.getStringWidth(text);
+		this.drawRect(x-2,finalY-2,x+size+2,(finalY-2)+11,0x80000000);
+		this.drawString(font,text,x,finalY,color);
 	}
 }
--- net/minecraft/game/world/block/ChestBlock.java
+++ net/minecraft/game/world/block/ChestBlock.java
@@ -12,12 +12,14 @@
 import net.minecraft.game.world.block.tileentity.TileEntity;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class ChestBlock extends ContainerBlock {
 	private Random random = new Random();
 
 	protected ChestBlock(int var1) {
 		super(var1, Material.wood);
-		this.textureIndex = 26;
+		this.textureIndex = getAtlasTexture(27,0);
 	}
 
 	public int getBlockTexture(BlockAccess var1, int var2, int var3, int var4, int var5) {
@@ -75,7 +77,7 @@
 						var13 = 2;
 					}
 
-					return (var5 == var13 ? this.textureIndex + 16 : this.textureIndex + 32) + var10;
+					return (var5 == var13 ? this.textureIndex + 32 : this.textureIndex + 64) + var10;
 				} else {
 					return this.textureIndex;
 				}
@@ -100,7 +102,7 @@
 					var13 = 4;
 				}
 
-				return (var5 == var13 ? this.textureIndex + 16 : this.textureIndex + 32) + var10;
+				return (var5 == var13 ? this.textureIndex + 32 : this.textureIndex + 64) + var10;
 			} else {
 				return this.textureIndex;
 			}
--- /dev/null
+++ net/minecraft/client/ThreadGetSkin.java
@@ -1,0 +1,118 @@
+package net.minecraft.client;
+
+import argo.*;
+import net.minecraft.game.entity.player.PlayerEntity;
+
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
+import java.util.List;
+import java.util.Map;
+
+public class ThreadGetSkin extends Thread {
+    private String playerName = "";
+    private PlayerEntity player = null;
+    private String json;
+
+    public ThreadGetSkin() {
+        this.setName("Skin getting thread");
+        this.setDaemon(true);
+    }
+
+    public ThreadGetSkin(PlayerEntity player) {
+        this();
+        this.player = player;
+        this.playerName = player.username;
+    }
+
+    @Override
+    public void run() {
+        try {
+            //get uuid of player
+            URL nameToUUIDUrl = new URL("https://api.mojang.com/users/profiles/minecraft/" + playerName);
+            HttpURLConnection connection = (HttpURLConnection) nameToUUIDUrl.openConnection();
+            connection.setDoInput(true);
+            connection.setDoOutput(false);
+            connection.connect();
+            //check if server responded with HTTP 200, if not then throw exception.
+            if (connection.getResponseCode() != 200) {
+                throw new Exception("Failed to get UUID: Server responded with non-200 HTTP code.");
+            }
+            InputStream is = connection.getInputStream();
+            byte[] out = new byte[is.available()];
+            is.read(out, 0, is.available());
+            String s = new String(out, StandardCharsets.UTF_8);
+
+            J_JsonRootNode jsonParser = new J_JdomParser().func_27367_a(s);
+            String UUID = jsonParser.getStringValue("id");
+            //get profile json
+            URL profileURL = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + UUID);
+            connection = (HttpURLConnection) profileURL.openConnection();
+            connection.setDoInput(true);
+            connection.setDoOutput(false);
+            connection.connect();
+
+            //check if server responded with HTTP 200, if not then throw exception.
+            if (connection.getResponseCode() != 200) {
+            throw new Exception("Failed to get skin: Server responded with non-200 HTTP code.");
+            }
+
+            is = connection.getInputStream();
+            out = new byte[is.available()];
+            is.read(out, 0, is.available());
+            s = new String(out, StandardCharsets.UTF_8);
+
+            //parse the profile json and decode the skin json
+            jsonParser = new J_JdomParser().func_27367_a(s);
+            List<J_JsonNode> propertyArray = jsonParser.getArrayNode("properties");
+            for (J_JsonNode node : propertyArray) {
+                final Map<J_JsonStringNode, J_JsonNode> jsonNodeMap = node.getFields();
+                for (Map.Entry<J_JsonStringNode, J_JsonNode> stringNode : jsonNodeMap.entrySet()) {
+                    String key = stringNode.getKey().getStringValue();
+                    String value = stringNode.getValue().getStringValue();
+                    if (key.equals("value")) {
+                        json = new String(Base64.getDecoder().decode(value), StandardCharsets.UTF_8);
+                    }
+                }
+            }
+
+            jsonParser = new J_JdomParser().func_27367_a(json);
+            try {
+                String skinURL = "";
+                String capeURL = "";
+
+                String modelType = "";
+                //this is terrible, but i can't do anything about that
+                try {
+                    skinURL = jsonParser.getStringValue("textures", "SKIN", "url");
+                } catch (ClassCastException | J_JsonNodeDoesNotMatchPathElementsException cce) {
+                    //do nothing since we don't want the game to crash and/or print an annoying error into the console just because someone has a steve model or doesn't have a cape.
+                }
+
+                try {
+                    capeURL = jsonParser.getStringValue("textures", "CAPE", "url");
+                } catch (ClassCastException | J_JsonNodeDoesNotMatchPathElementsException cce) {
+                    //ditto
+                }
+
+                try {
+                    modelType = jsonParser.getStringValue("textures", "SKIN", "metadata", "model");
+                } catch (ClassCastException | J_JsonNodeDoesNotMatchPathElementsException cce) {
+
+                }
+
+                if (!skinURL.isEmpty()) player.skinUrl = skinURL;
+                if (!capeURL.isEmpty()) player.cloakUrl = capeURL;
+                //set model type of player
+                if (modelType.equals("slim")) player.isSlim = true;
+                player.worldObj.obtainEntitySkin(player);
+            } catch (NullPointerException npe) {
+
+            }
+        } catch (Exception t) {
+            new RuntimeException("Failed to get skin!", t).printStackTrace();
+        }
+    }
+}
--- net/minecraft/game/world/block/LogBlock.java
+++ net/minecraft/game/world/block/LogBlock.java
@@ -5,10 +5,12 @@
 import net.minecraft.game.world.World;
 import net.minecraft.game.world.material.Material;
 
+import static net.minecraft.util.SharedConstants.getAtlasTexture;
+
 public class LogBlock extends Block {
 	protected LogBlock(int var1) {
 		super(var1, Material.wood);
-		this.textureIndex = 20;
+		this.textureIndex = getAtlasTexture(17,0);
 	}
 
 	public int quantityDropped(Random var1) {
@@ -45,7 +47,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : (var2 == 1 ? 116 : (var2 == 2 ? 117 : 20)));
+		return var1 == 1 ? getAtlasTexture(18,var2) : (var1 == 0 ? getAtlasTexture(18,var2) : getAtlasTexture(17,var2));
 	}
 
 	protected int damageDropped(int var1) {
--- net/minecraft/game/world/biome/SingleBiomeSource.java
+++ net/minecraft/game/world/biome/SingleBiomeSource.java
@@ -3,7 +3,7 @@
 import java.util.Arrays;
 import net.minecraft.game.world.chunk.ChunkCoordIntPair;
 
-public class SingleBiomeSource extends ClimaticBiomeSource {
+public class SingleBiomeSource extends ClimaticVoronoiBiomeSource {
 	private Biome biome;
 	private double singleTemperature;
 	private double singleHumidity;
--- net/minecraft/game/entity/Entity.java
+++ net/minecraft/game/entity/Entity.java
@@ -44,6 +44,8 @@
 	public boolean onGround = false;
 	public boolean isCollidedHorizontally;
 	public boolean isCollidedVertically;
+	public boolean isCollidedX;
+	public boolean isCollidedZ;
 	public boolean isCollided = false;
 	public boolean beenAttacked = false;
 	public boolean isInWeb;
@@ -268,9 +270,11 @@
 	public void moveEntity(double var1, double var3, double var5) {
 		if(this.noClip) {
 			this.boundingBox.offset(var1, var3, var5);
-			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
-			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
-			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
+			if (!this.worldObj.remoteWorld || this instanceof PlayerEntity || !(this instanceof LivingEntity)) {
+				this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
+				this.posY = this.boundingBox.minY + (double) this.yOffset - (double) this.ySize;
+				this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
+			}
 		} else {
 			this.ySize *= 0.4F;
 			double var7 = this.posX;
@@ -425,11 +429,15 @@
 				}
 			}
 
-			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
-			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
-			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
+			if (!this.worldObj.remoteWorld || this instanceof PlayerEntity || !(this instanceof LivingEntity)) {
+				this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
+				this.posY = this.boundingBox.minY + (double) this.yOffset - (double) this.ySize;
+				this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
+			}
 			this.isCollidedHorizontally = var11 != var1 || var15 != var5;
 			this.isCollidedVertically = var13 != var3;
+			this.isCollidedX = var11 != var1;
+			this.isCollidedZ = var15 != var5;
 			this.onGround = var13 != var3 && var13 < 0.0D;
 			this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
 			this.updateFallState(var3, this.onGround);
@@ -671,6 +679,12 @@
 		return (double)MathHelper.sqrt(var7 * var7 + var9 * var9 + var11 * var11);
 	}
 
+	public double getDistanceSq(double var1, double var5) {
+		double var7 = this.posX - var1;
+		double var11 = this.posZ - var5;
+		return var7 * var7 + var11 * var11;
+}
+
 	public double getDistanceSqToEntity(Entity var1) {
 		double var2 = this.posX - var1.posX;
 		double var4 = this.posY - var1.posY;
@@ -731,7 +745,7 @@
 		return false;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
+	public void addEntityToPlayerScore(Entity var1, int var2) {
 	}
 
 	public boolean isInRangeToRenderVec3D(Vec3D var1) {
@@ -865,6 +879,7 @@
 	}
 
 	public boolean isEntityInsideOpaqueBlock() {
+		if(noClip) return false;
 		for(int var1 = 0; var1 < 8; ++var1) {
 			float var2 = ((float)((var1 >> 0) % 2) - 0.5F) * this.width * 0.9F;
 			float var3 = ((float)((var1 >> 1) % 2) - 0.5F) * 0.1F;
@@ -1078,6 +1093,7 @@
 	}
 
 	protected boolean pushOutOfBlocks(double var1, double var3, double var5) {
+		if(this.noClip) return false;
 		int var7 = MathHelper.floor(var1);
 		int var8 = MathHelper.floor(var3);
 		int var9 = MathHelper.floor(var5);
--- /dev/null
+++ net/minecraft/game/world/biome/categories/hot/Desert.java
@@ -1,0 +1,10 @@
+package net.minecraft.game.world.biome.categories.hot;
+
+import net.minecraft.game.world.biome.Biome;
+import net.minecraft.game.world.block.Block;
+
+public class Desert extends Biome {
+    public Desert() {
+        this.topBlock = this.fillerBlock = Block.sand.blockID;
+    }
+}
--- net/minecraft/game/entity/animal/ChickenEntity.java
+++ net/minecraft/game/entity/animal/ChickenEntity.java
@@ -19,6 +19,7 @@
 		this.setSize(0.3F, 0.4F);
 		this.health = 4;
 		this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
+		this.scoreValue = 5;
 	}
 
 	public void onLivingUpdate() {
@@ -75,7 +76,22 @@
 		return "mob.chickenhurt";
 	}
 
-	protected int getDropItemId() {
+	/*protected int getDropItemId() {
 		return Item.feather.itemID;
+	}*/
+
+	protected void dropFewItems() {
+		int var2 = this.rand.nextInt(3);
+
+		int var3;
+		for(var3 = 0; var3 < var2; ++var3) {
+			this.dropItem(Item.feather.itemID, 1);
+		}
+
+		if(this.fire > 0) {
+			this.dropItem(Item.cookedChicken.itemID, 1);
+		} else {
+			this.dropItem(Item.rawChicken.itemID, 1);
+		}
 	}
 }
